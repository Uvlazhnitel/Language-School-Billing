// Code generated by ent, DO NOT EDIT.

package settings

import (
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldID, id))
}

// SingletonID applies equality check predicate on the "singleton_id" field. It's identical to SingletonIDEQ.
func SingletonID(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSingletonID, v))
}

// OrgName applies equality check predicate on the "org_name" field. It's identical to OrgNameEQ.
func OrgName(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldOrgName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldAddress, v))
}

// InvoicePrefix applies equality check predicate on the "invoice_prefix" field. It's identical to InvoicePrefixEQ.
func InvoicePrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldInvoicePrefix, v))
}

// NextSeq applies equality check predicate on the "next_seq" field. It's identical to NextSeqEQ.
func NextSeq(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNextSeq, v))
}

// InvoiceDayOfMonth applies equality check predicate on the "invoice_day_of_month" field. It's identical to InvoiceDayOfMonthEQ.
func InvoiceDayOfMonth(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldInvoiceDayOfMonth, v))
}

// AutoIssue applies equality check predicate on the "auto_issue" field. It's identical to AutoIssueEQ.
func AutoIssue(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldAutoIssue, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCurrency, v))
}

// Locale applies equality check predicate on the "locale" field. It's identical to LocaleEQ.
func Locale(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLocale, v))
}

// SingletonIDEQ applies the EQ predicate on the "singleton_id" field.
func SingletonIDEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldSingletonID, v))
}

// SingletonIDNEQ applies the NEQ predicate on the "singleton_id" field.
func SingletonIDNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldSingletonID, v))
}

// SingletonIDIn applies the In predicate on the "singleton_id" field.
func SingletonIDIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldSingletonID, vs...))
}

// SingletonIDNotIn applies the NotIn predicate on the "singleton_id" field.
func SingletonIDNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldSingletonID, vs...))
}

// SingletonIDGT applies the GT predicate on the "singleton_id" field.
func SingletonIDGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldSingletonID, v))
}

// SingletonIDGTE applies the GTE predicate on the "singleton_id" field.
func SingletonIDGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldSingletonID, v))
}

// SingletonIDLT applies the LT predicate on the "singleton_id" field.
func SingletonIDLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldSingletonID, v))
}

// SingletonIDLTE applies the LTE predicate on the "singleton_id" field.
func SingletonIDLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldSingletonID, v))
}

// OrgNameEQ applies the EQ predicate on the "org_name" field.
func OrgNameEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldOrgName, v))
}

// OrgNameNEQ applies the NEQ predicate on the "org_name" field.
func OrgNameNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldOrgName, v))
}

// OrgNameIn applies the In predicate on the "org_name" field.
func OrgNameIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldOrgName, vs...))
}

// OrgNameNotIn applies the NotIn predicate on the "org_name" field.
func OrgNameNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldOrgName, vs...))
}

// OrgNameGT applies the GT predicate on the "org_name" field.
func OrgNameGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldOrgName, v))
}

// OrgNameGTE applies the GTE predicate on the "org_name" field.
func OrgNameGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldOrgName, v))
}

// OrgNameLT applies the LT predicate on the "org_name" field.
func OrgNameLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldOrgName, v))
}

// OrgNameLTE applies the LTE predicate on the "org_name" field.
func OrgNameLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldOrgName, v))
}

// OrgNameContains applies the Contains predicate on the "org_name" field.
func OrgNameContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldOrgName, v))
}

// OrgNameHasPrefix applies the HasPrefix predicate on the "org_name" field.
func OrgNameHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldOrgName, v))
}

// OrgNameHasSuffix applies the HasSuffix predicate on the "org_name" field.
func OrgNameHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldOrgName, v))
}

// OrgNameEqualFold applies the EqualFold predicate on the "org_name" field.
func OrgNameEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldOrgName, v))
}

// OrgNameContainsFold applies the ContainsFold predicate on the "org_name" field.
func OrgNameContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldOrgName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldAddress, v))
}

// InvoicePrefixEQ applies the EQ predicate on the "invoice_prefix" field.
func InvoicePrefixEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldInvoicePrefix, v))
}

// InvoicePrefixNEQ applies the NEQ predicate on the "invoice_prefix" field.
func InvoicePrefixNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldInvoicePrefix, v))
}

// InvoicePrefixIn applies the In predicate on the "invoice_prefix" field.
func InvoicePrefixIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldInvoicePrefix, vs...))
}

// InvoicePrefixNotIn applies the NotIn predicate on the "invoice_prefix" field.
func InvoicePrefixNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldInvoicePrefix, vs...))
}

// InvoicePrefixGT applies the GT predicate on the "invoice_prefix" field.
func InvoicePrefixGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldInvoicePrefix, v))
}

// InvoicePrefixGTE applies the GTE predicate on the "invoice_prefix" field.
func InvoicePrefixGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldInvoicePrefix, v))
}

// InvoicePrefixLT applies the LT predicate on the "invoice_prefix" field.
func InvoicePrefixLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldInvoicePrefix, v))
}

// InvoicePrefixLTE applies the LTE predicate on the "invoice_prefix" field.
func InvoicePrefixLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldInvoicePrefix, v))
}

// InvoicePrefixContains applies the Contains predicate on the "invoice_prefix" field.
func InvoicePrefixContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldInvoicePrefix, v))
}

// InvoicePrefixHasPrefix applies the HasPrefix predicate on the "invoice_prefix" field.
func InvoicePrefixHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldInvoicePrefix, v))
}

// InvoicePrefixHasSuffix applies the HasSuffix predicate on the "invoice_prefix" field.
func InvoicePrefixHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldInvoicePrefix, v))
}

// InvoicePrefixEqualFold applies the EqualFold predicate on the "invoice_prefix" field.
func InvoicePrefixEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldInvoicePrefix, v))
}

// InvoicePrefixContainsFold applies the ContainsFold predicate on the "invoice_prefix" field.
func InvoicePrefixContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldInvoicePrefix, v))
}

// NextSeqEQ applies the EQ predicate on the "next_seq" field.
func NextSeqEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldNextSeq, v))
}

// NextSeqNEQ applies the NEQ predicate on the "next_seq" field.
func NextSeqNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldNextSeq, v))
}

// NextSeqIn applies the In predicate on the "next_seq" field.
func NextSeqIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldNextSeq, vs...))
}

// NextSeqNotIn applies the NotIn predicate on the "next_seq" field.
func NextSeqNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldNextSeq, vs...))
}

// NextSeqGT applies the GT predicate on the "next_seq" field.
func NextSeqGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldNextSeq, v))
}

// NextSeqGTE applies the GTE predicate on the "next_seq" field.
func NextSeqGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldNextSeq, v))
}

// NextSeqLT applies the LT predicate on the "next_seq" field.
func NextSeqLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldNextSeq, v))
}

// NextSeqLTE applies the LTE predicate on the "next_seq" field.
func NextSeqLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldNextSeq, v))
}

// InvoiceDayOfMonthEQ applies the EQ predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldInvoiceDayOfMonth, v))
}

// InvoiceDayOfMonthNEQ applies the NEQ predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldInvoiceDayOfMonth, v))
}

// InvoiceDayOfMonthIn applies the In predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldInvoiceDayOfMonth, vs...))
}

// InvoiceDayOfMonthNotIn applies the NotIn predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldInvoiceDayOfMonth, vs...))
}

// InvoiceDayOfMonthGT applies the GT predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldInvoiceDayOfMonth, v))
}

// InvoiceDayOfMonthGTE applies the GTE predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldInvoiceDayOfMonth, v))
}

// InvoiceDayOfMonthLT applies the LT predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldInvoiceDayOfMonth, v))
}

// InvoiceDayOfMonthLTE applies the LTE predicate on the "invoice_day_of_month" field.
func InvoiceDayOfMonthLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldInvoiceDayOfMonth, v))
}

// AutoIssueEQ applies the EQ predicate on the "auto_issue" field.
func AutoIssueEQ(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldAutoIssue, v))
}

// AutoIssueNEQ applies the NEQ predicate on the "auto_issue" field.
func AutoIssueNEQ(v bool) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldAutoIssue, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldCurrency, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLocale, v))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLocale, v))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLocale, vs...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLocale, vs...))
}

// LocaleGT applies the GT predicate on the "locale" field.
func LocaleGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLocale, v))
}

// LocaleGTE applies the GTE predicate on the "locale" field.
func LocaleGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLocale, v))
}

// LocaleLT applies the LT predicate on the "locale" field.
func LocaleLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLocale, v))
}

// LocaleLTE applies the LTE predicate on the "locale" field.
func LocaleLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLocale, v))
}

// LocaleContains applies the Contains predicate on the "locale" field.
func LocaleContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldLocale, v))
}

// LocaleHasPrefix applies the HasPrefix predicate on the "locale" field.
func LocaleHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldLocale, v))
}

// LocaleHasSuffix applies the HasSuffix predicate on the "locale" field.
func LocaleHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldLocale, v))
}

// LocaleEqualFold applies the EqualFold predicate on the "locale" field.
func LocaleEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldLocale, v))
}

// LocaleContainsFold applies the ContainsFold predicate on the "locale" field.
func LocaleContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldLocale, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.NotPredicates(p))
}

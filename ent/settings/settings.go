// Code generated by ent, DO NOT EDIT.

package settings

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSingletonID holds the string denoting the singleton_id field in the database.
	FieldSingletonID = "singleton_id"
	// FieldOrgName holds the string denoting the org_name field in the database.
	FieldOrgName = "org_name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldInvoicePrefix holds the string denoting the invoice_prefix field in the database.
	FieldInvoicePrefix = "invoice_prefix"
	// FieldNextSeq holds the string denoting the next_seq field in the database.
	FieldNextSeq = "next_seq"
	// FieldInvoiceDayOfMonth holds the string denoting the invoice_day_of_month field in the database.
	FieldInvoiceDayOfMonth = "invoice_day_of_month"
	// FieldAutoIssue holds the string denoting the auto_issue field in the database.
	FieldAutoIssue = "auto_issue"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// Table holds the table name of the settings in the database.
	Table = "settings"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldSingletonID,
	FieldOrgName,
	FieldAddress,
	FieldInvoicePrefix,
	FieldNextSeq,
	FieldInvoiceDayOfMonth,
	FieldAutoIssue,
	FieldCurrency,
	FieldLocale,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOrgName holds the default value on creation for the "org_name" field.
	DefaultOrgName string
	// DefaultAddress holds the default value on creation for the "address" field.
	DefaultAddress string
	// DefaultInvoicePrefix holds the default value on creation for the "invoice_prefix" field.
	DefaultInvoicePrefix string
	// DefaultNextSeq holds the default value on creation for the "next_seq" field.
	DefaultNextSeq int
	// DefaultInvoiceDayOfMonth holds the default value on creation for the "invoice_day_of_month" field.
	DefaultInvoiceDayOfMonth int
	// DefaultAutoIssue holds the default value on creation for the "auto_issue" field.
	DefaultAutoIssue bool
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale string
)

// OrderOption defines the ordering options for the Settings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySingletonID orders the results by the singleton_id field.
func BySingletonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSingletonID, opts...).ToFunc()
}

// ByOrgName orders the results by the org_name field.
func ByOrgName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByInvoicePrefix orders the results by the invoice_prefix field.
func ByInvoicePrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoicePrefix, opts...).ToFunc()
}

// ByNextSeq orders the results by the next_seq field.
func ByNextSeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextSeq, opts...).ToFunc()
}

// ByInvoiceDayOfMonth orders the results by the invoice_day_of_month field.
func ByInvoiceDayOfMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceDayOfMonth, opts...).ToFunc()
}

// ByAutoIssue orders the results by the auto_issue field.
func ByAutoIssue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoIssue, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/settings"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
}

// SetSingletonID sets the "singleton_id" field.
func (_c *SettingsCreate) SetSingletonID(v int) *SettingsCreate {
	_c.mutation.SetSingletonID(v)
	return _c
}

// SetOrgName sets the "org_name" field.
func (_c *SettingsCreate) SetOrgName(v string) *SettingsCreate {
	_c.mutation.SetOrgName(v)
	return _c
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableOrgName(v *string) *SettingsCreate {
	if v != nil {
		_c.SetOrgName(*v)
	}
	return _c
}

// SetAddress sets the "address" field.
func (_c *SettingsCreate) SetAddress(v string) *SettingsCreate {
	_c.mutation.SetAddress(v)
	return _c
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableAddress(v *string) *SettingsCreate {
	if v != nil {
		_c.SetAddress(*v)
	}
	return _c
}

// SetInvoicePrefix sets the "invoice_prefix" field.
func (_c *SettingsCreate) SetInvoicePrefix(v string) *SettingsCreate {
	_c.mutation.SetInvoicePrefix(v)
	return _c
}

// SetNillableInvoicePrefix sets the "invoice_prefix" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableInvoicePrefix(v *string) *SettingsCreate {
	if v != nil {
		_c.SetInvoicePrefix(*v)
	}
	return _c
}

// SetNextSeq sets the "next_seq" field.
func (_c *SettingsCreate) SetNextSeq(v int) *SettingsCreate {
	_c.mutation.SetNextSeq(v)
	return _c
}

// SetNillableNextSeq sets the "next_seq" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableNextSeq(v *int) *SettingsCreate {
	if v != nil {
		_c.SetNextSeq(*v)
	}
	return _c
}

// SetInvoiceDayOfMonth sets the "invoice_day_of_month" field.
func (_c *SettingsCreate) SetInvoiceDayOfMonth(v int) *SettingsCreate {
	_c.mutation.SetInvoiceDayOfMonth(v)
	return _c
}

// SetNillableInvoiceDayOfMonth sets the "invoice_day_of_month" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableInvoiceDayOfMonth(v *int) *SettingsCreate {
	if v != nil {
		_c.SetInvoiceDayOfMonth(*v)
	}
	return _c
}

// SetAutoIssue sets the "auto_issue" field.
func (_c *SettingsCreate) SetAutoIssue(v bool) *SettingsCreate {
	_c.mutation.SetAutoIssue(v)
	return _c
}

// SetNillableAutoIssue sets the "auto_issue" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableAutoIssue(v *bool) *SettingsCreate {
	if v != nil {
		_c.SetAutoIssue(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *SettingsCreate) SetCurrency(v string) *SettingsCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableCurrency(v *string) *SettingsCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetLocale sets the "locale" field.
func (_c *SettingsCreate) SetLocale(v string) *SettingsCreate {
	_c.mutation.SetLocale(v)
	return _c
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (_c *SettingsCreate) SetNillableLocale(v *string) *SettingsCreate {
	if v != nil {
		_c.SetLocale(*v)
	}
	return _c
}

// Mutation returns the SettingsMutation object of the builder.
func (_c *SettingsCreate) Mutation() *SettingsMutation {
	return _c.mutation
}

// Save creates the Settings in the database.
func (_c *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SettingsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SettingsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SettingsCreate) defaults() {
	if _, ok := _c.mutation.OrgName(); !ok {
		v := settings.DefaultOrgName
		_c.mutation.SetOrgName(v)
	}
	if _, ok := _c.mutation.Address(); !ok {
		v := settings.DefaultAddress
		_c.mutation.SetAddress(v)
	}
	if _, ok := _c.mutation.InvoicePrefix(); !ok {
		v := settings.DefaultInvoicePrefix
		_c.mutation.SetInvoicePrefix(v)
	}
	if _, ok := _c.mutation.NextSeq(); !ok {
		v := settings.DefaultNextSeq
		_c.mutation.SetNextSeq(v)
	}
	if _, ok := _c.mutation.InvoiceDayOfMonth(); !ok {
		v := settings.DefaultInvoiceDayOfMonth
		_c.mutation.SetInvoiceDayOfMonth(v)
	}
	if _, ok := _c.mutation.AutoIssue(); !ok {
		v := settings.DefaultAutoIssue
		_c.mutation.SetAutoIssue(v)
	}
	if _, ok := _c.mutation.Currency(); !ok {
		v := settings.DefaultCurrency
		_c.mutation.SetCurrency(v)
	}
	if _, ok := _c.mutation.Locale(); !ok {
		v := settings.DefaultLocale
		_c.mutation.SetLocale(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SettingsCreate) check() error {
	if _, ok := _c.mutation.SingletonID(); !ok {
		return &ValidationError{Name: "singleton_id", err: errors.New(`ent: missing required field "Settings.singleton_id"`)}
	}
	if _, ok := _c.mutation.OrgName(); !ok {
		return &ValidationError{Name: "org_name", err: errors.New(`ent: missing required field "Settings.org_name"`)}
	}
	if _, ok := _c.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Settings.address"`)}
	}
	if _, ok := _c.mutation.InvoicePrefix(); !ok {
		return &ValidationError{Name: "invoice_prefix", err: errors.New(`ent: missing required field "Settings.invoice_prefix"`)}
	}
	if _, ok := _c.mutation.NextSeq(); !ok {
		return &ValidationError{Name: "next_seq", err: errors.New(`ent: missing required field "Settings.next_seq"`)}
	}
	if _, ok := _c.mutation.InvoiceDayOfMonth(); !ok {
		return &ValidationError{Name: "invoice_day_of_month", err: errors.New(`ent: missing required field "Settings.invoice_day_of_month"`)}
	}
	if _, ok := _c.mutation.AutoIssue(); !ok {
		return &ValidationError{Name: "auto_issue", err: errors.New(`ent: missing required field "Settings.auto_issue"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Settings.currency"`)}
	}
	if _, ok := _c.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "Settings.locale"`)}
	}
	return nil
}

func (_c *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(settings.Table, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.SingletonID(); ok {
		_spec.SetField(settings.FieldSingletonID, field.TypeInt, value)
		_node.SingletonID = value
	}
	if value, ok := _c.mutation.OrgName(); ok {
		_spec.SetField(settings.FieldOrgName, field.TypeString, value)
		_node.OrgName = value
	}
	if value, ok := _c.mutation.Address(); ok {
		_spec.SetField(settings.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := _c.mutation.InvoicePrefix(); ok {
		_spec.SetField(settings.FieldInvoicePrefix, field.TypeString, value)
		_node.InvoicePrefix = value
	}
	if value, ok := _c.mutation.NextSeq(); ok {
		_spec.SetField(settings.FieldNextSeq, field.TypeInt, value)
		_node.NextSeq = value
	}
	if value, ok := _c.mutation.InvoiceDayOfMonth(); ok {
		_spec.SetField(settings.FieldInvoiceDayOfMonth, field.TypeInt, value)
		_node.InvoiceDayOfMonth = value
	}
	if value, ok := _c.mutation.AutoIssue(); ok {
		_spec.SetField(settings.FieldAutoIssue, field.TypeBool, value)
		_node.AutoIssue = value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(settings.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.Locale(); ok {
		_spec.SetField(settings.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	return _node, _spec
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	err      error
	builders []*SettingsCreate
}

// Save creates the Settings entities in the database.
func (_c *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Settings, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SettingsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

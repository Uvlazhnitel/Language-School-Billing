// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/course"
	"langschool/ent/enrollment"
	"langschool/ent/invoiceline"
	"langschool/ent/predicate"
	"langschool/ent/priceoverride"
	"langschool/ent/student"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EnrollmentUpdate is the builder for updating Enrollment entities.
type EnrollmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnrollmentMutation
}

// Where appends a list predicates to the EnrollmentUpdate builder.
func (_u *EnrollmentUpdate) Where(ps ...predicate.Enrollment) *EnrollmentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStudentID sets the "student_id" field.
func (_u *EnrollmentUpdate) SetStudentID(v int) *EnrollmentUpdate {
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableStudentID(v *int) *EnrollmentUpdate {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// SetCourseID sets the "course_id" field.
func (_u *EnrollmentUpdate) SetCourseID(v int) *EnrollmentUpdate {
	_u.mutation.SetCourseID(v)
	return _u
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableCourseID(v *int) *EnrollmentUpdate {
	if v != nil {
		_u.SetCourseID(*v)
	}
	return _u
}

// SetBillingMode sets the "billing_mode" field.
func (_u *EnrollmentUpdate) SetBillingMode(v enrollment.BillingMode) *EnrollmentUpdate {
	_u.mutation.SetBillingMode(v)
	return _u
}

// SetNillableBillingMode sets the "billing_mode" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableBillingMode(v *enrollment.BillingMode) *EnrollmentUpdate {
	if v != nil {
		_u.SetBillingMode(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *EnrollmentUpdate) SetStartDate(v time.Time) *EnrollmentUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableStartDate(v *time.Time) *EnrollmentUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *EnrollmentUpdate) SetEndDate(v time.Time) *EnrollmentUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableEndDate(v *time.Time) *EnrollmentUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *EnrollmentUpdate) ClearEndDate() *EnrollmentUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetDiscountPct sets the "discount_pct" field.
func (_u *EnrollmentUpdate) SetDiscountPct(v float64) *EnrollmentUpdate {
	_u.mutation.ResetDiscountPct()
	_u.mutation.SetDiscountPct(v)
	return _u
}

// SetNillableDiscountPct sets the "discount_pct" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableDiscountPct(v *float64) *EnrollmentUpdate {
	if v != nil {
		_u.SetDiscountPct(*v)
	}
	return _u
}

// AddDiscountPct adds value to the "discount_pct" field.
func (_u *EnrollmentUpdate) AddDiscountPct(v float64) *EnrollmentUpdate {
	_u.mutation.AddDiscountPct(v)
	return _u
}

// SetNote sets the "note" field.
func (_u *EnrollmentUpdate) SetNote(v string) *EnrollmentUpdate {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *EnrollmentUpdate) SetNillableNote(v *string) *EnrollmentUpdate {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// SetStudent sets the "student" edge to the Student entity.
func (_u *EnrollmentUpdate) SetStudent(v *Student) *EnrollmentUpdate {
	return _u.SetStudentID(v.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *EnrollmentUpdate) SetCourse(v *Course) *EnrollmentUpdate {
	return _u.SetCourseID(v.ID)
}

// AddInvoiceLineIDs adds the "invoice_lines" edge to the InvoiceLine entity by IDs.
func (_u *EnrollmentUpdate) AddInvoiceLineIDs(ids ...int) *EnrollmentUpdate {
	_u.mutation.AddInvoiceLineIDs(ids...)
	return _u
}

// AddInvoiceLines adds the "invoice_lines" edges to the InvoiceLine entity.
func (_u *EnrollmentUpdate) AddInvoiceLines(v ...*InvoiceLine) *EnrollmentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInvoiceLineIDs(ids...)
}

// AddPriceOverrideIDs adds the "price_overrides" edge to the PriceOverride entity by IDs.
func (_u *EnrollmentUpdate) AddPriceOverrideIDs(ids ...int) *EnrollmentUpdate {
	_u.mutation.AddPriceOverrideIDs(ids...)
	return _u
}

// AddPriceOverrides adds the "price_overrides" edges to the PriceOverride entity.
func (_u *EnrollmentUpdate) AddPriceOverrides(v ...*PriceOverride) *EnrollmentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPriceOverrideIDs(ids...)
}

// Mutation returns the EnrollmentMutation object of the builder.
func (_u *EnrollmentUpdate) Mutation() *EnrollmentMutation {
	return _u.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (_u *EnrollmentUpdate) ClearStudent() *EnrollmentUpdate {
	_u.mutation.ClearStudent()
	return _u
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *EnrollmentUpdate) ClearCourse() *EnrollmentUpdate {
	_u.mutation.ClearCourse()
	return _u
}

// ClearInvoiceLines clears all "invoice_lines" edges to the InvoiceLine entity.
func (_u *EnrollmentUpdate) ClearInvoiceLines() *EnrollmentUpdate {
	_u.mutation.ClearInvoiceLines()
	return _u
}

// RemoveInvoiceLineIDs removes the "invoice_lines" edge to InvoiceLine entities by IDs.
func (_u *EnrollmentUpdate) RemoveInvoiceLineIDs(ids ...int) *EnrollmentUpdate {
	_u.mutation.RemoveInvoiceLineIDs(ids...)
	return _u
}

// RemoveInvoiceLines removes "invoice_lines" edges to InvoiceLine entities.
func (_u *EnrollmentUpdate) RemoveInvoiceLines(v ...*InvoiceLine) *EnrollmentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInvoiceLineIDs(ids...)
}

// ClearPriceOverrides clears all "price_overrides" edges to the PriceOverride entity.
func (_u *EnrollmentUpdate) ClearPriceOverrides() *EnrollmentUpdate {
	_u.mutation.ClearPriceOverrides()
	return _u
}

// RemovePriceOverrideIDs removes the "price_overrides" edge to PriceOverride entities by IDs.
func (_u *EnrollmentUpdate) RemovePriceOverrideIDs(ids ...int) *EnrollmentUpdate {
	_u.mutation.RemovePriceOverrideIDs(ids...)
	return _u
}

// RemovePriceOverrides removes "price_overrides" edges to PriceOverride entities.
func (_u *EnrollmentUpdate) RemovePriceOverrides(v ...*PriceOverride) *EnrollmentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePriceOverrideIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EnrollmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EnrollmentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EnrollmentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EnrollmentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EnrollmentUpdate) check() error {
	if v, ok := _u.mutation.BillingMode(); ok {
		if err := enrollment.BillingModeValidator(v); err != nil {
			return &ValidationError{Name: "billing_mode", err: fmt.Errorf(`ent: validator failed for field "Enrollment.billing_mode": %w`, err)}
		}
	}
	if _u.mutation.StudentCleared() && len(_u.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Enrollment.student"`)
	}
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Enrollment.course"`)
	}
	return nil
}

func (_u *EnrollmentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BillingMode(); ok {
		_spec.SetField(enrollment.FieldBillingMode, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(enrollment.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(enrollment.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(enrollment.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.DiscountPct(); ok {
		_spec.SetField(enrollment.FieldDiscountPct, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiscountPct(); ok {
		_spec.AddField(enrollment.FieldDiscountPct, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(enrollment.FieldNote, field.TypeString, value)
	}
	if _u.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.StudentTable,
			Columns: []string{enrollment.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.StudentTable,
			Columns: []string{enrollment.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvoiceLinesIDs(); len(nodes) > 0 && !_u.mutation.InvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PriceOverridesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPriceOverridesIDs(); len(nodes) > 0 && !_u.mutation.PriceOverridesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PriceOverridesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EnrollmentUpdateOne is the builder for updating a single Enrollment entity.
type EnrollmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnrollmentMutation
}

// SetStudentID sets the "student_id" field.
func (_u *EnrollmentUpdateOne) SetStudentID(v int) *EnrollmentUpdateOne {
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableStudentID(v *int) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// SetCourseID sets the "course_id" field.
func (_u *EnrollmentUpdateOne) SetCourseID(v int) *EnrollmentUpdateOne {
	_u.mutation.SetCourseID(v)
	return _u
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableCourseID(v *int) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetCourseID(*v)
	}
	return _u
}

// SetBillingMode sets the "billing_mode" field.
func (_u *EnrollmentUpdateOne) SetBillingMode(v enrollment.BillingMode) *EnrollmentUpdateOne {
	_u.mutation.SetBillingMode(v)
	return _u
}

// SetNillableBillingMode sets the "billing_mode" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableBillingMode(v *enrollment.BillingMode) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetBillingMode(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *EnrollmentUpdateOne) SetStartDate(v time.Time) *EnrollmentUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableStartDate(v *time.Time) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *EnrollmentUpdateOne) SetEndDate(v time.Time) *EnrollmentUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableEndDate(v *time.Time) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *EnrollmentUpdateOne) ClearEndDate() *EnrollmentUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetDiscountPct sets the "discount_pct" field.
func (_u *EnrollmentUpdateOne) SetDiscountPct(v float64) *EnrollmentUpdateOne {
	_u.mutation.ResetDiscountPct()
	_u.mutation.SetDiscountPct(v)
	return _u
}

// SetNillableDiscountPct sets the "discount_pct" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableDiscountPct(v *float64) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetDiscountPct(*v)
	}
	return _u
}

// AddDiscountPct adds value to the "discount_pct" field.
func (_u *EnrollmentUpdateOne) AddDiscountPct(v float64) *EnrollmentUpdateOne {
	_u.mutation.AddDiscountPct(v)
	return _u
}

// SetNote sets the "note" field.
func (_u *EnrollmentUpdateOne) SetNote(v string) *EnrollmentUpdateOne {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *EnrollmentUpdateOne) SetNillableNote(v *string) *EnrollmentUpdateOne {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// SetStudent sets the "student" edge to the Student entity.
func (_u *EnrollmentUpdateOne) SetStudent(v *Student) *EnrollmentUpdateOne {
	return _u.SetStudentID(v.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *EnrollmentUpdateOne) SetCourse(v *Course) *EnrollmentUpdateOne {
	return _u.SetCourseID(v.ID)
}

// AddInvoiceLineIDs adds the "invoice_lines" edge to the InvoiceLine entity by IDs.
func (_u *EnrollmentUpdateOne) AddInvoiceLineIDs(ids ...int) *EnrollmentUpdateOne {
	_u.mutation.AddInvoiceLineIDs(ids...)
	return _u
}

// AddInvoiceLines adds the "invoice_lines" edges to the InvoiceLine entity.
func (_u *EnrollmentUpdateOne) AddInvoiceLines(v ...*InvoiceLine) *EnrollmentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInvoiceLineIDs(ids...)
}

// AddPriceOverrideIDs adds the "price_overrides" edge to the PriceOverride entity by IDs.
func (_u *EnrollmentUpdateOne) AddPriceOverrideIDs(ids ...int) *EnrollmentUpdateOne {
	_u.mutation.AddPriceOverrideIDs(ids...)
	return _u
}

// AddPriceOverrides adds the "price_overrides" edges to the PriceOverride entity.
func (_u *EnrollmentUpdateOne) AddPriceOverrides(v ...*PriceOverride) *EnrollmentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPriceOverrideIDs(ids...)
}

// Mutation returns the EnrollmentMutation object of the builder.
func (_u *EnrollmentUpdateOne) Mutation() *EnrollmentMutation {
	return _u.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (_u *EnrollmentUpdateOne) ClearStudent() *EnrollmentUpdateOne {
	_u.mutation.ClearStudent()
	return _u
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *EnrollmentUpdateOne) ClearCourse() *EnrollmentUpdateOne {
	_u.mutation.ClearCourse()
	return _u
}

// ClearInvoiceLines clears all "invoice_lines" edges to the InvoiceLine entity.
func (_u *EnrollmentUpdateOne) ClearInvoiceLines() *EnrollmentUpdateOne {
	_u.mutation.ClearInvoiceLines()
	return _u
}

// RemoveInvoiceLineIDs removes the "invoice_lines" edge to InvoiceLine entities by IDs.
func (_u *EnrollmentUpdateOne) RemoveInvoiceLineIDs(ids ...int) *EnrollmentUpdateOne {
	_u.mutation.RemoveInvoiceLineIDs(ids...)
	return _u
}

// RemoveInvoiceLines removes "invoice_lines" edges to InvoiceLine entities.
func (_u *EnrollmentUpdateOne) RemoveInvoiceLines(v ...*InvoiceLine) *EnrollmentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInvoiceLineIDs(ids...)
}

// ClearPriceOverrides clears all "price_overrides" edges to the PriceOverride entity.
func (_u *EnrollmentUpdateOne) ClearPriceOverrides() *EnrollmentUpdateOne {
	_u.mutation.ClearPriceOverrides()
	return _u
}

// RemovePriceOverrideIDs removes the "price_overrides" edge to PriceOverride entities by IDs.
func (_u *EnrollmentUpdateOne) RemovePriceOverrideIDs(ids ...int) *EnrollmentUpdateOne {
	_u.mutation.RemovePriceOverrideIDs(ids...)
	return _u
}

// RemovePriceOverrides removes "price_overrides" edges to PriceOverride entities.
func (_u *EnrollmentUpdateOne) RemovePriceOverrides(v ...*PriceOverride) *EnrollmentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePriceOverrideIDs(ids...)
}

// Where appends a list predicates to the EnrollmentUpdate builder.
func (_u *EnrollmentUpdateOne) Where(ps ...predicate.Enrollment) *EnrollmentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EnrollmentUpdateOne) Select(field string, fields ...string) *EnrollmentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Enrollment entity.
func (_u *EnrollmentUpdateOne) Save(ctx context.Context) (*Enrollment, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EnrollmentUpdateOne) SaveX(ctx context.Context) *Enrollment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EnrollmentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EnrollmentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EnrollmentUpdateOne) check() error {
	if v, ok := _u.mutation.BillingMode(); ok {
		if err := enrollment.BillingModeValidator(v); err != nil {
			return &ValidationError{Name: "billing_mode", err: fmt.Errorf(`ent: validator failed for field "Enrollment.billing_mode": %w`, err)}
		}
	}
	if _u.mutation.StudentCleared() && len(_u.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Enrollment.student"`)
	}
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Enrollment.course"`)
	}
	return nil
}

func (_u *EnrollmentUpdateOne) sqlSave(ctx context.Context) (_node *Enrollment, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Enrollment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enrollment.FieldID)
		for _, f := range fields {
			if !enrollment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enrollment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BillingMode(); ok {
		_spec.SetField(enrollment.FieldBillingMode, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(enrollment.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(enrollment.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(enrollment.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.DiscountPct(); ok {
		_spec.SetField(enrollment.FieldDiscountPct, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedDiscountPct(); ok {
		_spec.AddField(enrollment.FieldDiscountPct, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(enrollment.FieldNote, field.TypeString, value)
	}
	if _u.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.StudentTable,
			Columns: []string{enrollment.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.StudentTable,
			Columns: []string{enrollment.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvoiceLinesIDs(); len(nodes) > 0 && !_u.mutation.InvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PriceOverridesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPriceOverridesIDs(); len(nodes) > 0 && !_u.mutation.PriceOverridesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PriceOverridesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Enrollment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

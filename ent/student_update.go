// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/invoice"
	"langschool/ent/predicate"
	"langschool/ent/student"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (_u *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *StudentUpdate) SetFullName(v string) *StudentUpdate {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableFullName(v *string) *StudentUpdate {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *StudentUpdate) SetPhone(v string) *StudentUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *StudentUpdate) SetNillablePhone(v *string) *StudentUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *StudentUpdate) SetEmail(v string) *StudentUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableEmail(v *string) *StudentUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetNote sets the "note" field.
func (_u *StudentUpdate) SetNote(v string) *StudentUpdate {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableNote(v *string) *StudentUpdate {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *StudentUpdate) SetIsActive(v bool) *StudentUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableIsActive(v *bool) *StudentUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (_u *StudentUpdate) AddEnrollmentIDs(ids ...int) *StudentUpdate {
	_u.mutation.AddEnrollmentIDs(ids...)
	return _u
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (_u *StudentUpdate) AddEnrollments(v ...*Enrollment) *StudentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrollmentIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (_u *StudentUpdate) AddInvoiceIDs(ids ...int) *StudentUpdate {
	_u.mutation.AddInvoiceIDs(ids...)
	return _u
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (_u *StudentUpdate) AddInvoices(v ...*Invoice) *StudentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInvoiceIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (_u *StudentUpdate) Mutation() *StudentMutation {
	return _u.mutation
}

// ClearEnrollments clears all "enrollments" edges to the Enrollment entity.
func (_u *StudentUpdate) ClearEnrollments() *StudentUpdate {
	_u.mutation.ClearEnrollments()
	return _u
}

// RemoveEnrollmentIDs removes the "enrollments" edge to Enrollment entities by IDs.
func (_u *StudentUpdate) RemoveEnrollmentIDs(ids ...int) *StudentUpdate {
	_u.mutation.RemoveEnrollmentIDs(ids...)
	return _u
}

// RemoveEnrollments removes "enrollments" edges to Enrollment entities.
func (_u *StudentUpdate) RemoveEnrollments(v ...*Enrollment) *StudentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrollmentIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (_u *StudentUpdate) ClearInvoices() *StudentUpdate {
	_u.mutation.ClearInvoices()
	return _u
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (_u *StudentUpdate) RemoveInvoiceIDs(ids ...int) *StudentUpdate {
	_u.mutation.RemoveInvoiceIDs(ids...)
	return _u
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (_u *StudentUpdate) RemoveInvoices(v ...*Invoice) *StudentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInvoiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StudentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StudentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StudentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *StudentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(student.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(student.FieldNote, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(student.FieldIsActive, field.TypeBool, value)
	}
	if _u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrollmentsIDs(); len(nodes) > 0 && !_u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.InvoicesTable,
			Columns: []string{student.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !_u.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.InvoicesTable,
			Columns: []string{student.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.InvoicesTable,
			Columns: []string{student.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetFullName sets the "full_name" field.
func (_u *StudentUpdateOne) SetFullName(v string) *StudentUpdateOne {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableFullName(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *StudentUpdateOne) SetPhone(v string) *StudentUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillablePhone(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *StudentUpdateOne) SetEmail(v string) *StudentUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableEmail(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetNote sets the "note" field.
func (_u *StudentUpdateOne) SetNote(v string) *StudentUpdateOne {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableNote(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *StudentUpdateOne) SetIsActive(v bool) *StudentUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableIsActive(v *bool) *StudentUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (_u *StudentUpdateOne) AddEnrollmentIDs(ids ...int) *StudentUpdateOne {
	_u.mutation.AddEnrollmentIDs(ids...)
	return _u
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (_u *StudentUpdateOne) AddEnrollments(v ...*Enrollment) *StudentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrollmentIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (_u *StudentUpdateOne) AddInvoiceIDs(ids ...int) *StudentUpdateOne {
	_u.mutation.AddInvoiceIDs(ids...)
	return _u
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (_u *StudentUpdateOne) AddInvoices(v ...*Invoice) *StudentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInvoiceIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (_u *StudentUpdateOne) Mutation() *StudentMutation {
	return _u.mutation
}

// ClearEnrollments clears all "enrollments" edges to the Enrollment entity.
func (_u *StudentUpdateOne) ClearEnrollments() *StudentUpdateOne {
	_u.mutation.ClearEnrollments()
	return _u
}

// RemoveEnrollmentIDs removes the "enrollments" edge to Enrollment entities by IDs.
func (_u *StudentUpdateOne) RemoveEnrollmentIDs(ids ...int) *StudentUpdateOne {
	_u.mutation.RemoveEnrollmentIDs(ids...)
	return _u
}

// RemoveEnrollments removes "enrollments" edges to Enrollment entities.
func (_u *StudentUpdateOne) RemoveEnrollments(v ...*Enrollment) *StudentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrollmentIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (_u *StudentUpdateOne) ClearInvoices() *StudentUpdateOne {
	_u.mutation.ClearInvoices()
	return _u
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (_u *StudentUpdateOne) RemoveInvoiceIDs(ids ...int) *StudentUpdateOne {
	_u.mutation.RemoveInvoiceIDs(ids...)
	return _u
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (_u *StudentUpdateOne) RemoveInvoices(v ...*Invoice) *StudentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInvoiceIDs(ids...)
}

// Where appends a list predicates to the StudentUpdate builder.
func (_u *StudentUpdateOne) Where(ps ...predicate.Student) *StudentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Student entity.
func (_u *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(student.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(student.FieldNote, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(student.FieldIsActive, field.TypeBool, value)
	}
	if _u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrollmentsIDs(); len(nodes) > 0 && !_u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.InvoicesTable,
			Columns: []string{student.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !_u.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.InvoicesTable,
			Columns: []string{student.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.InvoicesTable,
			Columns: []string{student.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Student{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

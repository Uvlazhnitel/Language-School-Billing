// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/course"
	"langschool/ent/enrollment"
	"langschool/ent/invoiceline"
	"langschool/ent/priceoverride"
	"langschool/ent/student"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EnrollmentCreate is the builder for creating a Enrollment entity.
type EnrollmentCreate struct {
	config
	mutation *EnrollmentMutation
	hooks    []Hook
}

// SetStudentID sets the "student_id" field.
func (_c *EnrollmentCreate) SetStudentID(v int) *EnrollmentCreate {
	_c.mutation.SetStudentID(v)
	return _c
}

// SetCourseID sets the "course_id" field.
func (_c *EnrollmentCreate) SetCourseID(v int) *EnrollmentCreate {
	_c.mutation.SetCourseID(v)
	return _c
}

// SetBillingMode sets the "billing_mode" field.
func (_c *EnrollmentCreate) SetBillingMode(v enrollment.BillingMode) *EnrollmentCreate {
	_c.mutation.SetBillingMode(v)
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *EnrollmentCreate) SetStartDate(v time.Time) *EnrollmentCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *EnrollmentCreate) SetEndDate(v time.Time) *EnrollmentCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *EnrollmentCreate) SetNillableEndDate(v *time.Time) *EnrollmentCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetDiscountPct sets the "discount_pct" field.
func (_c *EnrollmentCreate) SetDiscountPct(v float64) *EnrollmentCreate {
	_c.mutation.SetDiscountPct(v)
	return _c
}

// SetNillableDiscountPct sets the "discount_pct" field if the given value is not nil.
func (_c *EnrollmentCreate) SetNillableDiscountPct(v *float64) *EnrollmentCreate {
	if v != nil {
		_c.SetDiscountPct(*v)
	}
	return _c
}

// SetNote sets the "note" field.
func (_c *EnrollmentCreate) SetNote(v string) *EnrollmentCreate {
	_c.mutation.SetNote(v)
	return _c
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_c *EnrollmentCreate) SetNillableNote(v *string) *EnrollmentCreate {
	if v != nil {
		_c.SetNote(*v)
	}
	return _c
}

// SetStudent sets the "student" edge to the Student entity.
func (_c *EnrollmentCreate) SetStudent(v *Student) *EnrollmentCreate {
	return _c.SetStudentID(v.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (_c *EnrollmentCreate) SetCourse(v *Course) *EnrollmentCreate {
	return _c.SetCourseID(v.ID)
}

// AddInvoiceLineIDs adds the "invoice_lines" edge to the InvoiceLine entity by IDs.
func (_c *EnrollmentCreate) AddInvoiceLineIDs(ids ...int) *EnrollmentCreate {
	_c.mutation.AddInvoiceLineIDs(ids...)
	return _c
}

// AddInvoiceLines adds the "invoice_lines" edges to the InvoiceLine entity.
func (_c *EnrollmentCreate) AddInvoiceLines(v ...*InvoiceLine) *EnrollmentCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInvoiceLineIDs(ids...)
}

// AddPriceOverrideIDs adds the "price_overrides" edge to the PriceOverride entity by IDs.
func (_c *EnrollmentCreate) AddPriceOverrideIDs(ids ...int) *EnrollmentCreate {
	_c.mutation.AddPriceOverrideIDs(ids...)
	return _c
}

// AddPriceOverrides adds the "price_overrides" edges to the PriceOverride entity.
func (_c *EnrollmentCreate) AddPriceOverrides(v ...*PriceOverride) *EnrollmentCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPriceOverrideIDs(ids...)
}

// Mutation returns the EnrollmentMutation object of the builder.
func (_c *EnrollmentCreate) Mutation() *EnrollmentMutation {
	return _c.mutation
}

// Save creates the Enrollment in the database.
func (_c *EnrollmentCreate) Save(ctx context.Context) (*Enrollment, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EnrollmentCreate) SaveX(ctx context.Context) *Enrollment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EnrollmentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EnrollmentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EnrollmentCreate) defaults() {
	if _, ok := _c.mutation.DiscountPct(); !ok {
		v := enrollment.DefaultDiscountPct
		_c.mutation.SetDiscountPct(v)
	}
	if _, ok := _c.mutation.Note(); !ok {
		v := enrollment.DefaultNote
		_c.mutation.SetNote(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *EnrollmentCreate) check() error {
	if _, ok := _c.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required field "Enrollment.student_id"`)}
	}
	if _, ok := _c.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "Enrollment.course_id"`)}
	}
	if _, ok := _c.mutation.BillingMode(); !ok {
		return &ValidationError{Name: "billing_mode", err: errors.New(`ent: missing required field "Enrollment.billing_mode"`)}
	}
	if v, ok := _c.mutation.BillingMode(); ok {
		if err := enrollment.BillingModeValidator(v); err != nil {
			return &ValidationError{Name: "billing_mode", err: fmt.Errorf(`ent: validator failed for field "Enrollment.billing_mode": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Enrollment.start_date"`)}
	}
	if _, ok := _c.mutation.DiscountPct(); !ok {
		return &ValidationError{Name: "discount_pct", err: errors.New(`ent: missing required field "Enrollment.discount_pct"`)}
	}
	if _, ok := _c.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "Enrollment.note"`)}
	}
	if len(_c.mutation.StudentIDs()) == 0 {
		return &ValidationError{Name: "student", err: errors.New(`ent: missing required edge "Enrollment.student"`)}
	}
	if len(_c.mutation.CourseIDs()) == 0 {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "Enrollment.course"`)}
	}
	return nil
}

func (_c *EnrollmentCreate) sqlSave(ctx context.Context) (*Enrollment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EnrollmentCreate) createSpec() (*Enrollment, *sqlgraph.CreateSpec) {
	var (
		_node = &Enrollment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(enrollment.Table, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.BillingMode(); ok {
		_spec.SetField(enrollment.FieldBillingMode, field.TypeEnum, value)
		_node.BillingMode = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(enrollment.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(enrollment.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := _c.mutation.DiscountPct(); ok {
		_spec.SetField(enrollment.FieldDiscountPct, field.TypeFloat64, value)
		_node.DiscountPct = value
	}
	if value, ok := _c.mutation.Note(); ok {
		_spec.SetField(enrollment.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := _c.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.StudentTable,
			Columns: []string{enrollment.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StudentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.InvoiceLinesTable,
			Columns: []string{enrollment.InvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PriceOverridesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.PriceOverridesTable,
			Columns: []string{enrollment.PriceOverridesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnrollmentCreateBulk is the builder for creating many Enrollment entities in bulk.
type EnrollmentCreateBulk struct {
	config
	err      error
	builders []*EnrollmentCreate
}

// Save creates the Enrollment entities in the database.
func (_c *EnrollmentCreateBulk) Save(ctx context.Context) ([]*Enrollment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Enrollment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnrollmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EnrollmentCreateBulk) SaveX(ctx context.Context) []*Enrollment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EnrollmentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EnrollmentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

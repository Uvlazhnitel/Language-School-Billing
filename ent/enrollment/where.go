// Code generated by ent, DO NOT EDIT.

package enrollment

import (
	"langschool/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldID, id))
}

// StudentID applies equality check predicate on the "student_id" field. It's identical to StudentIDEQ.
func StudentID(v int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldStudentID, v))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCourseID, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldEndDate, v))
}

// DiscountPct applies equality check predicate on the "discount_pct" field. It's identical to DiscountPctEQ.
func DiscountPct(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldDiscountPct, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldNote, v))
}

// StudentIDEQ applies the EQ predicate on the "student_id" field.
func StudentIDEQ(v int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldStudentID, v))
}

// StudentIDNEQ applies the NEQ predicate on the "student_id" field.
func StudentIDNEQ(v int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldStudentID, v))
}

// StudentIDIn applies the In predicate on the "student_id" field.
func StudentIDIn(vs ...int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldStudentID, vs...))
}

// StudentIDNotIn applies the NotIn predicate on the "student_id" field.
func StudentIDNotIn(vs ...int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldStudentID, vs...))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldCourseID, vs...))
}

// BillingModeEQ applies the EQ predicate on the "billing_mode" field.
func BillingModeEQ(v BillingMode) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldBillingMode, v))
}

// BillingModeNEQ applies the NEQ predicate on the "billing_mode" field.
func BillingModeNEQ(v BillingMode) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldBillingMode, v))
}

// BillingModeIn applies the In predicate on the "billing_mode" field.
func BillingModeIn(vs ...BillingMode) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldBillingMode, vs...))
}

// BillingModeNotIn applies the NotIn predicate on the "billing_mode" field.
func BillingModeNotIn(vs ...BillingMode) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldBillingMode, vs...))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldEndDate))
}

// DiscountPctEQ applies the EQ predicate on the "discount_pct" field.
func DiscountPctEQ(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldDiscountPct, v))
}

// DiscountPctNEQ applies the NEQ predicate on the "discount_pct" field.
func DiscountPctNEQ(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldDiscountPct, v))
}

// DiscountPctIn applies the In predicate on the "discount_pct" field.
func DiscountPctIn(vs ...float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldDiscountPct, vs...))
}

// DiscountPctNotIn applies the NotIn predicate on the "discount_pct" field.
func DiscountPctNotIn(vs ...float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldDiscountPct, vs...))
}

// DiscountPctGT applies the GT predicate on the "discount_pct" field.
func DiscountPctGT(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldDiscountPct, v))
}

// DiscountPctGTE applies the GTE predicate on the "discount_pct" field.
func DiscountPctGTE(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldDiscountPct, v))
}

// DiscountPctLT applies the LT predicate on the "discount_pct" field.
func DiscountPctLT(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldDiscountPct, v))
}

// DiscountPctLTE applies the LTE predicate on the "discount_pct" field.
func DiscountPctLTE(v float64) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldDiscountPct, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldNote, v))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldNote, v))
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Enrollment {
	return predicate.Enrollment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Enrollment {
	return predicate.Enrollment(func(s *sql.Selector) {
		step := newStudentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.Enrollment {
	return predicate.Enrollment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.Enrollment {
	return predicate.Enrollment(func(s *sql.Selector) {
		step := newCourseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Enrollment) predicate.Enrollment {
	return predicate.Enrollment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Enrollment) predicate.Enrollment {
	return predicate.Enrollment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Enrollment) predicate.Enrollment {
	return predicate.Enrollment(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package enrollment

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the enrollment type in the database.
	Label = "enrollment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentID holds the string denoting the student_id field in the database.
	FieldStudentID = "student_id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldBillingMode holds the string denoting the billing_mode field in the database.
	FieldBillingMode = "billing_mode"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldDiscountPct holds the string denoting the discount_pct field in the database.
	FieldDiscountPct = "discount_pct"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// Table holds the table name of the enrollment in the database.
	Table = "enrollments"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "enrollments"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_id"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "enrollments"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
)

// Columns holds all SQL columns for enrollment fields.
var Columns = []string{
	FieldID,
	FieldStudentID,
	FieldCourseID,
	FieldBillingMode,
	FieldStartDate,
	FieldEndDate,
	FieldDiscountPct,
	FieldNote,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDiscountPct holds the default value on creation for the "discount_pct" field.
	DefaultDiscountPct float64
	// DefaultNote holds the default value on creation for the "note" field.
	DefaultNote string
)

// BillingMode defines the type for the "billing_mode" enum field.
type BillingMode string

// BillingMode values.
const (
	BillingModeSubscription BillingMode = "subscription"
	BillingModePerLesson    BillingMode = "per_lesson"
)

func (bm BillingMode) String() string {
	return string(bm)
}

// BillingModeValidator is a validator for the "billing_mode" field enum values. It is called by the builders before save.
func BillingModeValidator(bm BillingMode) error {
	switch bm {
	case BillingModeSubscription, BillingModePerLesson:
		return nil
	default:
		return fmt.Errorf("enrollment: invalid enum value for billing_mode field: %q", bm)
	}
}

// OrderOption defines the ordering options for the Enrollment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentID orders the results by the student_id field.
func ByStudentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByBillingMode orders the results by the billing_mode field.
func ByBillingMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingMode, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByDiscountPct orders the results by the discount_pct field.
func ByDiscountPct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountPct, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByStudentField orders the results by student field.
func ByStudentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentStep(), sql.OrderByField(field, opts...))
	}
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}
func newStudentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
	)
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/attendancemonth"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttendanceMonthCreate is the builder for creating a AttendanceMonth entity.
type AttendanceMonthCreate struct {
	config
	mutation *AttendanceMonthMutation
	hooks    []Hook
}

// SetStudentID sets the "student_id" field.
func (_c *AttendanceMonthCreate) SetStudentID(v int) *AttendanceMonthCreate {
	_c.mutation.SetStudentID(v)
	return _c
}

// SetCourseID sets the "course_id" field.
func (_c *AttendanceMonthCreate) SetCourseID(v int) *AttendanceMonthCreate {
	_c.mutation.SetCourseID(v)
	return _c
}

// SetYear sets the "year" field.
func (_c *AttendanceMonthCreate) SetYear(v int) *AttendanceMonthCreate {
	_c.mutation.SetYear(v)
	return _c
}

// SetMonth sets the "month" field.
func (_c *AttendanceMonthCreate) SetMonth(v int) *AttendanceMonthCreate {
	_c.mutation.SetMonth(v)
	return _c
}

// SetLessonsCount sets the "lessons_count" field.
func (_c *AttendanceMonthCreate) SetLessonsCount(v int) *AttendanceMonthCreate {
	_c.mutation.SetLessonsCount(v)
	return _c
}

// SetNillableLessonsCount sets the "lessons_count" field if the given value is not nil.
func (_c *AttendanceMonthCreate) SetNillableLessonsCount(v *int) *AttendanceMonthCreate {
	if v != nil {
		_c.SetLessonsCount(*v)
	}
	return _c
}

// SetLocked sets the "locked" field.
func (_c *AttendanceMonthCreate) SetLocked(v bool) *AttendanceMonthCreate {
	_c.mutation.SetLocked(v)
	return _c
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_c *AttendanceMonthCreate) SetNillableLocked(v *bool) *AttendanceMonthCreate {
	if v != nil {
		_c.SetLocked(*v)
	}
	return _c
}

// SetSource sets the "source" field.
func (_c *AttendanceMonthCreate) SetSource(v attendancemonth.Source) *AttendanceMonthCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *AttendanceMonthCreate) SetNillableSource(v *attendancemonth.Source) *AttendanceMonthCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// Mutation returns the AttendanceMonthMutation object of the builder.
func (_c *AttendanceMonthCreate) Mutation() *AttendanceMonthMutation {
	return _c.mutation
}

// Save creates the AttendanceMonth in the database.
func (_c *AttendanceMonthCreate) Save(ctx context.Context) (*AttendanceMonth, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AttendanceMonthCreate) SaveX(ctx context.Context) *AttendanceMonth {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttendanceMonthCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttendanceMonthCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AttendanceMonthCreate) defaults() {
	if _, ok := _c.mutation.LessonsCount(); !ok {
		v := attendancemonth.DefaultLessonsCount
		_c.mutation.SetLessonsCount(v)
	}
	if _, ok := _c.mutation.Locked(); !ok {
		v := attendancemonth.DefaultLocked
		_c.mutation.SetLocked(v)
	}
	if _, ok := _c.mutation.Source(); !ok {
		v := attendancemonth.DefaultSource
		_c.mutation.SetSource(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AttendanceMonthCreate) check() error {
	if _, ok := _c.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required field "AttendanceMonth.student_id"`)}
	}
	if _, ok := _c.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "AttendanceMonth.course_id"`)}
	}
	if _, ok := _c.mutation.Year(); !ok {
		return &ValidationError{Name: "year", err: errors.New(`ent: missing required field "AttendanceMonth.year"`)}
	}
	if _, ok := _c.mutation.Month(); !ok {
		return &ValidationError{Name: "month", err: errors.New(`ent: missing required field "AttendanceMonth.month"`)}
	}
	if _, ok := _c.mutation.LessonsCount(); !ok {
		return &ValidationError{Name: "lessons_count", err: errors.New(`ent: missing required field "AttendanceMonth.lessons_count"`)}
	}
	if _, ok := _c.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "AttendanceMonth.locked"`)}
	}
	if _, ok := _c.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "AttendanceMonth.source"`)}
	}
	if v, ok := _c.mutation.Source(); ok {
		if err := attendancemonth.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "AttendanceMonth.source": %w`, err)}
		}
	}
	return nil
}

func (_c *AttendanceMonthCreate) sqlSave(ctx context.Context) (*AttendanceMonth, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AttendanceMonthCreate) createSpec() (*AttendanceMonth, *sqlgraph.CreateSpec) {
	var (
		_node = &AttendanceMonth{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(attendancemonth.Table, sqlgraph.NewFieldSpec(attendancemonth.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.StudentID(); ok {
		_spec.SetField(attendancemonth.FieldStudentID, field.TypeInt, value)
		_node.StudentID = value
	}
	if value, ok := _c.mutation.CourseID(); ok {
		_spec.SetField(attendancemonth.FieldCourseID, field.TypeInt, value)
		_node.CourseID = value
	}
	if value, ok := _c.mutation.Year(); ok {
		_spec.SetField(attendancemonth.FieldYear, field.TypeInt, value)
		_node.Year = value
	}
	if value, ok := _c.mutation.Month(); ok {
		_spec.SetField(attendancemonth.FieldMonth, field.TypeInt, value)
		_node.Month = value
	}
	if value, ok := _c.mutation.LessonsCount(); ok {
		_spec.SetField(attendancemonth.FieldLessonsCount, field.TypeInt, value)
		_node.LessonsCount = value
	}
	if value, ok := _c.mutation.Locked(); ok {
		_spec.SetField(attendancemonth.FieldLocked, field.TypeBool, value)
		_node.Locked = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(attendancemonth.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	return _node, _spec
}

// AttendanceMonthCreateBulk is the builder for creating many AttendanceMonth entities in bulk.
type AttendanceMonthCreateBulk struct {
	config
	err      error
	builders []*AttendanceMonthCreate
}

// Save creates the AttendanceMonth entities in the database.
func (_c *AttendanceMonthCreateBulk) Save(ctx context.Context) ([]*AttendanceMonth, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AttendanceMonth, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttendanceMonthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AttendanceMonthCreateBulk) SaveX(ctx context.Context) []*AttendanceMonth {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttendanceMonthCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttendanceMonthCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

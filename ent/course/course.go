// Code generated by ent, DO NOT EDIT.

package course

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the course type in the database.
	Label = "course"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLessonPrice holds the string denoting the lesson_price field in the database.
	FieldLessonPrice = "lesson_price"
	// FieldSubscriptionPrice holds the string denoting the subscription_price field in the database.
	FieldSubscriptionPrice = "subscription_price"
	// FieldScheduleJSON holds the string denoting the schedule_json field in the database.
	FieldScheduleJSON = "schedule_json"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeEnrollments holds the string denoting the enrollments edge name in mutations.
	EdgeEnrollments = "enrollments"
	// Table holds the table name of the course in the database.
	Table = "courses"
	// EnrollmentsTable is the table that holds the enrollments relation/edge.
	EnrollmentsTable = "enrollments"
	// EnrollmentsInverseTable is the table name for the Enrollment entity.
	// It exists in this package in order to avoid circular dependency with the "enrollment" package.
	EnrollmentsInverseTable = "enrollments"
	// EnrollmentsColumn is the table column denoting the enrollments relation/edge.
	EnrollmentsColumn = "course_id"
)

// Columns holds all SQL columns for course fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldLessonPrice,
	FieldSubscriptionPrice,
	FieldScheduleJSON,
	FieldIsActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLessonPrice holds the default value on creation for the "lesson_price" field.
	DefaultLessonPrice float64
	// DefaultSubscriptionPrice holds the default value on creation for the "subscription_price" field.
	DefaultSubscriptionPrice float64
	// DefaultScheduleJSON holds the default value on creation for the "schedule_json" field.
	DefaultScheduleJSON string
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeGroup      Type = "group"
	TypeIndividual Type = "individual"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeGroup, TypeIndividual:
		return nil
	default:
		return fmt.Errorf("course: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Course queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByLessonPrice orders the results by the lesson_price field.
func ByLessonPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonPrice, opts...).ToFunc()
}

// BySubscriptionPrice orders the results by the subscription_price field.
func BySubscriptionPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionPrice, opts...).ToFunc()
}

// ByScheduleJSON orders the results by the schedule_json field.
func ByScheduleJSON(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduleJSON, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByEnrollmentsCount orders the results by enrollments count.
func ByEnrollmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnrollmentsStep(), opts...)
	}
}

// ByEnrollments orders the results by enrollments terms.
func ByEnrollments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrollmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEnrollmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrollmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EnrollmentsTable, EnrollmentsColumn),
	)
}

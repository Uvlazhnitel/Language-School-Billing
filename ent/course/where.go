// Code generated by ent, DO NOT EDIT.

package course

import (
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldName, v))
}

// LessonPrice applies equality check predicate on the "lesson_price" field. It's identical to LessonPriceEQ.
func LessonPrice(v float64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldLessonPrice, v))
}

// SubscriptionPrice applies equality check predicate on the "subscription_price" field. It's identical to SubscriptionPriceEQ.
func SubscriptionPrice(v float64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldSubscriptionPrice, v))
}

// ScheduleJSON applies equality check predicate on the "schedule_json" field. It's identical to ScheduleJSONEQ.
func ScheduleJSON(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldScheduleJSON, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldIsActive, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldType, vs...))
}

// LessonPriceEQ applies the EQ predicate on the "lesson_price" field.
func LessonPriceEQ(v float64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldLessonPrice, v))
}

// LessonPriceNEQ applies the NEQ predicate on the "lesson_price" field.
func LessonPriceNEQ(v float64) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldLessonPrice, v))
}

// LessonPriceIn applies the In predicate on the "lesson_price" field.
func LessonPriceIn(vs ...float64) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldLessonPrice, vs...))
}

// LessonPriceNotIn applies the NotIn predicate on the "lesson_price" field.
func LessonPriceNotIn(vs ...float64) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldLessonPrice, vs...))
}

// LessonPriceGT applies the GT predicate on the "lesson_price" field.
func LessonPriceGT(v float64) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldLessonPrice, v))
}

// LessonPriceGTE applies the GTE predicate on the "lesson_price" field.
func LessonPriceGTE(v float64) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldLessonPrice, v))
}

// LessonPriceLT applies the LT predicate on the "lesson_price" field.
func LessonPriceLT(v float64) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldLessonPrice, v))
}

// LessonPriceLTE applies the LTE predicate on the "lesson_price" field.
func LessonPriceLTE(v float64) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldLessonPrice, v))
}

// SubscriptionPriceEQ applies the EQ predicate on the "subscription_price" field.
func SubscriptionPriceEQ(v float64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldSubscriptionPrice, v))
}

// SubscriptionPriceNEQ applies the NEQ predicate on the "subscription_price" field.
func SubscriptionPriceNEQ(v float64) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldSubscriptionPrice, v))
}

// SubscriptionPriceIn applies the In predicate on the "subscription_price" field.
func SubscriptionPriceIn(vs ...float64) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldSubscriptionPrice, vs...))
}

// SubscriptionPriceNotIn applies the NotIn predicate on the "subscription_price" field.
func SubscriptionPriceNotIn(vs ...float64) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldSubscriptionPrice, vs...))
}

// SubscriptionPriceGT applies the GT predicate on the "subscription_price" field.
func SubscriptionPriceGT(v float64) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldSubscriptionPrice, v))
}

// SubscriptionPriceGTE applies the GTE predicate on the "subscription_price" field.
func SubscriptionPriceGTE(v float64) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldSubscriptionPrice, v))
}

// SubscriptionPriceLT applies the LT predicate on the "subscription_price" field.
func SubscriptionPriceLT(v float64) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldSubscriptionPrice, v))
}

// SubscriptionPriceLTE applies the LTE predicate on the "subscription_price" field.
func SubscriptionPriceLTE(v float64) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldSubscriptionPrice, v))
}

// ScheduleJSONEQ applies the EQ predicate on the "schedule_json" field.
func ScheduleJSONEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldScheduleJSON, v))
}

// ScheduleJSONNEQ applies the NEQ predicate on the "schedule_json" field.
func ScheduleJSONNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldScheduleJSON, v))
}

// ScheduleJSONIn applies the In predicate on the "schedule_json" field.
func ScheduleJSONIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldScheduleJSON, vs...))
}

// ScheduleJSONNotIn applies the NotIn predicate on the "schedule_json" field.
func ScheduleJSONNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldScheduleJSON, vs...))
}

// ScheduleJSONGT applies the GT predicate on the "schedule_json" field.
func ScheduleJSONGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldScheduleJSON, v))
}

// ScheduleJSONGTE applies the GTE predicate on the "schedule_json" field.
func ScheduleJSONGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldScheduleJSON, v))
}

// ScheduleJSONLT applies the LT predicate on the "schedule_json" field.
func ScheduleJSONLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldScheduleJSON, v))
}

// ScheduleJSONLTE applies the LTE predicate on the "schedule_json" field.
func ScheduleJSONLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldScheduleJSON, v))
}

// ScheduleJSONContains applies the Contains predicate on the "schedule_json" field.
func ScheduleJSONContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldScheduleJSON, v))
}

// ScheduleJSONHasPrefix applies the HasPrefix predicate on the "schedule_json" field.
func ScheduleJSONHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldScheduleJSON, v))
}

// ScheduleJSONHasSuffix applies the HasSuffix predicate on the "schedule_json" field.
func ScheduleJSONHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldScheduleJSON, v))
}

// ScheduleJSONEqualFold applies the EqualFold predicate on the "schedule_json" field.
func ScheduleJSONEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldScheduleJSON, v))
}

// ScheduleJSONContainsFold applies the ContainsFold predicate on the "schedule_json" field.
func ScheduleJSONContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldScheduleJSON, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldIsActive, v))
}

// HasEnrollments applies the HasEdge predicate on the "enrollments" edge.
func HasEnrollments() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnrollmentsTable, EnrollmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnrollmentsWith applies the HasEdge predicate on the "enrollments" edge with a given conditions (other predicates).
func HasEnrollmentsWith(preds ...predicate.Enrollment) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := newEnrollmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Course) predicate.Course {
	return predicate.Course(sql.NotPredicates(p))
}

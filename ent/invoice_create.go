// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/invoice"
	"langschool/ent/invoiceline"
	"langschool/ent/student"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvoiceCreate is the builder for creating a Invoice entity.
type InvoiceCreate struct {
	config
	mutation *InvoiceMutation
	hooks    []Hook
}

// SetStudentID sets the "student_id" field.
func (_c *InvoiceCreate) SetStudentID(v int) *InvoiceCreate {
	_c.mutation.SetStudentID(v)
	return _c
}

// SetPeriodYear sets the "period_year" field.
func (_c *InvoiceCreate) SetPeriodYear(v int) *InvoiceCreate {
	_c.mutation.SetPeriodYear(v)
	return _c
}

// SetPeriodMonth sets the "period_month" field.
func (_c *InvoiceCreate) SetPeriodMonth(v int) *InvoiceCreate {
	_c.mutation.SetPeriodMonth(v)
	return _c
}

// SetTotalAmount sets the "total_amount" field.
func (_c *InvoiceCreate) SetTotalAmount(v float64) *InvoiceCreate {
	_c.mutation.SetTotalAmount(v)
	return _c
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (_c *InvoiceCreate) SetNillableTotalAmount(v *float64) *InvoiceCreate {
	if v != nil {
		_c.SetTotalAmount(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *InvoiceCreate) SetStatus(v invoice.Status) *InvoiceCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *InvoiceCreate) SetNillableStatus(v *invoice.Status) *InvoiceCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetNumber sets the "number" field.
func (_c *InvoiceCreate) SetNumber(v string) *InvoiceCreate {
	_c.mutation.SetNumber(v)
	return _c
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_c *InvoiceCreate) SetNillableNumber(v *string) *InvoiceCreate {
	if v != nil {
		_c.SetNumber(*v)
	}
	return _c
}

// SetStudent sets the "student" edge to the Student entity.
func (_c *InvoiceCreate) SetStudent(v *Student) *InvoiceCreate {
	return _c.SetStudentID(v.ID)
}

// AddLineIDs adds the "lines" edge to the InvoiceLine entity by IDs.
func (_c *InvoiceCreate) AddLineIDs(ids ...int) *InvoiceCreate {
	_c.mutation.AddLineIDs(ids...)
	return _c
}

// AddLines adds the "lines" edges to the InvoiceLine entity.
func (_c *InvoiceCreate) AddLines(v ...*InvoiceLine) *InvoiceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLineIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (_c *InvoiceCreate) Mutation() *InvoiceMutation {
	return _c.mutation
}

// Save creates the Invoice in the database.
func (_c *InvoiceCreate) Save(ctx context.Context) (*Invoice, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *InvoiceCreate) SaveX(ctx context.Context) *Invoice {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InvoiceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InvoiceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *InvoiceCreate) defaults() {
	if _, ok := _c.mutation.TotalAmount(); !ok {
		v := invoice.DefaultTotalAmount
		_c.mutation.SetTotalAmount(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := invoice.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *InvoiceCreate) check() error {
	if _, ok := _c.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required field "Invoice.student_id"`)}
	}
	if _, ok := _c.mutation.PeriodYear(); !ok {
		return &ValidationError{Name: "period_year", err: errors.New(`ent: missing required field "Invoice.period_year"`)}
	}
	if _, ok := _c.mutation.PeriodMonth(); !ok {
		return &ValidationError{Name: "period_month", err: errors.New(`ent: missing required field "Invoice.period_month"`)}
	}
	if _, ok := _c.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "Invoice.total_amount"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Invoice.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if len(_c.mutation.StudentIDs()) == 0 {
		return &ValidationError{Name: "student", err: errors.New(`ent: missing required edge "Invoice.student"`)}
	}
	return nil
}

func (_c *InvoiceCreate) sqlSave(ctx context.Context) (*Invoice, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *InvoiceCreate) createSpec() (*Invoice, *sqlgraph.CreateSpec) {
	var (
		_node = &Invoice{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(invoice.Table, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.PeriodYear(); ok {
		_spec.SetField(invoice.FieldPeriodYear, field.TypeInt, value)
		_node.PeriodYear = value
	}
	if value, ok := _c.mutation.PeriodMonth(); ok {
		_spec.SetField(invoice.FieldPeriodMonth, field.TypeInt, value)
		_node.PeriodMonth = value
	}
	if value, ok := _c.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Number(); ok {
		_spec.SetField(invoice.FieldNumber, field.TypeString, value)
		_node.Number = &value
	}
	if nodes := _c.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.StudentTable,
			Columns: []string{invoice.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StudentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvoiceCreateBulk is the builder for creating many Invoice entities in bulk.
type InvoiceCreateBulk struct {
	config
	err      error
	builders []*InvoiceCreate
}

// Save creates the Invoice entities in the database.
func (_c *InvoiceCreateBulk) Save(ctx context.Context) ([]*Invoice, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Invoice, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *InvoiceCreateBulk) SaveX(ctx context.Context) []*Invoice {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InvoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InvoiceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package priceoverride

import (
	"langschool/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLTE(FieldID, id))
}

// EnrollmentID applies equality check predicate on the "enrollment_id" field. It's identical to EnrollmentIDEQ.
func EnrollmentID(v int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldEnrollmentID, v))
}

// ValidFrom applies equality check predicate on the "valid_from" field. It's identical to ValidFromEQ.
func ValidFrom(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldValidFrom, v))
}

// ValidTo applies equality check predicate on the "valid_to" field. It's identical to ValidToEQ.
func ValidTo(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldValidTo, v))
}

// LessonPrice applies equality check predicate on the "lesson_price" field. It's identical to LessonPriceEQ.
func LessonPrice(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldLessonPrice, v))
}

// SubscriptionPrice applies equality check predicate on the "subscription_price" field. It's identical to SubscriptionPriceEQ.
func SubscriptionPrice(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldSubscriptionPrice, v))
}

// EnrollmentIDEQ applies the EQ predicate on the "enrollment_id" field.
func EnrollmentIDEQ(v int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldEnrollmentID, v))
}

// EnrollmentIDNEQ applies the NEQ predicate on the "enrollment_id" field.
func EnrollmentIDNEQ(v int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNEQ(FieldEnrollmentID, v))
}

// EnrollmentIDIn applies the In predicate on the "enrollment_id" field.
func EnrollmentIDIn(vs ...int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIn(FieldEnrollmentID, vs...))
}

// EnrollmentIDNotIn applies the NotIn predicate on the "enrollment_id" field.
func EnrollmentIDNotIn(vs ...int) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotIn(FieldEnrollmentID, vs...))
}

// ValidFromEQ applies the EQ predicate on the "valid_from" field.
func ValidFromEQ(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldValidFrom, v))
}

// ValidFromNEQ applies the NEQ predicate on the "valid_from" field.
func ValidFromNEQ(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNEQ(FieldValidFrom, v))
}

// ValidFromIn applies the In predicate on the "valid_from" field.
func ValidFromIn(vs ...time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIn(FieldValidFrom, vs...))
}

// ValidFromNotIn applies the NotIn predicate on the "valid_from" field.
func ValidFromNotIn(vs ...time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotIn(FieldValidFrom, vs...))
}

// ValidFromGT applies the GT predicate on the "valid_from" field.
func ValidFromGT(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGT(FieldValidFrom, v))
}

// ValidFromGTE applies the GTE predicate on the "valid_from" field.
func ValidFromGTE(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGTE(FieldValidFrom, v))
}

// ValidFromLT applies the LT predicate on the "valid_from" field.
func ValidFromLT(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLT(FieldValidFrom, v))
}

// ValidFromLTE applies the LTE predicate on the "valid_from" field.
func ValidFromLTE(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLTE(FieldValidFrom, v))
}

// ValidToEQ applies the EQ predicate on the "valid_to" field.
func ValidToEQ(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldValidTo, v))
}

// ValidToNEQ applies the NEQ predicate on the "valid_to" field.
func ValidToNEQ(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNEQ(FieldValidTo, v))
}

// ValidToIn applies the In predicate on the "valid_to" field.
func ValidToIn(vs ...time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIn(FieldValidTo, vs...))
}

// ValidToNotIn applies the NotIn predicate on the "valid_to" field.
func ValidToNotIn(vs ...time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotIn(FieldValidTo, vs...))
}

// ValidToGT applies the GT predicate on the "valid_to" field.
func ValidToGT(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGT(FieldValidTo, v))
}

// ValidToGTE applies the GTE predicate on the "valid_to" field.
func ValidToGTE(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGTE(FieldValidTo, v))
}

// ValidToLT applies the LT predicate on the "valid_to" field.
func ValidToLT(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLT(FieldValidTo, v))
}

// ValidToLTE applies the LTE predicate on the "valid_to" field.
func ValidToLTE(v time.Time) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLTE(FieldValidTo, v))
}

// ValidToIsNil applies the IsNil predicate on the "valid_to" field.
func ValidToIsNil() predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIsNull(FieldValidTo))
}

// ValidToNotNil applies the NotNil predicate on the "valid_to" field.
func ValidToNotNil() predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotNull(FieldValidTo))
}

// LessonPriceEQ applies the EQ predicate on the "lesson_price" field.
func LessonPriceEQ(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldLessonPrice, v))
}

// LessonPriceNEQ applies the NEQ predicate on the "lesson_price" field.
func LessonPriceNEQ(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNEQ(FieldLessonPrice, v))
}

// LessonPriceIn applies the In predicate on the "lesson_price" field.
func LessonPriceIn(vs ...float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIn(FieldLessonPrice, vs...))
}

// LessonPriceNotIn applies the NotIn predicate on the "lesson_price" field.
func LessonPriceNotIn(vs ...float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotIn(FieldLessonPrice, vs...))
}

// LessonPriceGT applies the GT predicate on the "lesson_price" field.
func LessonPriceGT(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGT(FieldLessonPrice, v))
}

// LessonPriceGTE applies the GTE predicate on the "lesson_price" field.
func LessonPriceGTE(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGTE(FieldLessonPrice, v))
}

// LessonPriceLT applies the LT predicate on the "lesson_price" field.
func LessonPriceLT(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLT(FieldLessonPrice, v))
}

// LessonPriceLTE applies the LTE predicate on the "lesson_price" field.
func LessonPriceLTE(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLTE(FieldLessonPrice, v))
}

// LessonPriceIsNil applies the IsNil predicate on the "lesson_price" field.
func LessonPriceIsNil() predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIsNull(FieldLessonPrice))
}

// LessonPriceNotNil applies the NotNil predicate on the "lesson_price" field.
func LessonPriceNotNil() predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotNull(FieldLessonPrice))
}

// SubscriptionPriceEQ applies the EQ predicate on the "subscription_price" field.
func SubscriptionPriceEQ(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldEQ(FieldSubscriptionPrice, v))
}

// SubscriptionPriceNEQ applies the NEQ predicate on the "subscription_price" field.
func SubscriptionPriceNEQ(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNEQ(FieldSubscriptionPrice, v))
}

// SubscriptionPriceIn applies the In predicate on the "subscription_price" field.
func SubscriptionPriceIn(vs ...float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIn(FieldSubscriptionPrice, vs...))
}

// SubscriptionPriceNotIn applies the NotIn predicate on the "subscription_price" field.
func SubscriptionPriceNotIn(vs ...float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotIn(FieldSubscriptionPrice, vs...))
}

// SubscriptionPriceGT applies the GT predicate on the "subscription_price" field.
func SubscriptionPriceGT(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGT(FieldSubscriptionPrice, v))
}

// SubscriptionPriceGTE applies the GTE predicate on the "subscription_price" field.
func SubscriptionPriceGTE(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldGTE(FieldSubscriptionPrice, v))
}

// SubscriptionPriceLT applies the LT predicate on the "subscription_price" field.
func SubscriptionPriceLT(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLT(FieldSubscriptionPrice, v))
}

// SubscriptionPriceLTE applies the LTE predicate on the "subscription_price" field.
func SubscriptionPriceLTE(v float64) predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldLTE(FieldSubscriptionPrice, v))
}

// SubscriptionPriceIsNil applies the IsNil predicate on the "subscription_price" field.
func SubscriptionPriceIsNil() predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldIsNull(FieldSubscriptionPrice))
}

// SubscriptionPriceNotNil applies the NotNil predicate on the "subscription_price" field.
func SubscriptionPriceNotNil() predicate.PriceOverride {
	return predicate.PriceOverride(sql.FieldNotNull(FieldSubscriptionPrice))
}

// HasEnrollment applies the HasEdge predicate on the "enrollment" edge.
func HasEnrollment() predicate.PriceOverride {
	return predicate.PriceOverride(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnrollmentTable, EnrollmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnrollmentWith applies the HasEdge predicate on the "enrollment" edge with a given conditions (other predicates).
func HasEnrollmentWith(preds ...predicate.Enrollment) predicate.PriceOverride {
	return predicate.PriceOverride(func(s *sql.Selector) {
		step := newEnrollmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PriceOverride) predicate.PriceOverride {
	return predicate.PriceOverride(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PriceOverride) predicate.PriceOverride {
	return predicate.PriceOverride(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PriceOverride) predicate.PriceOverride {
	return predicate.PriceOverride(sql.NotPredicates(p))
}

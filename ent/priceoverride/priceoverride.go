// Code generated by ent, DO NOT EDIT.

package priceoverride

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the priceoverride type in the database.
	Label = "price_override"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnrollmentID holds the string denoting the enrollment_id field in the database.
	FieldEnrollmentID = "enrollment_id"
	// FieldValidFrom holds the string denoting the valid_from field in the database.
	FieldValidFrom = "valid_from"
	// FieldValidTo holds the string denoting the valid_to field in the database.
	FieldValidTo = "valid_to"
	// FieldLessonPrice holds the string denoting the lesson_price field in the database.
	FieldLessonPrice = "lesson_price"
	// FieldSubscriptionPrice holds the string denoting the subscription_price field in the database.
	FieldSubscriptionPrice = "subscription_price"
	// EdgeEnrollment holds the string denoting the enrollment edge name in mutations.
	EdgeEnrollment = "enrollment"
	// Table holds the table name of the priceoverride in the database.
	Table = "price_overrides"
	// EnrollmentTable is the table that holds the enrollment relation/edge.
	EnrollmentTable = "price_overrides"
	// EnrollmentInverseTable is the table name for the Enrollment entity.
	// It exists in this package in order to avoid circular dependency with the "enrollment" package.
	EnrollmentInverseTable = "enrollments"
	// EnrollmentColumn is the table column denoting the enrollment relation/edge.
	EnrollmentColumn = "enrollment_id"
)

// Columns holds all SQL columns for priceoverride fields.
var Columns = []string{
	FieldID,
	FieldEnrollmentID,
	FieldValidFrom,
	FieldValidTo,
	FieldLessonPrice,
	FieldSubscriptionPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PriceOverride queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnrollmentID orders the results by the enrollment_id field.
func ByEnrollmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnrollmentID, opts...).ToFunc()
}

// ByValidFrom orders the results by the valid_from field.
func ByValidFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidFrom, opts...).ToFunc()
}

// ByValidTo orders the results by the valid_to field.
func ByValidTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidTo, opts...).ToFunc()
}

// ByLessonPrice orders the results by the lesson_price field.
func ByLessonPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonPrice, opts...).ToFunc()
}

// BySubscriptionPrice orders the results by the subscription_price field.
func BySubscriptionPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionPrice, opts...).ToFunc()
}

// ByEnrollmentField orders the results by enrollment field.
func ByEnrollmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrollmentStep(), sql.OrderByField(field, opts...))
	}
}
func newEnrollmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrollmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnrollmentTable, EnrollmentColumn),
	)
}

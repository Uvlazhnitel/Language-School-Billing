// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/predicate"
	"langschool/ent/settings"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingsUpdate is the builder for updating Settings entities.
type SettingsUpdate struct {
	config
	hooks    []Hook
	mutation *SettingsMutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (_u *SettingsUpdate) Where(ps ...predicate.Settings) *SettingsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSingletonID sets the "singleton_id" field.
func (_u *SettingsUpdate) SetSingletonID(v int) *SettingsUpdate {
	_u.mutation.ResetSingletonID()
	_u.mutation.SetSingletonID(v)
	return _u
}

// SetNillableSingletonID sets the "singleton_id" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableSingletonID(v *int) *SettingsUpdate {
	if v != nil {
		_u.SetSingletonID(*v)
	}
	return _u
}

// AddSingletonID adds value to the "singleton_id" field.
func (_u *SettingsUpdate) AddSingletonID(v int) *SettingsUpdate {
	_u.mutation.AddSingletonID(v)
	return _u
}

// SetOrgName sets the "org_name" field.
func (_u *SettingsUpdate) SetOrgName(v string) *SettingsUpdate {
	_u.mutation.SetOrgName(v)
	return _u
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableOrgName(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetOrgName(*v)
	}
	return _u
}

// SetAddress sets the "address" field.
func (_u *SettingsUpdate) SetAddress(v string) *SettingsUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableAddress(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// SetInvoicePrefix sets the "invoice_prefix" field.
func (_u *SettingsUpdate) SetInvoicePrefix(v string) *SettingsUpdate {
	_u.mutation.SetInvoicePrefix(v)
	return _u
}

// SetNillableInvoicePrefix sets the "invoice_prefix" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableInvoicePrefix(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetInvoicePrefix(*v)
	}
	return _u
}

// SetNextSeq sets the "next_seq" field.
func (_u *SettingsUpdate) SetNextSeq(v int) *SettingsUpdate {
	_u.mutation.ResetNextSeq()
	_u.mutation.SetNextSeq(v)
	return _u
}

// SetNillableNextSeq sets the "next_seq" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableNextSeq(v *int) *SettingsUpdate {
	if v != nil {
		_u.SetNextSeq(*v)
	}
	return _u
}

// AddNextSeq adds value to the "next_seq" field.
func (_u *SettingsUpdate) AddNextSeq(v int) *SettingsUpdate {
	_u.mutation.AddNextSeq(v)
	return _u
}

// SetInvoiceDayOfMonth sets the "invoice_day_of_month" field.
func (_u *SettingsUpdate) SetInvoiceDayOfMonth(v int) *SettingsUpdate {
	_u.mutation.ResetInvoiceDayOfMonth()
	_u.mutation.SetInvoiceDayOfMonth(v)
	return _u
}

// SetNillableInvoiceDayOfMonth sets the "invoice_day_of_month" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableInvoiceDayOfMonth(v *int) *SettingsUpdate {
	if v != nil {
		_u.SetInvoiceDayOfMonth(*v)
	}
	return _u
}

// AddInvoiceDayOfMonth adds value to the "invoice_day_of_month" field.
func (_u *SettingsUpdate) AddInvoiceDayOfMonth(v int) *SettingsUpdate {
	_u.mutation.AddInvoiceDayOfMonth(v)
	return _u
}

// SetAutoIssue sets the "auto_issue" field.
func (_u *SettingsUpdate) SetAutoIssue(v bool) *SettingsUpdate {
	_u.mutation.SetAutoIssue(v)
	return _u
}

// SetNillableAutoIssue sets the "auto_issue" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableAutoIssue(v *bool) *SettingsUpdate {
	if v != nil {
		_u.SetAutoIssue(*v)
	}
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *SettingsUpdate) SetCurrency(v string) *SettingsUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableCurrency(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetLocale sets the "locale" field.
func (_u *SettingsUpdate) SetLocale(v string) *SettingsUpdate {
	_u.mutation.SetLocale(v)
	return _u
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableLocale(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetLocale(*v)
	}
	return _u
}

// Mutation returns the SettingsMutation object of the builder.
func (_u *SettingsUpdate) Mutation() *SettingsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SettingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SettingsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SettingsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SingletonID(); ok {
		_spec.SetField(settings.FieldSingletonID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSingletonID(); ok {
		_spec.AddField(settings.FieldSingletonID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OrgName(); ok {
		_spec.SetField(settings.FieldOrgName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(settings.FieldAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.InvoicePrefix(); ok {
		_spec.SetField(settings.FieldInvoicePrefix, field.TypeString, value)
	}
	if value, ok := _u.mutation.NextSeq(); ok {
		_spec.SetField(settings.FieldNextSeq, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNextSeq(); ok {
		_spec.AddField(settings.FieldNextSeq, field.TypeInt, value)
	}
	if value, ok := _u.mutation.InvoiceDayOfMonth(); ok {
		_spec.SetField(settings.FieldInvoiceDayOfMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInvoiceDayOfMonth(); ok {
		_spec.AddField(settings.FieldInvoiceDayOfMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AutoIssue(); ok {
		_spec.SetField(settings.FieldAutoIssue, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(settings.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.Locale(); ok {
		_spec.SetField(settings.FieldLocale, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SettingsUpdateOne is the builder for updating a single Settings entity.
type SettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingsMutation
}

// SetSingletonID sets the "singleton_id" field.
func (_u *SettingsUpdateOne) SetSingletonID(v int) *SettingsUpdateOne {
	_u.mutation.ResetSingletonID()
	_u.mutation.SetSingletonID(v)
	return _u
}

// SetNillableSingletonID sets the "singleton_id" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableSingletonID(v *int) *SettingsUpdateOne {
	if v != nil {
		_u.SetSingletonID(*v)
	}
	return _u
}

// AddSingletonID adds value to the "singleton_id" field.
func (_u *SettingsUpdateOne) AddSingletonID(v int) *SettingsUpdateOne {
	_u.mutation.AddSingletonID(v)
	return _u
}

// SetOrgName sets the "org_name" field.
func (_u *SettingsUpdateOne) SetOrgName(v string) *SettingsUpdateOne {
	_u.mutation.SetOrgName(v)
	return _u
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableOrgName(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetOrgName(*v)
	}
	return _u
}

// SetAddress sets the "address" field.
func (_u *SettingsUpdateOne) SetAddress(v string) *SettingsUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableAddress(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// SetInvoicePrefix sets the "invoice_prefix" field.
func (_u *SettingsUpdateOne) SetInvoicePrefix(v string) *SettingsUpdateOne {
	_u.mutation.SetInvoicePrefix(v)
	return _u
}

// SetNillableInvoicePrefix sets the "invoice_prefix" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableInvoicePrefix(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetInvoicePrefix(*v)
	}
	return _u
}

// SetNextSeq sets the "next_seq" field.
func (_u *SettingsUpdateOne) SetNextSeq(v int) *SettingsUpdateOne {
	_u.mutation.ResetNextSeq()
	_u.mutation.SetNextSeq(v)
	return _u
}

// SetNillableNextSeq sets the "next_seq" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableNextSeq(v *int) *SettingsUpdateOne {
	if v != nil {
		_u.SetNextSeq(*v)
	}
	return _u
}

// AddNextSeq adds value to the "next_seq" field.
func (_u *SettingsUpdateOne) AddNextSeq(v int) *SettingsUpdateOne {
	_u.mutation.AddNextSeq(v)
	return _u
}

// SetInvoiceDayOfMonth sets the "invoice_day_of_month" field.
func (_u *SettingsUpdateOne) SetInvoiceDayOfMonth(v int) *SettingsUpdateOne {
	_u.mutation.ResetInvoiceDayOfMonth()
	_u.mutation.SetInvoiceDayOfMonth(v)
	return _u
}

// SetNillableInvoiceDayOfMonth sets the "invoice_day_of_month" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableInvoiceDayOfMonth(v *int) *SettingsUpdateOne {
	if v != nil {
		_u.SetInvoiceDayOfMonth(*v)
	}
	return _u
}

// AddInvoiceDayOfMonth adds value to the "invoice_day_of_month" field.
func (_u *SettingsUpdateOne) AddInvoiceDayOfMonth(v int) *SettingsUpdateOne {
	_u.mutation.AddInvoiceDayOfMonth(v)
	return _u
}

// SetAutoIssue sets the "auto_issue" field.
func (_u *SettingsUpdateOne) SetAutoIssue(v bool) *SettingsUpdateOne {
	_u.mutation.SetAutoIssue(v)
	return _u
}

// SetNillableAutoIssue sets the "auto_issue" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableAutoIssue(v *bool) *SettingsUpdateOne {
	if v != nil {
		_u.SetAutoIssue(*v)
	}
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *SettingsUpdateOne) SetCurrency(v string) *SettingsUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableCurrency(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetLocale sets the "locale" field.
func (_u *SettingsUpdateOne) SetLocale(v string) *SettingsUpdateOne {
	_u.mutation.SetLocale(v)
	return _u
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableLocale(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetLocale(*v)
	}
	return _u
}

// Mutation returns the SettingsMutation object of the builder.
func (_u *SettingsUpdateOne) Mutation() *SettingsMutation {
	return _u.mutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (_u *SettingsUpdateOne) Where(ps ...predicate.Settings) *SettingsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SettingsUpdateOne) Select(field string, fields ...string) *SettingsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Settings entity.
func (_u *SettingsUpdateOne) Save(ctx context.Context) (*Settings, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingsUpdateOne) SaveX(ctx context.Context) *Settings {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SettingsUpdateOne) sqlSave(ctx context.Context) (_node *Settings, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settings.FieldID)
		for _, f := range fields {
			if !settings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SingletonID(); ok {
		_spec.SetField(settings.FieldSingletonID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSingletonID(); ok {
		_spec.AddField(settings.FieldSingletonID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OrgName(); ok {
		_spec.SetField(settings.FieldOrgName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(settings.FieldAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.InvoicePrefix(); ok {
		_spec.SetField(settings.FieldInvoicePrefix, field.TypeString, value)
	}
	if value, ok := _u.mutation.NextSeq(); ok {
		_spec.SetField(settings.FieldNextSeq, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNextSeq(); ok {
		_spec.AddField(settings.FieldNextSeq, field.TypeInt, value)
	}
	if value, ok := _u.mutation.InvoiceDayOfMonth(); ok {
		_spec.SetField(settings.FieldInvoiceDayOfMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInvoiceDayOfMonth(); ok {
		_spec.AddField(settings.FieldInvoiceDayOfMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AutoIssue(); ok {
		_spec.SetField(settings.FieldAutoIssue, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(settings.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.Locale(); ok {
		_spec.SetField(settings.FieldLocale, field.TypeString, value)
	}
	_node = &Settings{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

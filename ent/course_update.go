// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/course"
	"langschool/ent/enrollment"
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (_u *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CourseUpdate) SetName(v string) *CourseUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableName(v *string) *CourseUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *CourseUpdate) SetType(v course.Type) *CourseUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableType(v *course.Type) *CourseUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetLessonPrice sets the "lesson_price" field.
func (_u *CourseUpdate) SetLessonPrice(v float64) *CourseUpdate {
	_u.mutation.ResetLessonPrice()
	_u.mutation.SetLessonPrice(v)
	return _u
}

// SetNillableLessonPrice sets the "lesson_price" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableLessonPrice(v *float64) *CourseUpdate {
	if v != nil {
		_u.SetLessonPrice(*v)
	}
	return _u
}

// AddLessonPrice adds value to the "lesson_price" field.
func (_u *CourseUpdate) AddLessonPrice(v float64) *CourseUpdate {
	_u.mutation.AddLessonPrice(v)
	return _u
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (_u *CourseUpdate) SetSubscriptionPrice(v float64) *CourseUpdate {
	_u.mutation.ResetSubscriptionPrice()
	_u.mutation.SetSubscriptionPrice(v)
	return _u
}

// SetNillableSubscriptionPrice sets the "subscription_price" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableSubscriptionPrice(v *float64) *CourseUpdate {
	if v != nil {
		_u.SetSubscriptionPrice(*v)
	}
	return _u
}

// AddSubscriptionPrice adds value to the "subscription_price" field.
func (_u *CourseUpdate) AddSubscriptionPrice(v float64) *CourseUpdate {
	_u.mutation.AddSubscriptionPrice(v)
	return _u
}

// SetScheduleJSON sets the "schedule_json" field.
func (_u *CourseUpdate) SetScheduleJSON(v string) *CourseUpdate {
	_u.mutation.SetScheduleJSON(v)
	return _u
}

// SetNillableScheduleJSON sets the "schedule_json" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableScheduleJSON(v *string) *CourseUpdate {
	if v != nil {
		_u.SetScheduleJSON(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *CourseUpdate) SetIsActive(v bool) *CourseUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableIsActive(v *bool) *CourseUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (_u *CourseUpdate) AddEnrollmentIDs(ids ...int) *CourseUpdate {
	_u.mutation.AddEnrollmentIDs(ids...)
	return _u
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (_u *CourseUpdate) AddEnrollments(v ...*Enrollment) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrollmentIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_u *CourseUpdate) Mutation() *CourseMutation {
	return _u.mutation
}

// ClearEnrollments clears all "enrollments" edges to the Enrollment entity.
func (_u *CourseUpdate) ClearEnrollments() *CourseUpdate {
	_u.mutation.ClearEnrollments()
	return _u
}

// RemoveEnrollmentIDs removes the "enrollments" edge to Enrollment entities by IDs.
func (_u *CourseUpdate) RemoveEnrollmentIDs(ids ...int) *CourseUpdate {
	_u.mutation.RemoveEnrollmentIDs(ids...)
	return _u
}

// RemoveEnrollments removes "enrollments" edges to Enrollment entities.
func (_u *CourseUpdate) RemoveEnrollments(v ...*Enrollment) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrollmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CourseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CourseUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := course.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Course.type": %w`, err)}
		}
	}
	return nil
}

func (_u *CourseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(course.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LessonPrice(); ok {
		_spec.SetField(course.FieldLessonPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLessonPrice(); ok {
		_spec.AddField(course.FieldLessonPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.SubscriptionPrice(); ok {
		_spec.SetField(course.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSubscriptionPrice(); ok {
		_spec.AddField(course.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.ScheduleJSON(); ok {
		_spec.SetField(course.FieldScheduleJSON, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(course.FieldIsActive, field.TypeBool, value)
	}
	if _u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrollmentsIDs(); len(nodes) > 0 && !_u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetName sets the "name" field.
func (_u *CourseUpdateOne) SetName(v string) *CourseUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableName(v *string) *CourseUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *CourseUpdateOne) SetType(v course.Type) *CourseUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableType(v *course.Type) *CourseUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetLessonPrice sets the "lesson_price" field.
func (_u *CourseUpdateOne) SetLessonPrice(v float64) *CourseUpdateOne {
	_u.mutation.ResetLessonPrice()
	_u.mutation.SetLessonPrice(v)
	return _u
}

// SetNillableLessonPrice sets the "lesson_price" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableLessonPrice(v *float64) *CourseUpdateOne {
	if v != nil {
		_u.SetLessonPrice(*v)
	}
	return _u
}

// AddLessonPrice adds value to the "lesson_price" field.
func (_u *CourseUpdateOne) AddLessonPrice(v float64) *CourseUpdateOne {
	_u.mutation.AddLessonPrice(v)
	return _u
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (_u *CourseUpdateOne) SetSubscriptionPrice(v float64) *CourseUpdateOne {
	_u.mutation.ResetSubscriptionPrice()
	_u.mutation.SetSubscriptionPrice(v)
	return _u
}

// SetNillableSubscriptionPrice sets the "subscription_price" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableSubscriptionPrice(v *float64) *CourseUpdateOne {
	if v != nil {
		_u.SetSubscriptionPrice(*v)
	}
	return _u
}

// AddSubscriptionPrice adds value to the "subscription_price" field.
func (_u *CourseUpdateOne) AddSubscriptionPrice(v float64) *CourseUpdateOne {
	_u.mutation.AddSubscriptionPrice(v)
	return _u
}

// SetScheduleJSON sets the "schedule_json" field.
func (_u *CourseUpdateOne) SetScheduleJSON(v string) *CourseUpdateOne {
	_u.mutation.SetScheduleJSON(v)
	return _u
}

// SetNillableScheduleJSON sets the "schedule_json" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableScheduleJSON(v *string) *CourseUpdateOne {
	if v != nil {
		_u.SetScheduleJSON(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *CourseUpdateOne) SetIsActive(v bool) *CourseUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableIsActive(v *bool) *CourseUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (_u *CourseUpdateOne) AddEnrollmentIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.AddEnrollmentIDs(ids...)
	return _u
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (_u *CourseUpdateOne) AddEnrollments(v ...*Enrollment) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrollmentIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_u *CourseUpdateOne) Mutation() *CourseMutation {
	return _u.mutation
}

// ClearEnrollments clears all "enrollments" edges to the Enrollment entity.
func (_u *CourseUpdateOne) ClearEnrollments() *CourseUpdateOne {
	_u.mutation.ClearEnrollments()
	return _u
}

// RemoveEnrollmentIDs removes the "enrollments" edge to Enrollment entities by IDs.
func (_u *CourseUpdateOne) RemoveEnrollmentIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.RemoveEnrollmentIDs(ids...)
	return _u
}

// RemoveEnrollments removes "enrollments" edges to Enrollment entities.
func (_u *CourseUpdateOne) RemoveEnrollments(v ...*Enrollment) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrollmentIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (_u *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Course entity.
func (_u *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CourseUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := course.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Course.type": %w`, err)}
		}
	}
	return nil
}

func (_u *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(course.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LessonPrice(); ok {
		_spec.SetField(course.FieldLessonPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLessonPrice(); ok {
		_spec.AddField(course.FieldLessonPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.SubscriptionPrice(); ok {
		_spec.SetField(course.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSubscriptionPrice(); ok {
		_spec.AddField(course.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.ScheduleJSON(); ok {
		_spec.SetField(course.FieldScheduleJSON, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(course.FieldIsActive, field.TypeBool, value)
	}
	if _u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrollmentsIDs(); len(nodes) > 0 && !_u.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

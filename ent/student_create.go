// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/student"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentCreate is the builder for creating a Student entity.
type StudentCreate struct {
	config
	mutation *StudentMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (_c *StudentCreate) SetFullName(v string) *StudentCreate {
	_c.mutation.SetFullName(v)
	return _c
}

// SetPhone sets the "phone" field.
func (_c *StudentCreate) SetPhone(v string) *StudentCreate {
	_c.mutation.SetPhone(v)
	return _c
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_c *StudentCreate) SetNillablePhone(v *string) *StudentCreate {
	if v != nil {
		_c.SetPhone(*v)
	}
	return _c
}

// SetEmail sets the "email" field.
func (_c *StudentCreate) SetEmail(v string) *StudentCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *StudentCreate) SetNillableEmail(v *string) *StudentCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetNote sets the "note" field.
func (_c *StudentCreate) SetNote(v string) *StudentCreate {
	_c.mutation.SetNote(v)
	return _c
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_c *StudentCreate) SetNillableNote(v *string) *StudentCreate {
	if v != nil {
		_c.SetNote(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *StudentCreate) SetIsActive(v bool) *StudentCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *StudentCreate) SetNillableIsActive(v *bool) *StudentCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (_c *StudentCreate) AddEnrollmentIDs(ids ...int) *StudentCreate {
	_c.mutation.AddEnrollmentIDs(ids...)
	return _c
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (_c *StudentCreate) AddEnrollments(v ...*Enrollment) *StudentCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEnrollmentIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (_c *StudentCreate) Mutation() *StudentMutation {
	return _c.mutation
}

// Save creates the Student in the database.
func (_c *StudentCreate) Save(ctx context.Context) (*Student, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StudentCreate) SaveX(ctx context.Context) *Student {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StudentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StudentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StudentCreate) defaults() {
	if _, ok := _c.mutation.Phone(); !ok {
		v := student.DefaultPhone
		_c.mutation.SetPhone(v)
	}
	if _, ok := _c.mutation.Email(); !ok {
		v := student.DefaultEmail
		_c.mutation.SetEmail(v)
	}
	if _, ok := _c.mutation.Note(); !ok {
		v := student.DefaultNote
		_c.mutation.SetNote(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := student.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StudentCreate) check() error {
	if _, ok := _c.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Student.full_name"`)}
	}
	if _, ok := _c.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Student.phone"`)}
	}
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Student.email"`)}
	}
	if _, ok := _c.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "Student.note"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Student.is_active"`)}
	}
	return nil
}

func (_c *StudentCreate) sqlSave(ctx context.Context) (*Student, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StudentCreate) createSpec() (*Student, *sqlgraph.CreateSpec) {
	var (
		_node = &Student{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(student.Table, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.FullName(); ok {
		_spec.SetField(student.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := _c.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.Note(); ok {
		_spec.SetField(student.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(student.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := _c.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.EnrollmentsTable,
			Columns: []string{student.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudentCreateBulk is the builder for creating many Student entities in bulk.
type StudentCreateBulk struct {
	config
	err      error
	builders []*StudentCreate
}

// Save creates the Student entities in the database.
func (_c *StudentCreateBulk) Save(ctx context.Context) ([]*Student, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Student, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StudentCreateBulk) SaveX(ctx context.Context) []*Student {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StudentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StudentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

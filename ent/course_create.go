// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/course"
	"langschool/ent/enrollment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseCreate is the builder for creating a Course entity.
type CourseCreate struct {
	config
	mutation *CourseMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *CourseCreate) SetName(v string) *CourseCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetType sets the "type" field.
func (_c *CourseCreate) SetType(v course.Type) *CourseCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetLessonPrice sets the "lesson_price" field.
func (_c *CourseCreate) SetLessonPrice(v float64) *CourseCreate {
	_c.mutation.SetLessonPrice(v)
	return _c
}

// SetNillableLessonPrice sets the "lesson_price" field if the given value is not nil.
func (_c *CourseCreate) SetNillableLessonPrice(v *float64) *CourseCreate {
	if v != nil {
		_c.SetLessonPrice(*v)
	}
	return _c
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (_c *CourseCreate) SetSubscriptionPrice(v float64) *CourseCreate {
	_c.mutation.SetSubscriptionPrice(v)
	return _c
}

// SetNillableSubscriptionPrice sets the "subscription_price" field if the given value is not nil.
func (_c *CourseCreate) SetNillableSubscriptionPrice(v *float64) *CourseCreate {
	if v != nil {
		_c.SetSubscriptionPrice(*v)
	}
	return _c
}

// SetScheduleJSON sets the "schedule_json" field.
func (_c *CourseCreate) SetScheduleJSON(v string) *CourseCreate {
	_c.mutation.SetScheduleJSON(v)
	return _c
}

// SetNillableScheduleJSON sets the "schedule_json" field if the given value is not nil.
func (_c *CourseCreate) SetNillableScheduleJSON(v *string) *CourseCreate {
	if v != nil {
		_c.SetScheduleJSON(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *CourseCreate) SetIsActive(v bool) *CourseCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *CourseCreate) SetNillableIsActive(v *bool) *CourseCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (_c *CourseCreate) AddEnrollmentIDs(ids ...int) *CourseCreate {
	_c.mutation.AddEnrollmentIDs(ids...)
	return _c
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (_c *CourseCreate) AddEnrollments(v ...*Enrollment) *CourseCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEnrollmentIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_c *CourseCreate) Mutation() *CourseMutation {
	return _c.mutation
}

// Save creates the Course in the database.
func (_c *CourseCreate) Save(ctx context.Context) (*Course, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CourseCreate) SaveX(ctx context.Context) *Course {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CourseCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CourseCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CourseCreate) defaults() {
	if _, ok := _c.mutation.LessonPrice(); !ok {
		v := course.DefaultLessonPrice
		_c.mutation.SetLessonPrice(v)
	}
	if _, ok := _c.mutation.SubscriptionPrice(); !ok {
		v := course.DefaultSubscriptionPrice
		_c.mutation.SetSubscriptionPrice(v)
	}
	if _, ok := _c.mutation.ScheduleJSON(); !ok {
		v := course.DefaultScheduleJSON
		_c.mutation.SetScheduleJSON(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := course.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CourseCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Course.name"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Course.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := course.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Course.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LessonPrice(); !ok {
		return &ValidationError{Name: "lesson_price", err: errors.New(`ent: missing required field "Course.lesson_price"`)}
	}
	if _, ok := _c.mutation.SubscriptionPrice(); !ok {
		return &ValidationError{Name: "subscription_price", err: errors.New(`ent: missing required field "Course.subscription_price"`)}
	}
	if _, ok := _c.mutation.ScheduleJSON(); !ok {
		return &ValidationError{Name: "schedule_json", err: errors.New(`ent: missing required field "Course.schedule_json"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Course.is_active"`)}
	}
	return nil
}

func (_c *CourseCreate) sqlSave(ctx context.Context) (*Course, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CourseCreate) createSpec() (*Course, *sqlgraph.CreateSpec) {
	var (
		_node = &Course{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(course.Table, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(course.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.LessonPrice(); ok {
		_spec.SetField(course.FieldLessonPrice, field.TypeFloat64, value)
		_node.LessonPrice = value
	}
	if value, ok := _c.mutation.SubscriptionPrice(); ok {
		_spec.SetField(course.FieldSubscriptionPrice, field.TypeFloat64, value)
		_node.SubscriptionPrice = value
	}
	if value, ok := _c.mutation.ScheduleJSON(); ok {
		_spec.SetField(course.FieldScheduleJSON, field.TypeString, value)
		_node.ScheduleJSON = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(course.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := _c.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseCreateBulk is the builder for creating many Course entities in bulk.
type CourseCreateBulk struct {
	config
	err      error
	builders []*CourseCreate
}

// Save creates the Course entities in the database.
func (_c *CourseCreateBulk) Save(ctx context.Context) ([]*Course, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Course, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CourseCreateBulk) SaveX(ctx context.Context) []*Course {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CourseCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CourseCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

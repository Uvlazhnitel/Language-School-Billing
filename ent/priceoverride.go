// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/priceoverride"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PriceOverride is the model entity for the PriceOverride schema.
type PriceOverride struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EnrollmentID holds the value of the "enrollment_id" field.
	EnrollmentID int `json:"enrollment_id,omitempty"`
	// ValidFrom holds the value of the "valid_from" field.
	ValidFrom time.Time `json:"valid_from,omitempty"`
	// ValidTo holds the value of the "valid_to" field.
	ValidTo *time.Time `json:"valid_to,omitempty"`
	// LessonPrice holds the value of the "lesson_price" field.
	LessonPrice *float64 `json:"lesson_price,omitempty"`
	// SubscriptionPrice holds the value of the "subscription_price" field.
	SubscriptionPrice *float64 `json:"subscription_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PriceOverrideQuery when eager-loading is set.
	Edges        PriceOverrideEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PriceOverrideEdges holds the relations/edges for other nodes in the graph.
type PriceOverrideEdges struct {
	// Enrollment holds the value of the enrollment edge.
	Enrollment *Enrollment `json:"enrollment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EnrollmentOrErr returns the Enrollment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PriceOverrideEdges) EnrollmentOrErr() (*Enrollment, error) {
	if e.Enrollment != nil {
		return e.Enrollment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: enrollment.Label}
	}
	return nil, &NotLoadedError{edge: "enrollment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PriceOverride) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case priceoverride.FieldLessonPrice, priceoverride.FieldSubscriptionPrice:
			values[i] = new(sql.NullFloat64)
		case priceoverride.FieldID, priceoverride.FieldEnrollmentID:
			values[i] = new(sql.NullInt64)
		case priceoverride.FieldValidFrom, priceoverride.FieldValidTo:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PriceOverride fields.
func (_m *PriceOverride) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case priceoverride.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case priceoverride.FieldEnrollmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enrollment_id", values[i])
			} else if value.Valid {
				_m.EnrollmentID = int(value.Int64)
			}
		case priceoverride.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				_m.ValidFrom = value.Time
			}
		case priceoverride.FieldValidTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				_m.ValidTo = new(time.Time)
				*_m.ValidTo = value.Time
			}
		case priceoverride.FieldLessonPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_price", values[i])
			} else if value.Valid {
				_m.LessonPrice = new(float64)
				*_m.LessonPrice = value.Float64
			}
		case priceoverride.FieldSubscriptionPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_price", values[i])
			} else if value.Valid {
				_m.SubscriptionPrice = new(float64)
				*_m.SubscriptionPrice = value.Float64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PriceOverride.
// This includes values selected through modifiers, order, etc.
func (_m *PriceOverride) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEnrollment queries the "enrollment" edge of the PriceOverride entity.
func (_m *PriceOverride) QueryEnrollment() *EnrollmentQuery {
	return NewPriceOverrideClient(_m.config).QueryEnrollment(_m)
}

// Update returns a builder for updating this PriceOverride.
// Note that you need to call PriceOverride.Unwrap() before calling this method if this PriceOverride
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PriceOverride) Update() *PriceOverrideUpdateOne {
	return NewPriceOverrideClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PriceOverride entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PriceOverride) Unwrap() *PriceOverride {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PriceOverride is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PriceOverride) String() string {
	var builder strings.Builder
	builder.WriteString("PriceOverride(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("enrollment_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.EnrollmentID))
	builder.WriteString(", ")
	builder.WriteString("valid_from=")
	builder.WriteString(_m.ValidFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.ValidTo; v != nil {
		builder.WriteString("valid_to=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.LessonPrice; v != nil {
		builder.WriteString("lesson_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionPrice; v != nil {
		builder.WriteString("subscription_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PriceOverrides is a parsable slice of PriceOverride.
type PriceOverrides []*PriceOverride

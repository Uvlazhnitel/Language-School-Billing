// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invoice type in the database.
	Label = "invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentID holds the string denoting the student_id field in the database.
	FieldStudentID = "student_id"
	// FieldPeriodYear holds the string denoting the period_year field in the database.
	FieldPeriodYear = "period_year"
	// FieldPeriodMonth holds the string denoting the period_month field in the database.
	FieldPeriodMonth = "period_month"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeLines holds the string denoting the lines edge name in mutations.
	EdgeLines = "lines"
	// Table holds the table name of the invoice in the database.
	Table = "invoices"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "invoices"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_id"
	// LinesTable is the table that holds the lines relation/edge.
	LinesTable = "invoice_lines"
	// LinesInverseTable is the table name for the InvoiceLine entity.
	// It exists in this package in order to avoid circular dependency with the "invoiceline" package.
	LinesInverseTable = "invoice_lines"
	// LinesColumn is the table column denoting the lines relation/edge.
	LinesColumn = "invoice_id"
)

// Columns holds all SQL columns for invoice fields.
var Columns = []string{
	FieldID,
	FieldStudentID,
	FieldPeriodYear,
	FieldPeriodMonth,
	FieldTotalAmount,
	FieldStatus,
	FieldNumber,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount float64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft    Status = "draft"
	StatusIssued   Status = "issued"
	StatusPaid     Status = "paid"
	StatusCanceled Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusIssued, StatusPaid, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Invoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentID orders the results by the student_id field.
func ByStudentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentID, opts...).ToFunc()
}

// ByPeriodYear orders the results by the period_year field.
func ByPeriodYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodYear, opts...).ToFunc()
}

// ByPeriodMonth orders the results by the period_month field.
func ByPeriodMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodMonth, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByStudentField orders the results by student field.
func ByStudentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentStep(), sql.OrderByField(field, opts...))
	}
}

// ByLinesCount orders the results by lines count.
func ByLinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLinesStep(), opts...)
	}
}

// ByLines orders the results by lines terms.
func ByLines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStudentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
	)
}
func newLinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LinesTable, LinesColumn),
	)
}

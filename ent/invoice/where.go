// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// StudentID applies equality check predicate on the "student_id" field. It's identical to StudentIDEQ.
func StudentID(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStudentID, v))
}

// PeriodYear applies equality check predicate on the "period_year" field. It's identical to PeriodYearEQ.
func PeriodYear(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodYear, v))
}

// PeriodMonth applies equality check predicate on the "period_month" field. It's identical to PeriodMonthEQ.
func PeriodMonth(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodMonth, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalAmount, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldNumber, v))
}

// StudentIDEQ applies the EQ predicate on the "student_id" field.
func StudentIDEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStudentID, v))
}

// StudentIDNEQ applies the NEQ predicate on the "student_id" field.
func StudentIDNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStudentID, v))
}

// StudentIDIn applies the In predicate on the "student_id" field.
func StudentIDIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStudentID, vs...))
}

// StudentIDNotIn applies the NotIn predicate on the "student_id" field.
func StudentIDNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStudentID, vs...))
}

// PeriodYearEQ applies the EQ predicate on the "period_year" field.
func PeriodYearEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodYear, v))
}

// PeriodYearNEQ applies the NEQ predicate on the "period_year" field.
func PeriodYearNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPeriodYear, v))
}

// PeriodYearIn applies the In predicate on the "period_year" field.
func PeriodYearIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPeriodYear, vs...))
}

// PeriodYearNotIn applies the NotIn predicate on the "period_year" field.
func PeriodYearNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPeriodYear, vs...))
}

// PeriodYearGT applies the GT predicate on the "period_year" field.
func PeriodYearGT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPeriodYear, v))
}

// PeriodYearGTE applies the GTE predicate on the "period_year" field.
func PeriodYearGTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPeriodYear, v))
}

// PeriodYearLT applies the LT predicate on the "period_year" field.
func PeriodYearLT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPeriodYear, v))
}

// PeriodYearLTE applies the LTE predicate on the "period_year" field.
func PeriodYearLTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPeriodYear, v))
}

// PeriodMonthEQ applies the EQ predicate on the "period_month" field.
func PeriodMonthEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPeriodMonth, v))
}

// PeriodMonthNEQ applies the NEQ predicate on the "period_month" field.
func PeriodMonthNEQ(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPeriodMonth, v))
}

// PeriodMonthIn applies the In predicate on the "period_month" field.
func PeriodMonthIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPeriodMonth, vs...))
}

// PeriodMonthNotIn applies the NotIn predicate on the "period_month" field.
func PeriodMonthNotIn(vs ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPeriodMonth, vs...))
}

// PeriodMonthGT applies the GT predicate on the "period_month" field.
func PeriodMonthGT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPeriodMonth, v))
}

// PeriodMonthGTE applies the GTE predicate on the "period_month" field.
func PeriodMonthGTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPeriodMonth, v))
}

// PeriodMonthLT applies the LT predicate on the "period_month" field.
func PeriodMonthLT(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPeriodMonth, v))
}

// PeriodMonthLTE applies the LTE predicate on the "period_month" field.
func PeriodMonthLTE(v int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPeriodMonth, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTotalAmount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStatus, vs...))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldNumber))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldNumber, v))
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newStudentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLines applies the HasEdge predicate on the "lines" edge.
func HasLines() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinesTable, LinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinesWith applies the HasEdge predicate on the "lines" edge with a given conditions (other predicates).
func HasLinesWith(preds ...predicate.InvoiceLine) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newLinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.NotPredicates(p))
}

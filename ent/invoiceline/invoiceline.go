// Code generated by ent, DO NOT EDIT.

package invoiceline

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invoiceline type in the database.
	Label = "invoice_line"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInvoiceID holds the string denoting the invoice_id field in the database.
	FieldInvoiceID = "invoice_id"
	// FieldEnrollmentID holds the string denoting the enrollment_id field in the database.
	FieldEnrollmentID = "enrollment_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// EdgeInvoice holds the string denoting the invoice edge name in mutations.
	EdgeInvoice = "invoice"
	// EdgeEnrollment holds the string denoting the enrollment edge name in mutations.
	EdgeEnrollment = "enrollment"
	// Table holds the table name of the invoiceline in the database.
	Table = "invoice_lines"
	// InvoiceTable is the table that holds the invoice relation/edge.
	InvoiceTable = "invoice_lines"
	// InvoiceInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoiceInverseTable = "invoices"
	// InvoiceColumn is the table column denoting the invoice relation/edge.
	InvoiceColumn = "invoice_id"
	// EnrollmentTable is the table that holds the enrollment relation/edge.
	EnrollmentTable = "invoice_lines"
	// EnrollmentInverseTable is the table name for the Enrollment entity.
	// It exists in this package in order to avoid circular dependency with the "enrollment" package.
	EnrollmentInverseTable = "enrollments"
	// EnrollmentColumn is the table column denoting the enrollment relation/edge.
	EnrollmentColumn = "enrollment_id"
)

// Columns holds all SQL columns for invoiceline fields.
var Columns = []string{
	FieldID,
	FieldInvoiceID,
	FieldEnrollmentID,
	FieldDescription,
	FieldQty,
	FieldUnitPrice,
	FieldAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the InvoiceLine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInvoiceID orders the results by the invoice_id field.
func ByInvoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceID, opts...).ToFunc()
}

// ByEnrollmentID orders the results by the enrollment_id field.
func ByEnrollmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnrollmentID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByInvoiceField orders the results by invoice field.
func ByInvoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnrollmentField orders the results by enrollment field.
func ByEnrollmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrollmentStep(), sql.OrderByField(field, opts...))
	}
}
func newInvoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
	)
}
func newEnrollmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrollmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnrollmentTable, EnrollmentColumn),
	)
}

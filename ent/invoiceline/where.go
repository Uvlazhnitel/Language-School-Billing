// Code generated by ent, DO NOT EDIT.

package invoiceline

import (
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLTE(FieldID, id))
}

// InvoiceID applies equality check predicate on the "invoice_id" field. It's identical to InvoiceIDEQ.
func InvoiceID(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldInvoiceID, v))
}

// EnrollmentID applies equality check predicate on the "enrollment_id" field. It's identical to EnrollmentIDEQ.
func EnrollmentID(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldEnrollmentID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldDescription, v))
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldQty, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldUnitPrice, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldAmount, v))
}

// InvoiceIDEQ applies the EQ predicate on the "invoice_id" field.
func InvoiceIDEQ(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldInvoiceID, v))
}

// InvoiceIDNEQ applies the NEQ predicate on the "invoice_id" field.
func InvoiceIDNEQ(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldInvoiceID, v))
}

// InvoiceIDIn applies the In predicate on the "invoice_id" field.
func InvoiceIDIn(vs ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldInvoiceID, vs...))
}

// InvoiceIDNotIn applies the NotIn predicate on the "invoice_id" field.
func InvoiceIDNotIn(vs ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldInvoiceID, vs...))
}

// EnrollmentIDEQ applies the EQ predicate on the "enrollment_id" field.
func EnrollmentIDEQ(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldEnrollmentID, v))
}

// EnrollmentIDNEQ applies the NEQ predicate on the "enrollment_id" field.
func EnrollmentIDNEQ(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldEnrollmentID, v))
}

// EnrollmentIDIn applies the In predicate on the "enrollment_id" field.
func EnrollmentIDIn(vs ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldEnrollmentID, vs...))
}

// EnrollmentIDNotIn applies the NotIn predicate on the "enrollment_id" field.
func EnrollmentIDNotIn(vs ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldEnrollmentID, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldContainsFold(FieldDescription, v))
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldQty, v))
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldQty, v))
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldQty, vs...))
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldQty, vs...))
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGT(FieldQty, v))
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGTE(FieldQty, v))
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLT(FieldQty, v))
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v int) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLTE(FieldQty, v))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLTE(FieldUnitPrice, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.FieldLTE(FieldAmount, v))
}

// HasInvoice applies the HasEdge predicate on the "invoice" edge.
func HasInvoice() predicate.InvoiceLine {
	return predicate.InvoiceLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoiceWith applies the HasEdge predicate on the "invoice" edge with a given conditions (other predicates).
func HasInvoiceWith(preds ...predicate.Invoice) predicate.InvoiceLine {
	return predicate.InvoiceLine(func(s *sql.Selector) {
		step := newInvoiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnrollment applies the HasEdge predicate on the "enrollment" edge.
func HasEnrollment() predicate.InvoiceLine {
	return predicate.InvoiceLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnrollmentTable, EnrollmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnrollmentWith applies the HasEdge predicate on the "enrollment" edge with a given conditions (other predicates).
func HasEnrollmentWith(preds ...predicate.Enrollment) predicate.InvoiceLine {
	return predicate.InvoiceLine(func(s *sql.Selector) {
		step := newEnrollmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InvoiceLine) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InvoiceLine) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InvoiceLine) predicate.InvoiceLine {
	return predicate.InvoiceLine(sql.NotPredicates(p))
}

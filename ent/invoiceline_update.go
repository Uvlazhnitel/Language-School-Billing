// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/invoice"
	"langschool/ent/invoiceline"
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvoiceLineUpdate is the builder for updating InvoiceLine entities.
type InvoiceLineUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceLineMutation
}

// Where appends a list predicates to the InvoiceLineUpdate builder.
func (_u *InvoiceLineUpdate) Where(ps ...predicate.InvoiceLine) *InvoiceLineUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *InvoiceLineUpdate) SetInvoiceID(v int) *InvoiceLineUpdate {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *InvoiceLineUpdate) SetNillableInvoiceID(v *int) *InvoiceLineUpdate {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetEnrollmentID sets the "enrollment_id" field.
func (_u *InvoiceLineUpdate) SetEnrollmentID(v int) *InvoiceLineUpdate {
	_u.mutation.SetEnrollmentID(v)
	return _u
}

// SetNillableEnrollmentID sets the "enrollment_id" field if the given value is not nil.
func (_u *InvoiceLineUpdate) SetNillableEnrollmentID(v *int) *InvoiceLineUpdate {
	if v != nil {
		_u.SetEnrollmentID(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *InvoiceLineUpdate) SetDescription(v string) *InvoiceLineUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *InvoiceLineUpdate) SetNillableDescription(v *string) *InvoiceLineUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetQty sets the "qty" field.
func (_u *InvoiceLineUpdate) SetQty(v int) *InvoiceLineUpdate {
	_u.mutation.ResetQty()
	_u.mutation.SetQty(v)
	return _u
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (_u *InvoiceLineUpdate) SetNillableQty(v *int) *InvoiceLineUpdate {
	if v != nil {
		_u.SetQty(*v)
	}
	return _u
}

// AddQty adds value to the "qty" field.
func (_u *InvoiceLineUpdate) AddQty(v int) *InvoiceLineUpdate {
	_u.mutation.AddQty(v)
	return _u
}

// SetUnitPrice sets the "unit_price" field.
func (_u *InvoiceLineUpdate) SetUnitPrice(v float64) *InvoiceLineUpdate {
	_u.mutation.ResetUnitPrice()
	_u.mutation.SetUnitPrice(v)
	return _u
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (_u *InvoiceLineUpdate) SetNillableUnitPrice(v *float64) *InvoiceLineUpdate {
	if v != nil {
		_u.SetUnitPrice(*v)
	}
	return _u
}

// AddUnitPrice adds value to the "unit_price" field.
func (_u *InvoiceLineUpdate) AddUnitPrice(v float64) *InvoiceLineUpdate {
	_u.mutation.AddUnitPrice(v)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *InvoiceLineUpdate) SetAmount(v float64) *InvoiceLineUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *InvoiceLineUpdate) SetNillableAmount(v *float64) *InvoiceLineUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *InvoiceLineUpdate) AddAmount(v float64) *InvoiceLineUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (_u *InvoiceLineUpdate) SetInvoice(v *Invoice) *InvoiceLineUpdate {
	return _u.SetInvoiceID(v.ID)
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (_u *InvoiceLineUpdate) SetEnrollment(v *Enrollment) *InvoiceLineUpdate {
	return _u.SetEnrollmentID(v.ID)
}

// Mutation returns the InvoiceLineMutation object of the builder.
func (_u *InvoiceLineUpdate) Mutation() *InvoiceLineMutation {
	return _u.mutation
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (_u *InvoiceLineUpdate) ClearInvoice() *InvoiceLineUpdate {
	_u.mutation.ClearInvoice()
	return _u
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (_u *InvoiceLineUpdate) ClearEnrollment() *InvoiceLineUpdate {
	_u.mutation.ClearEnrollment()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InvoiceLineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvoiceLineUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InvoiceLineUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvoiceLineUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvoiceLineUpdate) check() error {
	if _u.mutation.InvoiceCleared() && len(_u.mutation.InvoiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InvoiceLine.invoice"`)
	}
	if _u.mutation.EnrollmentCleared() && len(_u.mutation.EnrollmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InvoiceLine.enrollment"`)
	}
	return nil
}

func (_u *InvoiceLineUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoiceline.Table, invoiceline.Columns, sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(invoiceline.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Qty(); ok {
		_spec.SetField(invoiceline.FieldQty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQty(); ok {
		_spec.AddField(invoiceline.FieldQty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UnitPrice(); ok {
		_spec.SetField(invoiceline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedUnitPrice(); ok {
		_spec.AddField(invoiceline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(invoiceline.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(invoiceline.FieldAmount, field.TypeFloat64, value)
	}
	if _u.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.InvoiceTable,
			Columns: []string{invoiceline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.InvoiceTable,
			Columns: []string{invoiceline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EnrollmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.EnrollmentTable,
			Columns: []string{invoiceline.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.EnrollmentTable,
			Columns: []string{invoiceline.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoiceline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InvoiceLineUpdateOne is the builder for updating a single InvoiceLine entity.
type InvoiceLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceLineMutation
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *InvoiceLineUpdateOne) SetInvoiceID(v int) *InvoiceLineUpdateOne {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *InvoiceLineUpdateOne) SetNillableInvoiceID(v *int) *InvoiceLineUpdateOne {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetEnrollmentID sets the "enrollment_id" field.
func (_u *InvoiceLineUpdateOne) SetEnrollmentID(v int) *InvoiceLineUpdateOne {
	_u.mutation.SetEnrollmentID(v)
	return _u
}

// SetNillableEnrollmentID sets the "enrollment_id" field if the given value is not nil.
func (_u *InvoiceLineUpdateOne) SetNillableEnrollmentID(v *int) *InvoiceLineUpdateOne {
	if v != nil {
		_u.SetEnrollmentID(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *InvoiceLineUpdateOne) SetDescription(v string) *InvoiceLineUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *InvoiceLineUpdateOne) SetNillableDescription(v *string) *InvoiceLineUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetQty sets the "qty" field.
func (_u *InvoiceLineUpdateOne) SetQty(v int) *InvoiceLineUpdateOne {
	_u.mutation.ResetQty()
	_u.mutation.SetQty(v)
	return _u
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (_u *InvoiceLineUpdateOne) SetNillableQty(v *int) *InvoiceLineUpdateOne {
	if v != nil {
		_u.SetQty(*v)
	}
	return _u
}

// AddQty adds value to the "qty" field.
func (_u *InvoiceLineUpdateOne) AddQty(v int) *InvoiceLineUpdateOne {
	_u.mutation.AddQty(v)
	return _u
}

// SetUnitPrice sets the "unit_price" field.
func (_u *InvoiceLineUpdateOne) SetUnitPrice(v float64) *InvoiceLineUpdateOne {
	_u.mutation.ResetUnitPrice()
	_u.mutation.SetUnitPrice(v)
	return _u
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (_u *InvoiceLineUpdateOne) SetNillableUnitPrice(v *float64) *InvoiceLineUpdateOne {
	if v != nil {
		_u.SetUnitPrice(*v)
	}
	return _u
}

// AddUnitPrice adds value to the "unit_price" field.
func (_u *InvoiceLineUpdateOne) AddUnitPrice(v float64) *InvoiceLineUpdateOne {
	_u.mutation.AddUnitPrice(v)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *InvoiceLineUpdateOne) SetAmount(v float64) *InvoiceLineUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *InvoiceLineUpdateOne) SetNillableAmount(v *float64) *InvoiceLineUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *InvoiceLineUpdateOne) AddAmount(v float64) *InvoiceLineUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (_u *InvoiceLineUpdateOne) SetInvoice(v *Invoice) *InvoiceLineUpdateOne {
	return _u.SetInvoiceID(v.ID)
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (_u *InvoiceLineUpdateOne) SetEnrollment(v *Enrollment) *InvoiceLineUpdateOne {
	return _u.SetEnrollmentID(v.ID)
}

// Mutation returns the InvoiceLineMutation object of the builder.
func (_u *InvoiceLineUpdateOne) Mutation() *InvoiceLineMutation {
	return _u.mutation
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (_u *InvoiceLineUpdateOne) ClearInvoice() *InvoiceLineUpdateOne {
	_u.mutation.ClearInvoice()
	return _u
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (_u *InvoiceLineUpdateOne) ClearEnrollment() *InvoiceLineUpdateOne {
	_u.mutation.ClearEnrollment()
	return _u
}

// Where appends a list predicates to the InvoiceLineUpdate builder.
func (_u *InvoiceLineUpdateOne) Where(ps ...predicate.InvoiceLine) *InvoiceLineUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InvoiceLineUpdateOne) Select(field string, fields ...string) *InvoiceLineUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated InvoiceLine entity.
func (_u *InvoiceLineUpdateOne) Save(ctx context.Context) (*InvoiceLine, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvoiceLineUpdateOne) SaveX(ctx context.Context) *InvoiceLine {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InvoiceLineUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvoiceLineUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvoiceLineUpdateOne) check() error {
	if _u.mutation.InvoiceCleared() && len(_u.mutation.InvoiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InvoiceLine.invoice"`)
	}
	if _u.mutation.EnrollmentCleared() && len(_u.mutation.EnrollmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InvoiceLine.enrollment"`)
	}
	return nil
}

func (_u *InvoiceLineUpdateOne) sqlSave(ctx context.Context) (_node *InvoiceLine, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoiceline.Table, invoiceline.Columns, sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvoiceLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoiceline.FieldID)
		for _, f := range fields {
			if !invoiceline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoiceline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(invoiceline.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Qty(); ok {
		_spec.SetField(invoiceline.FieldQty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQty(); ok {
		_spec.AddField(invoiceline.FieldQty, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UnitPrice(); ok {
		_spec.SetField(invoiceline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedUnitPrice(); ok {
		_spec.AddField(invoiceline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(invoiceline.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(invoiceline.FieldAmount, field.TypeFloat64, value)
	}
	if _u.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.InvoiceTable,
			Columns: []string{invoiceline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.InvoiceTable,
			Columns: []string{invoiceline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EnrollmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.EnrollmentTable,
			Columns: []string{invoiceline.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.EnrollmentTable,
			Columns: []string{invoiceline.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvoiceLine{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoiceline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

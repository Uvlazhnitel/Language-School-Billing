// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/course"
	"langschool/ent/enrollment"
	"langschool/ent/student"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Enrollment is the model entity for the Enrollment schema.
type Enrollment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID int `json:"student_id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID int `json:"course_id,omitempty"`
	// BillingMode holds the value of the "billing_mode" field.
	BillingMode enrollment.BillingMode `json:"billing_mode,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// DiscountPct holds the value of the "discount_pct" field.
	DiscountPct float64 `json:"discount_pct,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnrollmentQuery when eager-loading is set.
	Edges        EnrollmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnrollmentEdges holds the relations/edges for other nodes in the graph.
type EnrollmentEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// InvoiceLines holds the value of the invoice_lines edge.
	InvoiceLines []*InvoiceLine `json:"invoice_lines,omitempty"`
	// PriceOverrides holds the value of the price_overrides edge.
	PriceOverrides []*PriceOverride `json:"price_overrides,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrollmentEdges) StudentOrErr() (*Student, error) {
	if e.Student != nil {
		return e.Student, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: student.Label}
	}
	return nil, &NotLoadedError{edge: "student"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrollmentEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// InvoiceLinesOrErr returns the InvoiceLines value or an error if the edge
// was not loaded in eager-loading.
func (e EnrollmentEdges) InvoiceLinesOrErr() ([]*InvoiceLine, error) {
	if e.loadedTypes[2] {
		return e.InvoiceLines, nil
	}
	return nil, &NotLoadedError{edge: "invoice_lines"}
}

// PriceOverridesOrErr returns the PriceOverrides value or an error if the edge
// was not loaded in eager-loading.
func (e EnrollmentEdges) PriceOverridesOrErr() ([]*PriceOverride, error) {
	if e.loadedTypes[3] {
		return e.PriceOverrides, nil
	}
	return nil, &NotLoadedError{edge: "price_overrides"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enrollment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enrollment.FieldDiscountPct:
			values[i] = new(sql.NullFloat64)
		case enrollment.FieldID, enrollment.FieldStudentID, enrollment.FieldCourseID:
			values[i] = new(sql.NullInt64)
		case enrollment.FieldBillingMode, enrollment.FieldNote:
			values[i] = new(sql.NullString)
		case enrollment.FieldStartDate, enrollment.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enrollment fields.
func (_m *Enrollment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enrollment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case enrollment.FieldStudentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				_m.StudentID = int(value.Int64)
			}
		case enrollment.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				_m.CourseID = int(value.Int64)
			}
		case enrollment.FieldBillingMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_mode", values[i])
			} else if value.Valid {
				_m.BillingMode = enrollment.BillingMode(value.String)
			}
		case enrollment.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case enrollment.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = new(time.Time)
				*_m.EndDate = value.Time
			}
		case enrollment.FieldDiscountPct:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_pct", values[i])
			} else if value.Valid {
				_m.DiscountPct = value.Float64
			}
		case enrollment.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				_m.Note = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Enrollment.
// This includes values selected through modifiers, order, etc.
func (_m *Enrollment) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStudent queries the "student" edge of the Enrollment entity.
func (_m *Enrollment) QueryStudent() *StudentQuery {
	return NewEnrollmentClient(_m.config).QueryStudent(_m)
}

// QueryCourse queries the "course" edge of the Enrollment entity.
func (_m *Enrollment) QueryCourse() *CourseQuery {
	return NewEnrollmentClient(_m.config).QueryCourse(_m)
}

// QueryInvoiceLines queries the "invoice_lines" edge of the Enrollment entity.
func (_m *Enrollment) QueryInvoiceLines() *InvoiceLineQuery {
	return NewEnrollmentClient(_m.config).QueryInvoiceLines(_m)
}

// QueryPriceOverrides queries the "price_overrides" edge of the Enrollment entity.
func (_m *Enrollment) QueryPriceOverrides() *PriceOverrideQuery {
	return NewEnrollmentClient(_m.config).QueryPriceOverrides(_m)
}

// Update returns a builder for updating this Enrollment.
// Note that you need to call Enrollment.Unwrap() before calling this method if this Enrollment
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Enrollment) Update() *EnrollmentUpdateOne {
	return NewEnrollmentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Enrollment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Enrollment) Unwrap() *Enrollment {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enrollment is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Enrollment) String() string {
	var builder strings.Builder
	builder.WriteString("Enrollment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("student_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StudentID))
	builder.WriteString(", ")
	builder.WriteString("course_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CourseID))
	builder.WriteString(", ")
	builder.WriteString("billing_mode=")
	builder.WriteString(fmt.Sprintf("%v", _m.BillingMode))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("discount_pct=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiscountPct))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(_m.Note)
	builder.WriteByte(')')
	return builder.String()
}

// Enrollments is a parsable slice of Enrollment.
type Enrollments []*Enrollment

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/invoice"
	"langschool/ent/student"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID int `json:"student_id,omitempty"`
	// PeriodYear holds the value of the "period_year" field.
	PeriodYear int `json:"period_year,omitempty"`
	// PeriodMonth holds the value of the "period_month" field.
	PeriodMonth int `json:"period_month,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// Status holds the value of the "status" field.
	Status invoice.Status `json:"status,omitempty"`
	// Number holds the value of the "number" field.
	Number *string `json:"number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges        InvoiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// Lines holds the value of the lines edge.
	Lines []*InvoiceLine `json:"lines,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) StudentOrErr() (*Student, error) {
	if e.Student != nil {
		return e.Student, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: student.Label}
	}
	return nil, &NotLoadedError{edge: "student"}
}

// LinesOrErr returns the Lines value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) LinesOrErr() ([]*InvoiceLine, error) {
	if e.loadedTypes[1] {
		return e.Lines, nil
	}
	return nil, &NotLoadedError{edge: "lines"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldTotalAmount:
			values[i] = new(sql.NullFloat64)
		case invoice.FieldID, invoice.FieldStudentID, invoice.FieldPeriodYear, invoice.FieldPeriodMonth:
			values[i] = new(sql.NullInt64)
		case invoice.FieldStatus, invoice.FieldNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (_m *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invoice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case invoice.FieldStudentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				_m.StudentID = int(value.Int64)
			}
		case invoice.FieldPeriodYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_year", values[i])
			} else if value.Valid {
				_m.PeriodYear = int(value.Int64)
			}
		case invoice.FieldPeriodMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period_month", values[i])
			} else if value.Valid {
				_m.PeriodMonth = int(value.Int64)
			}
		case invoice.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				_m.TotalAmount = value.Float64
			}
		case invoice.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = invoice.Status(value.String)
			}
		case invoice.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				_m.Number = new(string)
				*_m.Number = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (_m *Invoice) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStudent queries the "student" edge of the Invoice entity.
func (_m *Invoice) QueryStudent() *StudentQuery {
	return NewInvoiceClient(_m.config).QueryStudent(_m)
}

// QueryLines queries the "lines" edge of the Invoice entity.
func (_m *Invoice) QueryLines() *InvoiceLineQuery {
	return NewInvoiceClient(_m.config).QueryLines(_m)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Invoice) Unwrap() *Invoice {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoice is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("student_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StudentID))
	builder.WriteString(", ")
	builder.WriteString("period_year=")
	builder.WriteString(fmt.Sprintf("%v", _m.PeriodYear))
	builder.WriteString(", ")
	builder.WriteString("period_month=")
	builder.WriteString(fmt.Sprintf("%v", _m.PeriodMonth))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	if v := _m.Number; v != nil {
		builder.WriteString("number=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice

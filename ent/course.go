// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/course"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type course.Type `json:"type,omitempty"`
	// LessonPrice holds the value of the "lesson_price" field.
	LessonPrice float64 `json:"lesson_price,omitempty"`
	// SubscriptionPrice holds the value of the "subscription_price" field.
	SubscriptionPrice float64 `json:"subscription_price,omitempty"`
	// ScheduleJSON holds the value of the "schedule_json" field.
	ScheduleJSON string `json:"schedule_json,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseQuery when eager-loading is set.
	Edges        CourseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CourseEdges holds the relations/edges for other nodes in the graph.
type CourseEdges struct {
	// Enrollments holds the value of the enrollments edge.
	Enrollments []*Enrollment `json:"enrollments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EnrollmentsOrErr returns the Enrollments value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) EnrollmentsOrErr() ([]*Enrollment, error) {
	if e.loadedTypes[0] {
		return e.Enrollments, nil
	}
	return nil, &NotLoadedError{edge: "enrollments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case course.FieldIsActive:
			values[i] = new(sql.NullBool)
		case course.FieldLessonPrice, course.FieldSubscriptionPrice:
			values[i] = new(sql.NullFloat64)
		case course.FieldID:
			values[i] = new(sql.NullInt64)
		case course.FieldName, course.FieldType, course.FieldScheduleJSON:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (_m *Course) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case course.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case course.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = course.Type(value.String)
			}
		case course.FieldLessonPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lesson_price", values[i])
			} else if value.Valid {
				_m.LessonPrice = value.Float64
			}
		case course.FieldSubscriptionPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_price", values[i])
			} else if value.Valid {
				_m.SubscriptionPrice = value.Float64
			}
		case course.FieldScheduleJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_json", values[i])
			} else if value.Valid {
				_m.ScheduleJSON = value.String
			}
		case course.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Course.
// This includes values selected through modifiers, order, etc.
func (_m *Course) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEnrollments queries the "enrollments" edge of the Course entity.
func (_m *Course) QueryEnrollments() *EnrollmentQuery {
	return NewCourseClient(_m.config).QueryEnrollments(_m)
}

// Update returns a builder for updating this Course.
// Note that you need to call Course.Unwrap() before calling this method if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Course) Update() *CourseUpdateOne {
	return NewCourseClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Course entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Course) Unwrap() *Course {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("lesson_price=")
	builder.WriteString(fmt.Sprintf("%v", _m.LessonPrice))
	builder.WriteString(", ")
	builder.WriteString("subscription_price=")
	builder.WriteString(fmt.Sprintf("%v", _m.SubscriptionPrice))
	builder.WriteString(", ")
	builder.WriteString("schedule_json=")
	builder.WriteString(_m.ScheduleJSON)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course

// Code generated by ent, DO NOT EDIT.

package student

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the student type in the database.
	Label = "student"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeEnrollments holds the string denoting the enrollments edge name in mutations.
	EdgeEnrollments = "enrollments"
	// EdgeInvoices holds the string denoting the invoices edge name in mutations.
	EdgeInvoices = "invoices"
	// Table holds the table name of the student in the database.
	Table = "students"
	// EnrollmentsTable is the table that holds the enrollments relation/edge.
	EnrollmentsTable = "enrollments"
	// EnrollmentsInverseTable is the table name for the Enrollment entity.
	// It exists in this package in order to avoid circular dependency with the "enrollment" package.
	EnrollmentsInverseTable = "enrollments"
	// EnrollmentsColumn is the table column denoting the enrollments relation/edge.
	EnrollmentsColumn = "student_id"
	// InvoicesTable is the table that holds the invoices relation/edge.
	InvoicesTable = "invoices"
	// InvoicesInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoicesInverseTable = "invoices"
	// InvoicesColumn is the table column denoting the invoices relation/edge.
	InvoicesColumn = "student_id"
)

// Columns holds all SQL columns for student fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldPhone,
	FieldEmail,
	FieldNote,
	FieldIsActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultNote holds the default value on creation for the "note" field.
	DefaultNote string
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the Student queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByEnrollmentsCount orders the results by enrollments count.
func ByEnrollmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnrollmentsStep(), opts...)
	}
}

// ByEnrollments orders the results by enrollments terms.
func ByEnrollments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrollmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvoicesCount orders the results by invoices count.
func ByInvoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvoicesStep(), opts...)
	}
}

// ByInvoices orders the results by invoices terms.
func ByInvoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEnrollmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrollmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EnrollmentsTable, EnrollmentsColumn),
	)
}
func newInvoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/settings"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Settings is the model entity for the Settings schema.
type Settings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SingletonID holds the value of the "singleton_id" field.
	SingletonID int `json:"singleton_id,omitempty"`
	// OrgName holds the value of the "org_name" field.
	OrgName string `json:"org_name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// InvoicePrefix holds the value of the "invoice_prefix" field.
	InvoicePrefix string `json:"invoice_prefix,omitempty"`
	// NextSeq holds the value of the "next_seq" field.
	NextSeq int `json:"next_seq,omitempty"`
	// InvoiceDayOfMonth holds the value of the "invoice_day_of_month" field.
	InvoiceDayOfMonth int `json:"invoice_day_of_month,omitempty"`
	// AutoIssue holds the value of the "auto_issue" field.
	AutoIssue bool `json:"auto_issue,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale       string `json:"locale,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case settings.FieldAutoIssue:
			values[i] = new(sql.NullBool)
		case settings.FieldID, settings.FieldSingletonID, settings.FieldNextSeq, settings.FieldInvoiceDayOfMonth:
			values[i] = new(sql.NullInt64)
		case settings.FieldOrgName, settings.FieldAddress, settings.FieldInvoicePrefix, settings.FieldCurrency, settings.FieldLocale:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settings fields.
func (_m *Settings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case settings.FieldSingletonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field singleton_id", values[i])
			} else if value.Valid {
				_m.SingletonID = int(value.Int64)
			}
		case settings.FieldOrgName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_name", values[i])
			} else if value.Valid {
				_m.OrgName = value.String
			}
		case settings.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				_m.Address = value.String
			}
		case settings.FieldInvoicePrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_prefix", values[i])
			} else if value.Valid {
				_m.InvoicePrefix = value.String
			}
		case settings.FieldNextSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field next_seq", values[i])
			} else if value.Valid {
				_m.NextSeq = int(value.Int64)
			}
		case settings.FieldInvoiceDayOfMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_day_of_month", values[i])
			} else if value.Valid {
				_m.InvoiceDayOfMonth = int(value.Int64)
			}
		case settings.FieldAutoIssue:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_issue", values[i])
			} else if value.Valid {
				_m.AutoIssue = value.Bool
			}
		case settings.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = value.String
			}
		case settings.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				_m.Locale = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Settings.
// This includes values selected through modifiers, order, etc.
func (_m *Settings) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Settings.
// Note that you need to call Settings.Unwrap() before calling this method if this Settings
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Settings) Update() *SettingsUpdateOne {
	return NewSettingsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Settings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Settings) Unwrap() *Settings {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settings is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Settings) String() string {
	var builder strings.Builder
	builder.WriteString("Settings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("singleton_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SingletonID))
	builder.WriteString(", ")
	builder.WriteString("org_name=")
	builder.WriteString(_m.OrgName)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(_m.Address)
	builder.WriteString(", ")
	builder.WriteString("invoice_prefix=")
	builder.WriteString(_m.InvoicePrefix)
	builder.WriteString(", ")
	builder.WriteString("next_seq=")
	builder.WriteString(fmt.Sprintf("%v", _m.NextSeq))
	builder.WriteString(", ")
	builder.WriteString("invoice_day_of_month=")
	builder.WriteString(fmt.Sprintf("%v", _m.InvoiceDayOfMonth))
	builder.WriteString(", ")
	builder.WriteString("auto_issue=")
	builder.WriteString(fmt.Sprintf("%v", _m.AutoIssue))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(_m.Currency)
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(_m.Locale)
	builder.WriteByte(')')
	return builder.String()
}

// SettingsSlice is a parsable slice of Settings.
type SettingsSlice []*Settings

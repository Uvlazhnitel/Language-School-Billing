// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/invoice"
	"langschool/ent/invoiceline"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InvoiceLine is the model entity for the InvoiceLine schema.
type InvoiceLine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID int `json:"invoice_id,omitempty"`
	// EnrollmentID holds the value of the "enrollment_id" field.
	EnrollmentID int `json:"enrollment_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty int `json:"qty,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice float64 `json:"unit_price,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceLineQuery when eager-loading is set.
	Edges        InvoiceLineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InvoiceLineEdges holds the relations/edges for other nodes in the graph.
type InvoiceLineEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// Enrollment holds the value of the enrollment edge.
	Enrollment *Enrollment `json:"enrollment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceLineEdges) InvoiceOrErr() (*Invoice, error) {
	if e.Invoice != nil {
		return e.Invoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: invoice.Label}
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// EnrollmentOrErr returns the Enrollment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceLineEdges) EnrollmentOrErr() (*Enrollment, error) {
	if e.Enrollment != nil {
		return e.Enrollment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: enrollment.Label}
	}
	return nil, &NotLoadedError{edge: "enrollment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvoiceLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoiceline.FieldUnitPrice, invoiceline.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case invoiceline.FieldID, invoiceline.FieldInvoiceID, invoiceline.FieldEnrollmentID, invoiceline.FieldQty:
			values[i] = new(sql.NullInt64)
		case invoiceline.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvoiceLine fields.
func (_m *InvoiceLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invoiceline.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case invoiceline.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				_m.InvoiceID = int(value.Int64)
			}
		case invoiceline.FieldEnrollmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enrollment_id", values[i])
			} else if value.Valid {
				_m.EnrollmentID = int(value.Int64)
			}
		case invoiceline.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case invoiceline.FieldQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				_m.Qty = int(value.Int64)
			}
		case invoiceline.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value.Valid {
				_m.UnitPrice = value.Float64
			}
		case invoiceline.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				_m.Amount = value.Float64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InvoiceLine.
// This includes values selected through modifiers, order, etc.
func (_m *InvoiceLine) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the InvoiceLine entity.
func (_m *InvoiceLine) QueryInvoice() *InvoiceQuery {
	return NewInvoiceLineClient(_m.config).QueryInvoice(_m)
}

// QueryEnrollment queries the "enrollment" edge of the InvoiceLine entity.
func (_m *InvoiceLine) QueryEnrollment() *EnrollmentQuery {
	return NewInvoiceLineClient(_m.config).QueryEnrollment(_m)
}

// Update returns a builder for updating this InvoiceLine.
// Note that you need to call InvoiceLine.Unwrap() before calling this method if this InvoiceLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *InvoiceLine) Update() *InvoiceLineUpdateOne {
	return NewInvoiceLineClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the InvoiceLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *InvoiceLine) Unwrap() *InvoiceLine {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvoiceLine is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *InvoiceLine) String() string {
	var builder strings.Builder
	builder.WriteString("InvoiceLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("invoice_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.InvoiceID))
	builder.WriteString(", ")
	builder.WriteString("enrollment_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.EnrollmentID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", _m.Qty))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", _m.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// InvoiceLines is a parsable slice of InvoiceLine.
type InvoiceLines []*InvoiceLine

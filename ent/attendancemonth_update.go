// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/attendancemonth"
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttendanceMonthUpdate is the builder for updating AttendanceMonth entities.
type AttendanceMonthUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceMonthMutation
}

// Where appends a list predicates to the AttendanceMonthUpdate builder.
func (_u *AttendanceMonthUpdate) Where(ps ...predicate.AttendanceMonth) *AttendanceMonthUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStudentID sets the "student_id" field.
func (_u *AttendanceMonthUpdate) SetStudentID(v int) *AttendanceMonthUpdate {
	_u.mutation.ResetStudentID()
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableStudentID(v *int) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// AddStudentID adds value to the "student_id" field.
func (_u *AttendanceMonthUpdate) AddStudentID(v int) *AttendanceMonthUpdate {
	_u.mutation.AddStudentID(v)
	return _u
}

// SetCourseID sets the "course_id" field.
func (_u *AttendanceMonthUpdate) SetCourseID(v int) *AttendanceMonthUpdate {
	_u.mutation.ResetCourseID()
	_u.mutation.SetCourseID(v)
	return _u
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableCourseID(v *int) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetCourseID(*v)
	}
	return _u
}

// AddCourseID adds value to the "course_id" field.
func (_u *AttendanceMonthUpdate) AddCourseID(v int) *AttendanceMonthUpdate {
	_u.mutation.AddCourseID(v)
	return _u
}

// SetYear sets the "year" field.
func (_u *AttendanceMonthUpdate) SetYear(v int) *AttendanceMonthUpdate {
	_u.mutation.ResetYear()
	_u.mutation.SetYear(v)
	return _u
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableYear(v *int) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetYear(*v)
	}
	return _u
}

// AddYear adds value to the "year" field.
func (_u *AttendanceMonthUpdate) AddYear(v int) *AttendanceMonthUpdate {
	_u.mutation.AddYear(v)
	return _u
}

// SetMonth sets the "month" field.
func (_u *AttendanceMonthUpdate) SetMonth(v int) *AttendanceMonthUpdate {
	_u.mutation.ResetMonth()
	_u.mutation.SetMonth(v)
	return _u
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableMonth(v *int) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetMonth(*v)
	}
	return _u
}

// AddMonth adds value to the "month" field.
func (_u *AttendanceMonthUpdate) AddMonth(v int) *AttendanceMonthUpdate {
	_u.mutation.AddMonth(v)
	return _u
}

// SetLessonsCount sets the "lessons_count" field.
func (_u *AttendanceMonthUpdate) SetLessonsCount(v int) *AttendanceMonthUpdate {
	_u.mutation.ResetLessonsCount()
	_u.mutation.SetLessonsCount(v)
	return _u
}

// SetNillableLessonsCount sets the "lessons_count" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableLessonsCount(v *int) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetLessonsCount(*v)
	}
	return _u
}

// AddLessonsCount adds value to the "lessons_count" field.
func (_u *AttendanceMonthUpdate) AddLessonsCount(v int) *AttendanceMonthUpdate {
	_u.mutation.AddLessonsCount(v)
	return _u
}

// SetLocked sets the "locked" field.
func (_u *AttendanceMonthUpdate) SetLocked(v bool) *AttendanceMonthUpdate {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableLocked(v *bool) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetSource sets the "source" field.
func (_u *AttendanceMonthUpdate) SetSource(v attendancemonth.Source) *AttendanceMonthUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *AttendanceMonthUpdate) SetNillableSource(v *attendancemonth.Source) *AttendanceMonthUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// Mutation returns the AttendanceMonthMutation object of the builder.
func (_u *AttendanceMonthUpdate) Mutation() *AttendanceMonthMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AttendanceMonthUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttendanceMonthUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AttendanceMonthUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttendanceMonthUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttendanceMonthUpdate) check() error {
	if v, ok := _u.mutation.Source(); ok {
		if err := attendancemonth.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "AttendanceMonth.source": %w`, err)}
		}
	}
	return nil
}

func (_u *AttendanceMonthUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendancemonth.Table, attendancemonth.Columns, sqlgraph.NewFieldSpec(attendancemonth.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StudentID(); ok {
		_spec.SetField(attendancemonth.FieldStudentID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStudentID(); ok {
		_spec.AddField(attendancemonth.FieldStudentID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CourseID(); ok {
		_spec.SetField(attendancemonth.FieldCourseID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCourseID(); ok {
		_spec.AddField(attendancemonth.FieldCourseID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Year(); ok {
		_spec.SetField(attendancemonth.FieldYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedYear(); ok {
		_spec.AddField(attendancemonth.FieldYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Month(); ok {
		_spec.SetField(attendancemonth.FieldMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMonth(); ok {
		_spec.AddField(attendancemonth.FieldMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LessonsCount(); ok {
		_spec.SetField(attendancemonth.FieldLessonsCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLessonsCount(); ok {
		_spec.AddField(attendancemonth.FieldLessonsCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(attendancemonth.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(attendancemonth.FieldSource, field.TypeEnum, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendancemonth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AttendanceMonthUpdateOne is the builder for updating a single AttendanceMonth entity.
type AttendanceMonthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceMonthMutation
}

// SetStudentID sets the "student_id" field.
func (_u *AttendanceMonthUpdateOne) SetStudentID(v int) *AttendanceMonthUpdateOne {
	_u.mutation.ResetStudentID()
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableStudentID(v *int) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// AddStudentID adds value to the "student_id" field.
func (_u *AttendanceMonthUpdateOne) AddStudentID(v int) *AttendanceMonthUpdateOne {
	_u.mutation.AddStudentID(v)
	return _u
}

// SetCourseID sets the "course_id" field.
func (_u *AttendanceMonthUpdateOne) SetCourseID(v int) *AttendanceMonthUpdateOne {
	_u.mutation.ResetCourseID()
	_u.mutation.SetCourseID(v)
	return _u
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableCourseID(v *int) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetCourseID(*v)
	}
	return _u
}

// AddCourseID adds value to the "course_id" field.
func (_u *AttendanceMonthUpdateOne) AddCourseID(v int) *AttendanceMonthUpdateOne {
	_u.mutation.AddCourseID(v)
	return _u
}

// SetYear sets the "year" field.
func (_u *AttendanceMonthUpdateOne) SetYear(v int) *AttendanceMonthUpdateOne {
	_u.mutation.ResetYear()
	_u.mutation.SetYear(v)
	return _u
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableYear(v *int) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetYear(*v)
	}
	return _u
}

// AddYear adds value to the "year" field.
func (_u *AttendanceMonthUpdateOne) AddYear(v int) *AttendanceMonthUpdateOne {
	_u.mutation.AddYear(v)
	return _u
}

// SetMonth sets the "month" field.
func (_u *AttendanceMonthUpdateOne) SetMonth(v int) *AttendanceMonthUpdateOne {
	_u.mutation.ResetMonth()
	_u.mutation.SetMonth(v)
	return _u
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableMonth(v *int) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetMonth(*v)
	}
	return _u
}

// AddMonth adds value to the "month" field.
func (_u *AttendanceMonthUpdateOne) AddMonth(v int) *AttendanceMonthUpdateOne {
	_u.mutation.AddMonth(v)
	return _u
}

// SetLessonsCount sets the "lessons_count" field.
func (_u *AttendanceMonthUpdateOne) SetLessonsCount(v int) *AttendanceMonthUpdateOne {
	_u.mutation.ResetLessonsCount()
	_u.mutation.SetLessonsCount(v)
	return _u
}

// SetNillableLessonsCount sets the "lessons_count" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableLessonsCount(v *int) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetLessonsCount(*v)
	}
	return _u
}

// AddLessonsCount adds value to the "lessons_count" field.
func (_u *AttendanceMonthUpdateOne) AddLessonsCount(v int) *AttendanceMonthUpdateOne {
	_u.mutation.AddLessonsCount(v)
	return _u
}

// SetLocked sets the "locked" field.
func (_u *AttendanceMonthUpdateOne) SetLocked(v bool) *AttendanceMonthUpdateOne {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableLocked(v *bool) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetSource sets the "source" field.
func (_u *AttendanceMonthUpdateOne) SetSource(v attendancemonth.Source) *AttendanceMonthUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *AttendanceMonthUpdateOne) SetNillableSource(v *attendancemonth.Source) *AttendanceMonthUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// Mutation returns the AttendanceMonthMutation object of the builder.
func (_u *AttendanceMonthUpdateOne) Mutation() *AttendanceMonthMutation {
	return _u.mutation
}

// Where appends a list predicates to the AttendanceMonthUpdate builder.
func (_u *AttendanceMonthUpdateOne) Where(ps ...predicate.AttendanceMonth) *AttendanceMonthUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AttendanceMonthUpdateOne) Select(field string, fields ...string) *AttendanceMonthUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AttendanceMonth entity.
func (_u *AttendanceMonthUpdateOne) Save(ctx context.Context) (*AttendanceMonth, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttendanceMonthUpdateOne) SaveX(ctx context.Context) *AttendanceMonth {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AttendanceMonthUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttendanceMonthUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttendanceMonthUpdateOne) check() error {
	if v, ok := _u.mutation.Source(); ok {
		if err := attendancemonth.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "AttendanceMonth.source": %w`, err)}
		}
	}
	return nil
}

func (_u *AttendanceMonthUpdateOne) sqlSave(ctx context.Context) (_node *AttendanceMonth, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendancemonth.Table, attendancemonth.Columns, sqlgraph.NewFieldSpec(attendancemonth.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttendanceMonth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendancemonth.FieldID)
		for _, f := range fields {
			if !attendancemonth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attendancemonth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StudentID(); ok {
		_spec.SetField(attendancemonth.FieldStudentID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStudentID(); ok {
		_spec.AddField(attendancemonth.FieldStudentID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CourseID(); ok {
		_spec.SetField(attendancemonth.FieldCourseID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCourseID(); ok {
		_spec.AddField(attendancemonth.FieldCourseID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Year(); ok {
		_spec.SetField(attendancemonth.FieldYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedYear(); ok {
		_spec.AddField(attendancemonth.FieldYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Month(); ok {
		_spec.SetField(attendancemonth.FieldMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMonth(); ok {
		_spec.AddField(attendancemonth.FieldMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LessonsCount(); ok {
		_spec.SetField(attendancemonth.FieldLessonsCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLessonsCount(); ok {
		_spec.AddField(attendancemonth.FieldLessonsCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(attendancemonth.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(attendancemonth.FieldSource, field.TypeEnum, value)
	}
	_node = &AttendanceMonth{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendancemonth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

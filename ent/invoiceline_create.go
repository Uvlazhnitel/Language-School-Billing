// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/invoice"
	"langschool/ent/invoiceline"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvoiceLineCreate is the builder for creating a InvoiceLine entity.
type InvoiceLineCreate struct {
	config
	mutation *InvoiceLineMutation
	hooks    []Hook
}

// SetInvoiceID sets the "invoice_id" field.
func (_c *InvoiceLineCreate) SetInvoiceID(v int) *InvoiceLineCreate {
	_c.mutation.SetInvoiceID(v)
	return _c
}

// SetEnrollmentID sets the "enrollment_id" field.
func (_c *InvoiceLineCreate) SetEnrollmentID(v int) *InvoiceLineCreate {
	_c.mutation.SetEnrollmentID(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *InvoiceLineCreate) SetDescription(v string) *InvoiceLineCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetQty sets the "qty" field.
func (_c *InvoiceLineCreate) SetQty(v int) *InvoiceLineCreate {
	_c.mutation.SetQty(v)
	return _c
}

// SetUnitPrice sets the "unit_price" field.
func (_c *InvoiceLineCreate) SetUnitPrice(v float64) *InvoiceLineCreate {
	_c.mutation.SetUnitPrice(v)
	return _c
}

// SetAmount sets the "amount" field.
func (_c *InvoiceLineCreate) SetAmount(v float64) *InvoiceLineCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (_c *InvoiceLineCreate) SetInvoice(v *Invoice) *InvoiceLineCreate {
	return _c.SetInvoiceID(v.ID)
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (_c *InvoiceLineCreate) SetEnrollment(v *Enrollment) *InvoiceLineCreate {
	return _c.SetEnrollmentID(v.ID)
}

// Mutation returns the InvoiceLineMutation object of the builder.
func (_c *InvoiceLineCreate) Mutation() *InvoiceLineMutation {
	return _c.mutation
}

// Save creates the InvoiceLine in the database.
func (_c *InvoiceLineCreate) Save(ctx context.Context) (*InvoiceLine, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *InvoiceLineCreate) SaveX(ctx context.Context) *InvoiceLine {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InvoiceLineCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InvoiceLineCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *InvoiceLineCreate) check() error {
	if _, ok := _c.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`ent: missing required field "InvoiceLine.invoice_id"`)}
	}
	if _, ok := _c.mutation.EnrollmentID(); !ok {
		return &ValidationError{Name: "enrollment_id", err: errors.New(`ent: missing required field "InvoiceLine.enrollment_id"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "InvoiceLine.description"`)}
	}
	if _, ok := _c.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`ent: missing required field "InvoiceLine.qty"`)}
	}
	if _, ok := _c.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`ent: missing required field "InvoiceLine.unit_price"`)}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "InvoiceLine.amount"`)}
	}
	if len(_c.mutation.InvoiceIDs()) == 0 {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "InvoiceLine.invoice"`)}
	}
	if len(_c.mutation.EnrollmentIDs()) == 0 {
		return &ValidationError{Name: "enrollment", err: errors.New(`ent: missing required edge "InvoiceLine.enrollment"`)}
	}
	return nil
}

func (_c *InvoiceLineCreate) sqlSave(ctx context.Context) (*InvoiceLine, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *InvoiceLineCreate) createSpec() (*InvoiceLine, *sqlgraph.CreateSpec) {
	var (
		_node = &InvoiceLine{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(invoiceline.Table, sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(invoiceline.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Qty(); ok {
		_spec.SetField(invoiceline.FieldQty, field.TypeInt, value)
		_node.Qty = value
	}
	if value, ok := _c.mutation.UnitPrice(); ok {
		_spec.SetField(invoiceline.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(invoiceline.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if nodes := _c.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.InvoiceTable,
			Columns: []string{invoiceline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoiceline.EnrollmentTable,
			Columns: []string{invoiceline.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnrollmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvoiceLineCreateBulk is the builder for creating many InvoiceLine entities in bulk.
type InvoiceLineCreateBulk struct {
	config
	err      error
	builders []*InvoiceLineCreate
}

// Save creates the InvoiceLine entities in the database.
func (_c *InvoiceLineCreateBulk) Save(ctx context.Context) ([]*InvoiceLine, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*InvoiceLine, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *InvoiceLineCreateBulk) SaveX(ctx context.Context) []*InvoiceLine {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InvoiceLineCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InvoiceLineCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/priceoverride"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PriceOverrideCreate is the builder for creating a PriceOverride entity.
type PriceOverrideCreate struct {
	config
	mutation *PriceOverrideMutation
	hooks    []Hook
}

// SetEnrollmentID sets the "enrollment_id" field.
func (_c *PriceOverrideCreate) SetEnrollmentID(v int) *PriceOverrideCreate {
	_c.mutation.SetEnrollmentID(v)
	return _c
}

// SetValidFrom sets the "valid_from" field.
func (_c *PriceOverrideCreate) SetValidFrom(v time.Time) *PriceOverrideCreate {
	_c.mutation.SetValidFrom(v)
	return _c
}

// SetValidTo sets the "valid_to" field.
func (_c *PriceOverrideCreate) SetValidTo(v time.Time) *PriceOverrideCreate {
	_c.mutation.SetValidTo(v)
	return _c
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (_c *PriceOverrideCreate) SetNillableValidTo(v *time.Time) *PriceOverrideCreate {
	if v != nil {
		_c.SetValidTo(*v)
	}
	return _c
}

// SetLessonPrice sets the "lesson_price" field.
func (_c *PriceOverrideCreate) SetLessonPrice(v float64) *PriceOverrideCreate {
	_c.mutation.SetLessonPrice(v)
	return _c
}

// SetNillableLessonPrice sets the "lesson_price" field if the given value is not nil.
func (_c *PriceOverrideCreate) SetNillableLessonPrice(v *float64) *PriceOverrideCreate {
	if v != nil {
		_c.SetLessonPrice(*v)
	}
	return _c
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (_c *PriceOverrideCreate) SetSubscriptionPrice(v float64) *PriceOverrideCreate {
	_c.mutation.SetSubscriptionPrice(v)
	return _c
}

// SetNillableSubscriptionPrice sets the "subscription_price" field if the given value is not nil.
func (_c *PriceOverrideCreate) SetNillableSubscriptionPrice(v *float64) *PriceOverrideCreate {
	if v != nil {
		_c.SetSubscriptionPrice(*v)
	}
	return _c
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (_c *PriceOverrideCreate) SetEnrollment(v *Enrollment) *PriceOverrideCreate {
	return _c.SetEnrollmentID(v.ID)
}

// Mutation returns the PriceOverrideMutation object of the builder.
func (_c *PriceOverrideCreate) Mutation() *PriceOverrideMutation {
	return _c.mutation
}

// Save creates the PriceOverride in the database.
func (_c *PriceOverrideCreate) Save(ctx context.Context) (*PriceOverride, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PriceOverrideCreate) SaveX(ctx context.Context) *PriceOverride {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PriceOverrideCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PriceOverrideCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PriceOverrideCreate) check() error {
	if _, ok := _c.mutation.EnrollmentID(); !ok {
		return &ValidationError{Name: "enrollment_id", err: errors.New(`ent: missing required field "PriceOverride.enrollment_id"`)}
	}
	if _, ok := _c.mutation.ValidFrom(); !ok {
		return &ValidationError{Name: "valid_from", err: errors.New(`ent: missing required field "PriceOverride.valid_from"`)}
	}
	if len(_c.mutation.EnrollmentIDs()) == 0 {
		return &ValidationError{Name: "enrollment", err: errors.New(`ent: missing required edge "PriceOverride.enrollment"`)}
	}
	return nil
}

func (_c *PriceOverrideCreate) sqlSave(ctx context.Context) (*PriceOverride, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PriceOverrideCreate) createSpec() (*PriceOverride, *sqlgraph.CreateSpec) {
	var (
		_node = &PriceOverride{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(priceoverride.Table, sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ValidFrom(); ok {
		_spec.SetField(priceoverride.FieldValidFrom, field.TypeTime, value)
		_node.ValidFrom = value
	}
	if value, ok := _c.mutation.ValidTo(); ok {
		_spec.SetField(priceoverride.FieldValidTo, field.TypeTime, value)
		_node.ValidTo = &value
	}
	if value, ok := _c.mutation.LessonPrice(); ok {
		_spec.SetField(priceoverride.FieldLessonPrice, field.TypeFloat64, value)
		_node.LessonPrice = &value
	}
	if value, ok := _c.mutation.SubscriptionPrice(); ok {
		_spec.SetField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64, value)
		_node.SubscriptionPrice = &value
	}
	if nodes := _c.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   priceoverride.EnrollmentTable,
			Columns: []string{priceoverride.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnrollmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PriceOverrideCreateBulk is the builder for creating many PriceOverride entities in bulk.
type PriceOverrideCreateBulk struct {
	config
	err      error
	builders []*PriceOverrideCreate
}

// Save creates the PriceOverride entities in the database.
func (_c *PriceOverrideCreateBulk) Save(ctx context.Context) ([]*PriceOverride, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PriceOverride, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PriceOverrideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PriceOverrideCreateBulk) SaveX(ctx context.Context) []*PriceOverride {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PriceOverrideCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PriceOverrideCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/attendancemonth"
	"langschool/ent/course"
	"langschool/ent/enrollment"
	"langschool/ent/invoice"
	"langschool/ent/invoiceline"
	"langschool/ent/predicate"
	"langschool/ent/priceoverride"
	"langschool/ent/settings"
	"langschool/ent/student"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttendanceMonth = "AttendanceMonth"
	TypeCourse          = "Course"
	TypeEnrollment      = "Enrollment"
	TypeInvoice         = "Invoice"
	TypeInvoiceLine     = "InvoiceLine"
	TypePriceOverride   = "PriceOverride"
	TypeSettings        = "Settings"
	TypeStudent         = "Student"
)

// AttendanceMonthMutation represents an operation that mutates the AttendanceMonth nodes in the graph.
type AttendanceMonthMutation struct {
	config
	op               Op
	typ              string
	id               *int
	student_id       *int
	addstudent_id    *int
	course_id        *int
	addcourse_id     *int
	year             *int
	addyear          *int
	month            *int
	addmonth         *int
	lessons_count    *int
	addlessons_count *int
	locked           *bool
	source           *attendancemonth.Source
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*AttendanceMonth, error)
	predicates       []predicate.AttendanceMonth
}

var _ ent.Mutation = (*AttendanceMonthMutation)(nil)

// attendancemonthOption allows management of the mutation configuration using functional options.
type attendancemonthOption func(*AttendanceMonthMutation)

// newAttendanceMonthMutation creates new mutation for the AttendanceMonth entity.
func newAttendanceMonthMutation(c config, op Op, opts ...attendancemonthOption) *AttendanceMonthMutation {
	m := &AttendanceMonthMutation{
		config:        c,
		op:            op,
		typ:           TypeAttendanceMonth,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttendanceMonthID sets the ID field of the mutation.
func withAttendanceMonthID(id int) attendancemonthOption {
	return func(m *AttendanceMonthMutation) {
		var (
			err   error
			once  sync.Once
			value *AttendanceMonth
		)
		m.oldValue = func(ctx context.Context) (*AttendanceMonth, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttendanceMonth.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttendanceMonth sets the old AttendanceMonth of the mutation.
func withAttendanceMonth(node *AttendanceMonth) attendancemonthOption {
	return func(m *AttendanceMonthMutation) {
		m.oldValue = func(context.Context) (*AttendanceMonth, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttendanceMonthMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttendanceMonthMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttendanceMonthMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttendanceMonthMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttendanceMonth.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *AttendanceMonthMutation) SetStudentID(i int) {
	m.student_id = &i
	m.addstudent_id = nil
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *AttendanceMonthMutation) StudentID() (r int, exists bool) {
	v := m.student_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldStudentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// AddStudentID adds i to the "student_id" field.
func (m *AttendanceMonthMutation) AddStudentID(i int) {
	if m.addstudent_id != nil {
		*m.addstudent_id += i
	} else {
		m.addstudent_id = &i
	}
}

// AddedStudentID returns the value that was added to the "student_id" field in this mutation.
func (m *AttendanceMonthMutation) AddedStudentID() (r int, exists bool) {
	v := m.addstudent_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *AttendanceMonthMutation) ResetStudentID() {
	m.student_id = nil
	m.addstudent_id = nil
}

// SetCourseID sets the "course_id" field.
func (m *AttendanceMonthMutation) SetCourseID(i int) {
	m.course_id = &i
	m.addcourse_id = nil
}

// CourseID returns the value of the "course_id" field in the mutation.
func (m *AttendanceMonthMutation) CourseID() (r int, exists bool) {
	v := m.course_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCourseID returns the old "course_id" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldCourseID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCourseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCourseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCourseID: %w", err)
	}
	return oldValue.CourseID, nil
}

// AddCourseID adds i to the "course_id" field.
func (m *AttendanceMonthMutation) AddCourseID(i int) {
	if m.addcourse_id != nil {
		*m.addcourse_id += i
	} else {
		m.addcourse_id = &i
	}
}

// AddedCourseID returns the value that was added to the "course_id" field in this mutation.
func (m *AttendanceMonthMutation) AddedCourseID() (r int, exists bool) {
	v := m.addcourse_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCourseID resets all changes to the "course_id" field.
func (m *AttendanceMonthMutation) ResetCourseID() {
	m.course_id = nil
	m.addcourse_id = nil
}

// SetYear sets the "year" field.
func (m *AttendanceMonthMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *AttendanceMonthMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *AttendanceMonthMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *AttendanceMonthMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *AttendanceMonthMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetMonth sets the "month" field.
func (m *AttendanceMonthMutation) SetMonth(i int) {
	m.month = &i
	m.addmonth = nil
}

// Month returns the value of the "month" field in the mutation.
func (m *AttendanceMonthMutation) Month() (r int, exists bool) {
	v := m.month
	if v == nil {
		return
	}
	return *v, true
}

// OldMonth returns the old "month" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldMonth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonth: %w", err)
	}
	return oldValue.Month, nil
}

// AddMonth adds i to the "month" field.
func (m *AttendanceMonthMutation) AddMonth(i int) {
	if m.addmonth != nil {
		*m.addmonth += i
	} else {
		m.addmonth = &i
	}
}

// AddedMonth returns the value that was added to the "month" field in this mutation.
func (m *AttendanceMonthMutation) AddedMonth() (r int, exists bool) {
	v := m.addmonth
	if v == nil {
		return
	}
	return *v, true
}

// ResetMonth resets all changes to the "month" field.
func (m *AttendanceMonthMutation) ResetMonth() {
	m.month = nil
	m.addmonth = nil
}

// SetLessonsCount sets the "lessons_count" field.
func (m *AttendanceMonthMutation) SetLessonsCount(i int) {
	m.lessons_count = &i
	m.addlessons_count = nil
}

// LessonsCount returns the value of the "lessons_count" field in the mutation.
func (m *AttendanceMonthMutation) LessonsCount() (r int, exists bool) {
	v := m.lessons_count
	if v == nil {
		return
	}
	return *v, true
}

// OldLessonsCount returns the old "lessons_count" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldLessonsCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLessonsCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLessonsCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLessonsCount: %w", err)
	}
	return oldValue.LessonsCount, nil
}

// AddLessonsCount adds i to the "lessons_count" field.
func (m *AttendanceMonthMutation) AddLessonsCount(i int) {
	if m.addlessons_count != nil {
		*m.addlessons_count += i
	} else {
		m.addlessons_count = &i
	}
}

// AddedLessonsCount returns the value that was added to the "lessons_count" field in this mutation.
func (m *AttendanceMonthMutation) AddedLessonsCount() (r int, exists bool) {
	v := m.addlessons_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetLessonsCount resets all changes to the "lessons_count" field.
func (m *AttendanceMonthMutation) ResetLessonsCount() {
	m.lessons_count = nil
	m.addlessons_count = nil
}

// SetLocked sets the "locked" field.
func (m *AttendanceMonthMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *AttendanceMonthMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ResetLocked resets all changes to the "locked" field.
func (m *AttendanceMonthMutation) ResetLocked() {
	m.locked = nil
}

// SetSource sets the "source" field.
func (m *AttendanceMonthMutation) SetSource(a attendancemonth.Source) {
	m.source = &a
}

// Source returns the value of the "source" field in the mutation.
func (m *AttendanceMonthMutation) Source() (r attendancemonth.Source, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the AttendanceMonth entity.
// If the AttendanceMonth object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMonthMutation) OldSource(ctx context.Context) (v attendancemonth.Source, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *AttendanceMonthMutation) ResetSource() {
	m.source = nil
}

// Where appends a list predicates to the AttendanceMonthMutation builder.
func (m *AttendanceMonthMutation) Where(ps ...predicate.AttendanceMonth) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttendanceMonthMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttendanceMonthMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttendanceMonth, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttendanceMonthMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttendanceMonthMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttendanceMonth).
func (m *AttendanceMonthMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttendanceMonthMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.student_id != nil {
		fields = append(fields, attendancemonth.FieldStudentID)
	}
	if m.course_id != nil {
		fields = append(fields, attendancemonth.FieldCourseID)
	}
	if m.year != nil {
		fields = append(fields, attendancemonth.FieldYear)
	}
	if m.month != nil {
		fields = append(fields, attendancemonth.FieldMonth)
	}
	if m.lessons_count != nil {
		fields = append(fields, attendancemonth.FieldLessonsCount)
	}
	if m.locked != nil {
		fields = append(fields, attendancemonth.FieldLocked)
	}
	if m.source != nil {
		fields = append(fields, attendancemonth.FieldSource)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttendanceMonthMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attendancemonth.FieldStudentID:
		return m.StudentID()
	case attendancemonth.FieldCourseID:
		return m.CourseID()
	case attendancemonth.FieldYear:
		return m.Year()
	case attendancemonth.FieldMonth:
		return m.Month()
	case attendancemonth.FieldLessonsCount:
		return m.LessonsCount()
	case attendancemonth.FieldLocked:
		return m.Locked()
	case attendancemonth.FieldSource:
		return m.Source()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttendanceMonthMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attendancemonth.FieldStudentID:
		return m.OldStudentID(ctx)
	case attendancemonth.FieldCourseID:
		return m.OldCourseID(ctx)
	case attendancemonth.FieldYear:
		return m.OldYear(ctx)
	case attendancemonth.FieldMonth:
		return m.OldMonth(ctx)
	case attendancemonth.FieldLessonsCount:
		return m.OldLessonsCount(ctx)
	case attendancemonth.FieldLocked:
		return m.OldLocked(ctx)
	case attendancemonth.FieldSource:
		return m.OldSource(ctx)
	}
	return nil, fmt.Errorf("unknown AttendanceMonth field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendanceMonthMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attendancemonth.FieldStudentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case attendancemonth.FieldCourseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCourseID(v)
		return nil
	case attendancemonth.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case attendancemonth.FieldMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonth(v)
		return nil
	case attendancemonth.FieldLessonsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLessonsCount(v)
		return nil
	case attendancemonth.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case attendancemonth.FieldSource:
		v, ok := value.(attendancemonth.Source)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	}
	return fmt.Errorf("unknown AttendanceMonth field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttendanceMonthMutation) AddedFields() []string {
	var fields []string
	if m.addstudent_id != nil {
		fields = append(fields, attendancemonth.FieldStudentID)
	}
	if m.addcourse_id != nil {
		fields = append(fields, attendancemonth.FieldCourseID)
	}
	if m.addyear != nil {
		fields = append(fields, attendancemonth.FieldYear)
	}
	if m.addmonth != nil {
		fields = append(fields, attendancemonth.FieldMonth)
	}
	if m.addlessons_count != nil {
		fields = append(fields, attendancemonth.FieldLessonsCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttendanceMonthMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attendancemonth.FieldStudentID:
		return m.AddedStudentID()
	case attendancemonth.FieldCourseID:
		return m.AddedCourseID()
	case attendancemonth.FieldYear:
		return m.AddedYear()
	case attendancemonth.FieldMonth:
		return m.AddedMonth()
	case attendancemonth.FieldLessonsCount:
		return m.AddedLessonsCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendanceMonthMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attendancemonth.FieldStudentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStudentID(v)
		return nil
	case attendancemonth.FieldCourseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCourseID(v)
		return nil
	case attendancemonth.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	case attendancemonth.FieldMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMonth(v)
		return nil
	case attendancemonth.FieldLessonsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLessonsCount(v)
		return nil
	}
	return fmt.Errorf("unknown AttendanceMonth numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttendanceMonthMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttendanceMonthMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttendanceMonthMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttendanceMonth nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttendanceMonthMutation) ResetField(name string) error {
	switch name {
	case attendancemonth.FieldStudentID:
		m.ResetStudentID()
		return nil
	case attendancemonth.FieldCourseID:
		m.ResetCourseID()
		return nil
	case attendancemonth.FieldYear:
		m.ResetYear()
		return nil
	case attendancemonth.FieldMonth:
		m.ResetMonth()
		return nil
	case attendancemonth.FieldLessonsCount:
		m.ResetLessonsCount()
		return nil
	case attendancemonth.FieldLocked:
		m.ResetLocked()
		return nil
	case attendancemonth.FieldSource:
		m.ResetSource()
		return nil
	}
	return fmt.Errorf("unknown AttendanceMonth field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttendanceMonthMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttendanceMonthMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttendanceMonthMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttendanceMonthMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttendanceMonthMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttendanceMonthMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttendanceMonthMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AttendanceMonth unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttendanceMonthMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AttendanceMonth edge %s", name)
}

// CourseMutation represents an operation that mutates the Course nodes in the graph.
type CourseMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	_type                 *course.Type
	lesson_price          *float64
	addlesson_price       *float64
	subscription_price    *float64
	addsubscription_price *float64
	schedule_json         *string
	is_active             *bool
	clearedFields         map[string]struct{}
	enrollments           map[int]struct{}
	removedenrollments    map[int]struct{}
	clearedenrollments    bool
	done                  bool
	oldValue              func(context.Context) (*Course, error)
	predicates            []predicate.Course
}

var _ ent.Mutation = (*CourseMutation)(nil)

// courseOption allows management of the mutation configuration using functional options.
type courseOption func(*CourseMutation)

// newCourseMutation creates new mutation for the Course entity.
func newCourseMutation(c config, op Op, opts ...courseOption) *CourseMutation {
	m := &CourseMutation{
		config:        c,
		op:            op,
		typ:           TypeCourse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseID sets the ID field of the mutation.
func withCourseID(id int) courseOption {
	return func(m *CourseMutation) {
		var (
			err   error
			once  sync.Once
			value *Course
		)
		m.oldValue = func(ctx context.Context) (*Course, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Course.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourse sets the old Course of the mutation.
func withCourse(node *Course) courseOption {
	return func(m *CourseMutation) {
		m.oldValue = func(context.Context) (*Course, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Course.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CourseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CourseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CourseMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *CourseMutation) SetType(c course.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *CourseMutation) GetType() (r course.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldType(ctx context.Context) (v course.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CourseMutation) ResetType() {
	m._type = nil
}

// SetLessonPrice sets the "lesson_price" field.
func (m *CourseMutation) SetLessonPrice(f float64) {
	m.lesson_price = &f
	m.addlesson_price = nil
}

// LessonPrice returns the value of the "lesson_price" field in the mutation.
func (m *CourseMutation) LessonPrice() (r float64, exists bool) {
	v := m.lesson_price
	if v == nil {
		return
	}
	return *v, true
}

// OldLessonPrice returns the old "lesson_price" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldLessonPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLessonPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLessonPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLessonPrice: %w", err)
	}
	return oldValue.LessonPrice, nil
}

// AddLessonPrice adds f to the "lesson_price" field.
func (m *CourseMutation) AddLessonPrice(f float64) {
	if m.addlesson_price != nil {
		*m.addlesson_price += f
	} else {
		m.addlesson_price = &f
	}
}

// AddedLessonPrice returns the value that was added to the "lesson_price" field in this mutation.
func (m *CourseMutation) AddedLessonPrice() (r float64, exists bool) {
	v := m.addlesson_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetLessonPrice resets all changes to the "lesson_price" field.
func (m *CourseMutation) ResetLessonPrice() {
	m.lesson_price = nil
	m.addlesson_price = nil
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (m *CourseMutation) SetSubscriptionPrice(f float64) {
	m.subscription_price = &f
	m.addsubscription_price = nil
}

// SubscriptionPrice returns the value of the "subscription_price" field in the mutation.
func (m *CourseMutation) SubscriptionPrice() (r float64, exists bool) {
	v := m.subscription_price
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionPrice returns the old "subscription_price" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldSubscriptionPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionPrice: %w", err)
	}
	return oldValue.SubscriptionPrice, nil
}

// AddSubscriptionPrice adds f to the "subscription_price" field.
func (m *CourseMutation) AddSubscriptionPrice(f float64) {
	if m.addsubscription_price != nil {
		*m.addsubscription_price += f
	} else {
		m.addsubscription_price = &f
	}
}

// AddedSubscriptionPrice returns the value that was added to the "subscription_price" field in this mutation.
func (m *CourseMutation) AddedSubscriptionPrice() (r float64, exists bool) {
	v := m.addsubscription_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubscriptionPrice resets all changes to the "subscription_price" field.
func (m *CourseMutation) ResetSubscriptionPrice() {
	m.subscription_price = nil
	m.addsubscription_price = nil
}

// SetScheduleJSON sets the "schedule_json" field.
func (m *CourseMutation) SetScheduleJSON(s string) {
	m.schedule_json = &s
}

// ScheduleJSON returns the value of the "schedule_json" field in the mutation.
func (m *CourseMutation) ScheduleJSON() (r string, exists bool) {
	v := m.schedule_json
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduleJSON returns the old "schedule_json" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldScheduleJSON(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduleJSON is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduleJSON requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduleJSON: %w", err)
	}
	return oldValue.ScheduleJSON, nil
}

// ResetScheduleJSON resets all changes to the "schedule_json" field.
func (m *CourseMutation) ResetScheduleJSON() {
	m.schedule_json = nil
}

// SetIsActive sets the "is_active" field.
func (m *CourseMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *CourseMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *CourseMutation) ResetIsActive() {
	m.is_active = nil
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by ids.
func (m *CourseMutation) AddEnrollmentIDs(ids ...int) {
	if m.enrollments == nil {
		m.enrollments = make(map[int]struct{})
	}
	for i := range ids {
		m.enrollments[ids[i]] = struct{}{}
	}
}

// ClearEnrollments clears the "enrollments" edge to the Enrollment entity.
func (m *CourseMutation) ClearEnrollments() {
	m.clearedenrollments = true
}

// EnrollmentsCleared reports if the "enrollments" edge to the Enrollment entity was cleared.
func (m *CourseMutation) EnrollmentsCleared() bool {
	return m.clearedenrollments
}

// RemoveEnrollmentIDs removes the "enrollments" edge to the Enrollment entity by IDs.
func (m *CourseMutation) RemoveEnrollmentIDs(ids ...int) {
	if m.removedenrollments == nil {
		m.removedenrollments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.enrollments, ids[i])
		m.removedenrollments[ids[i]] = struct{}{}
	}
}

// RemovedEnrollments returns the removed IDs of the "enrollments" edge to the Enrollment entity.
func (m *CourseMutation) RemovedEnrollmentsIDs() (ids []int) {
	for id := range m.removedenrollments {
		ids = append(ids, id)
	}
	return
}

// EnrollmentsIDs returns the "enrollments" edge IDs in the mutation.
func (m *CourseMutation) EnrollmentsIDs() (ids []int) {
	for id := range m.enrollments {
		ids = append(ids, id)
	}
	return
}

// ResetEnrollments resets all changes to the "enrollments" edge.
func (m *CourseMutation) ResetEnrollments() {
	m.enrollments = nil
	m.clearedenrollments = false
	m.removedenrollments = nil
}

// Where appends a list predicates to the CourseMutation builder.
func (m *CourseMutation) Where(ps ...predicate.Course) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Course, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Course).
func (m *CourseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, course.FieldName)
	}
	if m._type != nil {
		fields = append(fields, course.FieldType)
	}
	if m.lesson_price != nil {
		fields = append(fields, course.FieldLessonPrice)
	}
	if m.subscription_price != nil {
		fields = append(fields, course.FieldSubscriptionPrice)
	}
	if m.schedule_json != nil {
		fields = append(fields, course.FieldScheduleJSON)
	}
	if m.is_active != nil {
		fields = append(fields, course.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case course.FieldName:
		return m.Name()
	case course.FieldType:
		return m.GetType()
	case course.FieldLessonPrice:
		return m.LessonPrice()
	case course.FieldSubscriptionPrice:
		return m.SubscriptionPrice()
	case course.FieldScheduleJSON:
		return m.ScheduleJSON()
	case course.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case course.FieldName:
		return m.OldName(ctx)
	case course.FieldType:
		return m.OldType(ctx)
	case course.FieldLessonPrice:
		return m.OldLessonPrice(ctx)
	case course.FieldSubscriptionPrice:
		return m.OldSubscriptionPrice(ctx)
	case course.FieldScheduleJSON:
		return m.OldScheduleJSON(ctx)
	case course.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown Course field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case course.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case course.FieldType:
		v, ok := value.(course.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case course.FieldLessonPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLessonPrice(v)
		return nil
	case course.FieldSubscriptionPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionPrice(v)
		return nil
	case course.FieldScheduleJSON:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduleJSON(v)
		return nil
	case course.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseMutation) AddedFields() []string {
	var fields []string
	if m.addlesson_price != nil {
		fields = append(fields, course.FieldLessonPrice)
	}
	if m.addsubscription_price != nil {
		fields = append(fields, course.FieldSubscriptionPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case course.FieldLessonPrice:
		return m.AddedLessonPrice()
	case course.FieldSubscriptionPrice:
		return m.AddedSubscriptionPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case course.FieldLessonPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLessonPrice(v)
		return nil
	case course.FieldSubscriptionPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubscriptionPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Course numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Course nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseMutation) ResetField(name string) error {
	switch name {
	case course.FieldName:
		m.ResetName()
		return nil
	case course.FieldType:
		m.ResetType()
		return nil
	case course.FieldLessonPrice:
		m.ResetLessonPrice()
		return nil
	case course.FieldSubscriptionPrice:
		m.ResetSubscriptionPrice()
		return nil
	case course.FieldScheduleJSON:
		m.ResetScheduleJSON()
		return nil
	case course.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.enrollments != nil {
		edges = append(edges, course.EdgeEnrollments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.enrollments))
		for id := range m.enrollments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedenrollments != nil {
		edges = append(edges, course.EdgeEnrollments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.removedenrollments))
		for id := range m.removedenrollments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedenrollments {
		edges = append(edges, course.EdgeEnrollments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseMutation) EdgeCleared(name string) bool {
	switch name {
	case course.EdgeEnrollments:
		return m.clearedenrollments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Course unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseMutation) ResetEdge(name string) error {
	switch name {
	case course.EdgeEnrollments:
		m.ResetEnrollments()
		return nil
	}
	return fmt.Errorf("unknown Course edge %s", name)
}

// EnrollmentMutation represents an operation that mutates the Enrollment nodes in the graph.
type EnrollmentMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	billing_mode           *enrollment.BillingMode
	start_date             *time.Time
	end_date               *time.Time
	discount_pct           *float64
	adddiscount_pct        *float64
	note                   *string
	clearedFields          map[string]struct{}
	student                *int
	clearedstudent         bool
	course                 *int
	clearedcourse          bool
	invoice_lines          map[int]struct{}
	removedinvoice_lines   map[int]struct{}
	clearedinvoice_lines   bool
	price_overrides        map[int]struct{}
	removedprice_overrides map[int]struct{}
	clearedprice_overrides bool
	done                   bool
	oldValue               func(context.Context) (*Enrollment, error)
	predicates             []predicate.Enrollment
}

var _ ent.Mutation = (*EnrollmentMutation)(nil)

// enrollmentOption allows management of the mutation configuration using functional options.
type enrollmentOption func(*EnrollmentMutation)

// newEnrollmentMutation creates new mutation for the Enrollment entity.
func newEnrollmentMutation(c config, op Op, opts ...enrollmentOption) *EnrollmentMutation {
	m := &EnrollmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEnrollment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnrollmentID sets the ID field of the mutation.
func withEnrollmentID(id int) enrollmentOption {
	return func(m *EnrollmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Enrollment
		)
		m.oldValue = func(ctx context.Context) (*Enrollment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Enrollment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnrollment sets the old Enrollment of the mutation.
func withEnrollment(node *Enrollment) enrollmentOption {
	return func(m *EnrollmentMutation) {
		m.oldValue = func(context.Context) (*Enrollment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnrollmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnrollmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnrollmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnrollmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Enrollment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *EnrollmentMutation) SetStudentID(i int) {
	m.student = &i
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *EnrollmentMutation) StudentID() (r int, exists bool) {
	v := m.student
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldStudentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *EnrollmentMutation) ResetStudentID() {
	m.student = nil
}

// SetCourseID sets the "course_id" field.
func (m *EnrollmentMutation) SetCourseID(i int) {
	m.course = &i
}

// CourseID returns the value of the "course_id" field in the mutation.
func (m *EnrollmentMutation) CourseID() (r int, exists bool) {
	v := m.course
	if v == nil {
		return
	}
	return *v, true
}

// OldCourseID returns the old "course_id" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldCourseID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCourseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCourseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCourseID: %w", err)
	}
	return oldValue.CourseID, nil
}

// ResetCourseID resets all changes to the "course_id" field.
func (m *EnrollmentMutation) ResetCourseID() {
	m.course = nil
}

// SetBillingMode sets the "billing_mode" field.
func (m *EnrollmentMutation) SetBillingMode(em enrollment.BillingMode) {
	m.billing_mode = &em
}

// BillingMode returns the value of the "billing_mode" field in the mutation.
func (m *EnrollmentMutation) BillingMode() (r enrollment.BillingMode, exists bool) {
	v := m.billing_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingMode returns the old "billing_mode" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldBillingMode(ctx context.Context) (v enrollment.BillingMode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingMode: %w", err)
	}
	return oldValue.BillingMode, nil
}

// ResetBillingMode resets all changes to the "billing_mode" field.
func (m *EnrollmentMutation) ResetBillingMode() {
	m.billing_mode = nil
}

// SetStartDate sets the "start_date" field.
func (m *EnrollmentMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *EnrollmentMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *EnrollmentMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *EnrollmentMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *EnrollmentMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *EnrollmentMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[enrollment.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *EnrollmentMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[enrollment.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *EnrollmentMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, enrollment.FieldEndDate)
}

// SetDiscountPct sets the "discount_pct" field.
func (m *EnrollmentMutation) SetDiscountPct(f float64) {
	m.discount_pct = &f
	m.adddiscount_pct = nil
}

// DiscountPct returns the value of the "discount_pct" field in the mutation.
func (m *EnrollmentMutation) DiscountPct() (r float64, exists bool) {
	v := m.discount_pct
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountPct returns the old "discount_pct" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldDiscountPct(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountPct is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountPct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountPct: %w", err)
	}
	return oldValue.DiscountPct, nil
}

// AddDiscountPct adds f to the "discount_pct" field.
func (m *EnrollmentMutation) AddDiscountPct(f float64) {
	if m.adddiscount_pct != nil {
		*m.adddiscount_pct += f
	} else {
		m.adddiscount_pct = &f
	}
}

// AddedDiscountPct returns the value that was added to the "discount_pct" field in this mutation.
func (m *EnrollmentMutation) AddedDiscountPct() (r float64, exists bool) {
	v := m.adddiscount_pct
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscountPct resets all changes to the "discount_pct" field.
func (m *EnrollmentMutation) ResetDiscountPct() {
	m.discount_pct = nil
	m.adddiscount_pct = nil
}

// SetNote sets the "note" field.
func (m *EnrollmentMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *EnrollmentMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *EnrollmentMutation) ResetNote() {
	m.note = nil
}

// ClearStudent clears the "student" edge to the Student entity.
func (m *EnrollmentMutation) ClearStudent() {
	m.clearedstudent = true
	m.clearedFields[enrollment.FieldStudentID] = struct{}{}
}

// StudentCleared reports if the "student" edge to the Student entity was cleared.
func (m *EnrollmentMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *EnrollmentMutation) StudentIDs() (ids []int) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *EnrollmentMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *EnrollmentMutation) ClearCourse() {
	m.clearedcourse = true
	m.clearedFields[enrollment.FieldCourseID] = struct{}{}
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *EnrollmentMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *EnrollmentMutation) CourseIDs() (ids []int) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *EnrollmentMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// AddInvoiceLineIDs adds the "invoice_lines" edge to the InvoiceLine entity by ids.
func (m *EnrollmentMutation) AddInvoiceLineIDs(ids ...int) {
	if m.invoice_lines == nil {
		m.invoice_lines = make(map[int]struct{})
	}
	for i := range ids {
		m.invoice_lines[ids[i]] = struct{}{}
	}
}

// ClearInvoiceLines clears the "invoice_lines" edge to the InvoiceLine entity.
func (m *EnrollmentMutation) ClearInvoiceLines() {
	m.clearedinvoice_lines = true
}

// InvoiceLinesCleared reports if the "invoice_lines" edge to the InvoiceLine entity was cleared.
func (m *EnrollmentMutation) InvoiceLinesCleared() bool {
	return m.clearedinvoice_lines
}

// RemoveInvoiceLineIDs removes the "invoice_lines" edge to the InvoiceLine entity by IDs.
func (m *EnrollmentMutation) RemoveInvoiceLineIDs(ids ...int) {
	if m.removedinvoice_lines == nil {
		m.removedinvoice_lines = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.invoice_lines, ids[i])
		m.removedinvoice_lines[ids[i]] = struct{}{}
	}
}

// RemovedInvoiceLines returns the removed IDs of the "invoice_lines" edge to the InvoiceLine entity.
func (m *EnrollmentMutation) RemovedInvoiceLinesIDs() (ids []int) {
	for id := range m.removedinvoice_lines {
		ids = append(ids, id)
	}
	return
}

// InvoiceLinesIDs returns the "invoice_lines" edge IDs in the mutation.
func (m *EnrollmentMutation) InvoiceLinesIDs() (ids []int) {
	for id := range m.invoice_lines {
		ids = append(ids, id)
	}
	return
}

// ResetInvoiceLines resets all changes to the "invoice_lines" edge.
func (m *EnrollmentMutation) ResetInvoiceLines() {
	m.invoice_lines = nil
	m.clearedinvoice_lines = false
	m.removedinvoice_lines = nil
}

// AddPriceOverrideIDs adds the "price_overrides" edge to the PriceOverride entity by ids.
func (m *EnrollmentMutation) AddPriceOverrideIDs(ids ...int) {
	if m.price_overrides == nil {
		m.price_overrides = make(map[int]struct{})
	}
	for i := range ids {
		m.price_overrides[ids[i]] = struct{}{}
	}
}

// ClearPriceOverrides clears the "price_overrides" edge to the PriceOverride entity.
func (m *EnrollmentMutation) ClearPriceOverrides() {
	m.clearedprice_overrides = true
}

// PriceOverridesCleared reports if the "price_overrides" edge to the PriceOverride entity was cleared.
func (m *EnrollmentMutation) PriceOverridesCleared() bool {
	return m.clearedprice_overrides
}

// RemovePriceOverrideIDs removes the "price_overrides" edge to the PriceOverride entity by IDs.
func (m *EnrollmentMutation) RemovePriceOverrideIDs(ids ...int) {
	if m.removedprice_overrides == nil {
		m.removedprice_overrides = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.price_overrides, ids[i])
		m.removedprice_overrides[ids[i]] = struct{}{}
	}
}

// RemovedPriceOverrides returns the removed IDs of the "price_overrides" edge to the PriceOverride entity.
func (m *EnrollmentMutation) RemovedPriceOverridesIDs() (ids []int) {
	for id := range m.removedprice_overrides {
		ids = append(ids, id)
	}
	return
}

// PriceOverridesIDs returns the "price_overrides" edge IDs in the mutation.
func (m *EnrollmentMutation) PriceOverridesIDs() (ids []int) {
	for id := range m.price_overrides {
		ids = append(ids, id)
	}
	return
}

// ResetPriceOverrides resets all changes to the "price_overrides" edge.
func (m *EnrollmentMutation) ResetPriceOverrides() {
	m.price_overrides = nil
	m.clearedprice_overrides = false
	m.removedprice_overrides = nil
}

// Where appends a list predicates to the EnrollmentMutation builder.
func (m *EnrollmentMutation) Where(ps ...predicate.Enrollment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnrollmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnrollmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Enrollment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnrollmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnrollmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Enrollment).
func (m *EnrollmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnrollmentMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.student != nil {
		fields = append(fields, enrollment.FieldStudentID)
	}
	if m.course != nil {
		fields = append(fields, enrollment.FieldCourseID)
	}
	if m.billing_mode != nil {
		fields = append(fields, enrollment.FieldBillingMode)
	}
	if m.start_date != nil {
		fields = append(fields, enrollment.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, enrollment.FieldEndDate)
	}
	if m.discount_pct != nil {
		fields = append(fields, enrollment.FieldDiscountPct)
	}
	if m.note != nil {
		fields = append(fields, enrollment.FieldNote)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnrollmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enrollment.FieldStudentID:
		return m.StudentID()
	case enrollment.FieldCourseID:
		return m.CourseID()
	case enrollment.FieldBillingMode:
		return m.BillingMode()
	case enrollment.FieldStartDate:
		return m.StartDate()
	case enrollment.FieldEndDate:
		return m.EndDate()
	case enrollment.FieldDiscountPct:
		return m.DiscountPct()
	case enrollment.FieldNote:
		return m.Note()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnrollmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enrollment.FieldStudentID:
		return m.OldStudentID(ctx)
	case enrollment.FieldCourseID:
		return m.OldCourseID(ctx)
	case enrollment.FieldBillingMode:
		return m.OldBillingMode(ctx)
	case enrollment.FieldStartDate:
		return m.OldStartDate(ctx)
	case enrollment.FieldEndDate:
		return m.OldEndDate(ctx)
	case enrollment.FieldDiscountPct:
		return m.OldDiscountPct(ctx)
	case enrollment.FieldNote:
		return m.OldNote(ctx)
	}
	return nil, fmt.Errorf("unknown Enrollment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnrollmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enrollment.FieldStudentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case enrollment.FieldCourseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCourseID(v)
		return nil
	case enrollment.FieldBillingMode:
		v, ok := value.(enrollment.BillingMode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingMode(v)
		return nil
	case enrollment.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case enrollment.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case enrollment.FieldDiscountPct:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountPct(v)
		return nil
	case enrollment.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	}
	return fmt.Errorf("unknown Enrollment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnrollmentMutation) AddedFields() []string {
	var fields []string
	if m.adddiscount_pct != nil {
		fields = append(fields, enrollment.FieldDiscountPct)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnrollmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enrollment.FieldDiscountPct:
		return m.AddedDiscountPct()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnrollmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enrollment.FieldDiscountPct:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscountPct(v)
		return nil
	}
	return fmt.Errorf("unknown Enrollment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnrollmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enrollment.FieldEndDate) {
		fields = append(fields, enrollment.FieldEndDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnrollmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnrollmentMutation) ClearField(name string) error {
	switch name {
	case enrollment.FieldEndDate:
		m.ClearEndDate()
		return nil
	}
	return fmt.Errorf("unknown Enrollment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnrollmentMutation) ResetField(name string) error {
	switch name {
	case enrollment.FieldStudentID:
		m.ResetStudentID()
		return nil
	case enrollment.FieldCourseID:
		m.ResetCourseID()
		return nil
	case enrollment.FieldBillingMode:
		m.ResetBillingMode()
		return nil
	case enrollment.FieldStartDate:
		m.ResetStartDate()
		return nil
	case enrollment.FieldEndDate:
		m.ResetEndDate()
		return nil
	case enrollment.FieldDiscountPct:
		m.ResetDiscountPct()
		return nil
	case enrollment.FieldNote:
		m.ResetNote()
		return nil
	}
	return fmt.Errorf("unknown Enrollment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnrollmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.student != nil {
		edges = append(edges, enrollment.EdgeStudent)
	}
	if m.course != nil {
		edges = append(edges, enrollment.EdgeCourse)
	}
	if m.invoice_lines != nil {
		edges = append(edges, enrollment.EdgeInvoiceLines)
	}
	if m.price_overrides != nil {
		edges = append(edges, enrollment.EdgePriceOverrides)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnrollmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enrollment.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	case enrollment.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	case enrollment.EdgeInvoiceLines:
		ids := make([]ent.Value, 0, len(m.invoice_lines))
		for id := range m.invoice_lines {
			ids = append(ids, id)
		}
		return ids
	case enrollment.EdgePriceOverrides:
		ids := make([]ent.Value, 0, len(m.price_overrides))
		for id := range m.price_overrides {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnrollmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedinvoice_lines != nil {
		edges = append(edges, enrollment.EdgeInvoiceLines)
	}
	if m.removedprice_overrides != nil {
		edges = append(edges, enrollment.EdgePriceOverrides)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnrollmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case enrollment.EdgeInvoiceLines:
		ids := make([]ent.Value, 0, len(m.removedinvoice_lines))
		for id := range m.removedinvoice_lines {
			ids = append(ids, id)
		}
		return ids
	case enrollment.EdgePriceOverrides:
		ids := make([]ent.Value, 0, len(m.removedprice_overrides))
		for id := range m.removedprice_overrides {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnrollmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedstudent {
		edges = append(edges, enrollment.EdgeStudent)
	}
	if m.clearedcourse {
		edges = append(edges, enrollment.EdgeCourse)
	}
	if m.clearedinvoice_lines {
		edges = append(edges, enrollment.EdgeInvoiceLines)
	}
	if m.clearedprice_overrides {
		edges = append(edges, enrollment.EdgePriceOverrides)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnrollmentMutation) EdgeCleared(name string) bool {
	switch name {
	case enrollment.EdgeStudent:
		return m.clearedstudent
	case enrollment.EdgeCourse:
		return m.clearedcourse
	case enrollment.EdgeInvoiceLines:
		return m.clearedinvoice_lines
	case enrollment.EdgePriceOverrides:
		return m.clearedprice_overrides
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnrollmentMutation) ClearEdge(name string) error {
	switch name {
	case enrollment.EdgeStudent:
		m.ClearStudent()
		return nil
	case enrollment.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown Enrollment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnrollmentMutation) ResetEdge(name string) error {
	switch name {
	case enrollment.EdgeStudent:
		m.ResetStudent()
		return nil
	case enrollment.EdgeCourse:
		m.ResetCourse()
		return nil
	case enrollment.EdgeInvoiceLines:
		m.ResetInvoiceLines()
		return nil
	case enrollment.EdgePriceOverrides:
		m.ResetPriceOverrides()
		return nil
	}
	return fmt.Errorf("unknown Enrollment edge %s", name)
}

// InvoiceMutation represents an operation that mutates the Invoice nodes in the graph.
type InvoiceMutation struct {
	config
	op              Op
	typ             string
	id              *int
	period_year     *int
	addperiod_year  *int
	period_month    *int
	addperiod_month *int
	total_amount    *float64
	addtotal_amount *float64
	status          *invoice.Status
	number          *string
	clearedFields   map[string]struct{}
	student         *int
	clearedstudent  bool
	lines           map[int]struct{}
	removedlines    map[int]struct{}
	clearedlines    bool
	done            bool
	oldValue        func(context.Context) (*Invoice, error)
	predicates      []predicate.Invoice
}

var _ ent.Mutation = (*InvoiceMutation)(nil)

// invoiceOption allows management of the mutation configuration using functional options.
type invoiceOption func(*InvoiceMutation)

// newInvoiceMutation creates new mutation for the Invoice entity.
func newInvoiceMutation(c config, op Op, opts ...invoiceOption) *InvoiceMutation {
	m := &InvoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceID sets the ID field of the mutation.
func withInvoiceID(id int) invoiceOption {
	return func(m *InvoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Invoice
		)
		m.oldValue = func(ctx context.Context) (*Invoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoice sets the old Invoice of the mutation.
func withInvoice(node *Invoice) invoiceOption {
	return func(m *InvoiceMutation) {
		m.oldValue = func(context.Context) (*Invoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *InvoiceMutation) SetStudentID(i int) {
	m.student = &i
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *InvoiceMutation) StudentID() (r int, exists bool) {
	v := m.student
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldStudentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *InvoiceMutation) ResetStudentID() {
	m.student = nil
}

// SetPeriodYear sets the "period_year" field.
func (m *InvoiceMutation) SetPeriodYear(i int) {
	m.period_year = &i
	m.addperiod_year = nil
}

// PeriodYear returns the value of the "period_year" field in the mutation.
func (m *InvoiceMutation) PeriodYear() (r int, exists bool) {
	v := m.period_year
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodYear returns the old "period_year" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPeriodYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodYear: %w", err)
	}
	return oldValue.PeriodYear, nil
}

// AddPeriodYear adds i to the "period_year" field.
func (m *InvoiceMutation) AddPeriodYear(i int) {
	if m.addperiod_year != nil {
		*m.addperiod_year += i
	} else {
		m.addperiod_year = &i
	}
}

// AddedPeriodYear returns the value that was added to the "period_year" field in this mutation.
func (m *InvoiceMutation) AddedPeriodYear() (r int, exists bool) {
	v := m.addperiod_year
	if v == nil {
		return
	}
	return *v, true
}

// ResetPeriodYear resets all changes to the "period_year" field.
func (m *InvoiceMutation) ResetPeriodYear() {
	m.period_year = nil
	m.addperiod_year = nil
}

// SetPeriodMonth sets the "period_month" field.
func (m *InvoiceMutation) SetPeriodMonth(i int) {
	m.period_month = &i
	m.addperiod_month = nil
}

// PeriodMonth returns the value of the "period_month" field in the mutation.
func (m *InvoiceMutation) PeriodMonth() (r int, exists bool) {
	v := m.period_month
	if v == nil {
		return
	}
	return *v, true
}

// OldPeriodMonth returns the old "period_month" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldPeriodMonth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeriodMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeriodMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeriodMonth: %w", err)
	}
	return oldValue.PeriodMonth, nil
}

// AddPeriodMonth adds i to the "period_month" field.
func (m *InvoiceMutation) AddPeriodMonth(i int) {
	if m.addperiod_month != nil {
		*m.addperiod_month += i
	} else {
		m.addperiod_month = &i
	}
}

// AddedPeriodMonth returns the value that was added to the "period_month" field in this mutation.
func (m *InvoiceMutation) AddedPeriodMonth() (r int, exists bool) {
	v := m.addperiod_month
	if v == nil {
		return
	}
	return *v, true
}

// ResetPeriodMonth resets all changes to the "period_month" field.
func (m *InvoiceMutation) ResetPeriodMonth() {
	m.period_month = nil
	m.addperiod_month = nil
}

// SetTotalAmount sets the "total_amount" field.
func (m *InvoiceMutation) SetTotalAmount(f float64) {
	m.total_amount = &f
	m.addtotal_amount = nil
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *InvoiceMutation) TotalAmount() (r float64, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldTotalAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// AddTotalAmount adds f to the "total_amount" field.
func (m *InvoiceMutation) AddTotalAmount(f float64) {
	if m.addtotal_amount != nil {
		*m.addtotal_amount += f
	} else {
		m.addtotal_amount = &f
	}
}

// AddedTotalAmount returns the value that was added to the "total_amount" field in this mutation.
func (m *InvoiceMutation) AddedTotalAmount() (r float64, exists bool) {
	v := m.addtotal_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *InvoiceMutation) ResetTotalAmount() {
	m.total_amount = nil
	m.addtotal_amount = nil
}

// SetStatus sets the "status" field.
func (m *InvoiceMutation) SetStatus(i invoice.Status) {
	m.status = &i
}

// Status returns the value of the "status" field in the mutation.
func (m *InvoiceMutation) Status() (r invoice.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldStatus(ctx context.Context) (v invoice.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InvoiceMutation) ResetStatus() {
	m.status = nil
}

// SetNumber sets the "number" field.
func (m *InvoiceMutation) SetNumber(s string) {
	m.number = &s
}

// Number returns the value of the "number" field in the mutation.
func (m *InvoiceMutation) Number() (r string, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Invoice entity.
// If the Invoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceMutation) OldNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// ClearNumber clears the value of the "number" field.
func (m *InvoiceMutation) ClearNumber() {
	m.number = nil
	m.clearedFields[invoice.FieldNumber] = struct{}{}
}

// NumberCleared returns if the "number" field was cleared in this mutation.
func (m *InvoiceMutation) NumberCleared() bool {
	_, ok := m.clearedFields[invoice.FieldNumber]
	return ok
}

// ResetNumber resets all changes to the "number" field.
func (m *InvoiceMutation) ResetNumber() {
	m.number = nil
	delete(m.clearedFields, invoice.FieldNumber)
}

// ClearStudent clears the "student" edge to the Student entity.
func (m *InvoiceMutation) ClearStudent() {
	m.clearedstudent = true
	m.clearedFields[invoice.FieldStudentID] = struct{}{}
}

// StudentCleared reports if the "student" edge to the Student entity was cleared.
func (m *InvoiceMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *InvoiceMutation) StudentIDs() (ids []int) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *InvoiceMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// AddLineIDs adds the "lines" edge to the InvoiceLine entity by ids.
func (m *InvoiceMutation) AddLineIDs(ids ...int) {
	if m.lines == nil {
		m.lines = make(map[int]struct{})
	}
	for i := range ids {
		m.lines[ids[i]] = struct{}{}
	}
}

// ClearLines clears the "lines" edge to the InvoiceLine entity.
func (m *InvoiceMutation) ClearLines() {
	m.clearedlines = true
}

// LinesCleared reports if the "lines" edge to the InvoiceLine entity was cleared.
func (m *InvoiceMutation) LinesCleared() bool {
	return m.clearedlines
}

// RemoveLineIDs removes the "lines" edge to the InvoiceLine entity by IDs.
func (m *InvoiceMutation) RemoveLineIDs(ids ...int) {
	if m.removedlines == nil {
		m.removedlines = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lines, ids[i])
		m.removedlines[ids[i]] = struct{}{}
	}
}

// RemovedLines returns the removed IDs of the "lines" edge to the InvoiceLine entity.
func (m *InvoiceMutation) RemovedLinesIDs() (ids []int) {
	for id := range m.removedlines {
		ids = append(ids, id)
	}
	return
}

// LinesIDs returns the "lines" edge IDs in the mutation.
func (m *InvoiceMutation) LinesIDs() (ids []int) {
	for id := range m.lines {
		ids = append(ids, id)
	}
	return
}

// ResetLines resets all changes to the "lines" edge.
func (m *InvoiceMutation) ResetLines() {
	m.lines = nil
	m.clearedlines = false
	m.removedlines = nil
}

// Where appends a list predicates to the InvoiceMutation builder.
func (m *InvoiceMutation) Where(ps ...predicate.Invoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invoice).
func (m *InvoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.student != nil {
		fields = append(fields, invoice.FieldStudentID)
	}
	if m.period_year != nil {
		fields = append(fields, invoice.FieldPeriodYear)
	}
	if m.period_month != nil {
		fields = append(fields, invoice.FieldPeriodMonth)
	}
	if m.total_amount != nil {
		fields = append(fields, invoice.FieldTotalAmount)
	}
	if m.status != nil {
		fields = append(fields, invoice.FieldStatus)
	}
	if m.number != nil {
		fields = append(fields, invoice.FieldNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldStudentID:
		return m.StudentID()
	case invoice.FieldPeriodYear:
		return m.PeriodYear()
	case invoice.FieldPeriodMonth:
		return m.PeriodMonth()
	case invoice.FieldTotalAmount:
		return m.TotalAmount()
	case invoice.FieldStatus:
		return m.Status()
	case invoice.FieldNumber:
		return m.Number()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoice.FieldStudentID:
		return m.OldStudentID(ctx)
	case invoice.FieldPeriodYear:
		return m.OldPeriodYear(ctx)
	case invoice.FieldPeriodMonth:
		return m.OldPeriodMonth(ctx)
	case invoice.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case invoice.FieldStatus:
		return m.OldStatus(ctx)
	case invoice.FieldNumber:
		return m.OldNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Invoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldStudentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case invoice.FieldPeriodYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodYear(v)
		return nil
	case invoice.FieldPeriodMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeriodMonth(v)
		return nil
	case invoice.FieldTotalAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case invoice.FieldStatus:
		v, ok := value.(invoice.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case invoice.FieldNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceMutation) AddedFields() []string {
	var fields []string
	if m.addperiod_year != nil {
		fields = append(fields, invoice.FieldPeriodYear)
	}
	if m.addperiod_month != nil {
		fields = append(fields, invoice.FieldPeriodMonth)
	}
	if m.addtotal_amount != nil {
		fields = append(fields, invoice.FieldTotalAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invoice.FieldPeriodYear:
		return m.AddedPeriodYear()
	case invoice.FieldPeriodMonth:
		return m.AddedPeriodMonth()
	case invoice.FieldTotalAmount:
		return m.AddedTotalAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invoice.FieldPeriodYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPeriodYear(v)
		return nil
	case invoice.FieldPeriodMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPeriodMonth(v)
		return nil
	case invoice.FieldTotalAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Invoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invoice.FieldNumber) {
		fields = append(fields, invoice.FieldNumber)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceMutation) ClearField(name string) error {
	switch name {
	case invoice.FieldNumber:
		m.ClearNumber()
		return nil
	}
	return fmt.Errorf("unknown Invoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceMutation) ResetField(name string) error {
	switch name {
	case invoice.FieldStudentID:
		m.ResetStudentID()
		return nil
	case invoice.FieldPeriodYear:
		m.ResetPeriodYear()
		return nil
	case invoice.FieldPeriodMonth:
		m.ResetPeriodMonth()
		return nil
	case invoice.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case invoice.FieldStatus:
		m.ResetStatus()
		return nil
	case invoice.FieldNumber:
		m.ResetNumber()
		return nil
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.student != nil {
		edges = append(edges, invoice.EdgeStudent)
	}
	if m.lines != nil {
		edges = append(edges, invoice.EdgeLines)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invoice.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	case invoice.EdgeLines:
		ids := make([]ent.Value, 0, len(m.lines))
		for id := range m.lines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlines != nil {
		edges = append(edges, invoice.EdgeLines)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case invoice.EdgeLines:
		ids := make([]ent.Value, 0, len(m.removedlines))
		for id := range m.removedlines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudent {
		edges = append(edges, invoice.EdgeStudent)
	}
	if m.clearedlines {
		edges = append(edges, invoice.EdgeLines)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case invoice.EdgeStudent:
		return m.clearedstudent
	case invoice.EdgeLines:
		return m.clearedlines
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceMutation) ClearEdge(name string) error {
	switch name {
	case invoice.EdgeStudent:
		m.ClearStudent()
		return nil
	}
	return fmt.Errorf("unknown Invoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceMutation) ResetEdge(name string) error {
	switch name {
	case invoice.EdgeStudent:
		m.ResetStudent()
		return nil
	case invoice.EdgeLines:
		m.ResetLines()
		return nil
	}
	return fmt.Errorf("unknown Invoice edge %s", name)
}

// InvoiceLineMutation represents an operation that mutates the InvoiceLine nodes in the graph.
type InvoiceLineMutation struct {
	config
	op                Op
	typ               string
	id                *int
	description       *string
	qty               *int
	addqty            *int
	unit_price        *float64
	addunit_price     *float64
	amount            *float64
	addamount         *float64
	clearedFields     map[string]struct{}
	invoice           *int
	clearedinvoice    bool
	enrollment        *int
	clearedenrollment bool
	done              bool
	oldValue          func(context.Context) (*InvoiceLine, error)
	predicates        []predicate.InvoiceLine
}

var _ ent.Mutation = (*InvoiceLineMutation)(nil)

// invoicelineOption allows management of the mutation configuration using functional options.
type invoicelineOption func(*InvoiceLineMutation)

// newInvoiceLineMutation creates new mutation for the InvoiceLine entity.
func newInvoiceLineMutation(c config, op Op, opts ...invoicelineOption) *InvoiceLineMutation {
	m := &InvoiceLineMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoiceLine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceLineID sets the ID field of the mutation.
func withInvoiceLineID(id int) invoicelineOption {
	return func(m *InvoiceLineMutation) {
		var (
			err   error
			once  sync.Once
			value *InvoiceLine
		)
		m.oldValue = func(ctx context.Context) (*InvoiceLine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InvoiceLine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoiceLine sets the old InvoiceLine of the mutation.
func withInvoiceLine(node *InvoiceLine) invoicelineOption {
	return func(m *InvoiceLineMutation) {
		m.oldValue = func(context.Context) (*InvoiceLine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceLineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceLineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceLineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceLineMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InvoiceLine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInvoiceID sets the "invoice_id" field.
func (m *InvoiceLineMutation) SetInvoiceID(i int) {
	m.invoice = &i
}

// InvoiceID returns the value of the "invoice_id" field in the mutation.
func (m *InvoiceLineMutation) InvoiceID() (r int, exists bool) {
	v := m.invoice
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceID returns the old "invoice_id" field's value of the InvoiceLine entity.
// If the InvoiceLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineMutation) OldInvoiceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceID: %w", err)
	}
	return oldValue.InvoiceID, nil
}

// ResetInvoiceID resets all changes to the "invoice_id" field.
func (m *InvoiceLineMutation) ResetInvoiceID() {
	m.invoice = nil
}

// SetEnrollmentID sets the "enrollment_id" field.
func (m *InvoiceLineMutation) SetEnrollmentID(i int) {
	m.enrollment = &i
}

// EnrollmentID returns the value of the "enrollment_id" field in the mutation.
func (m *InvoiceLineMutation) EnrollmentID() (r int, exists bool) {
	v := m.enrollment
	if v == nil {
		return
	}
	return *v, true
}

// OldEnrollmentID returns the old "enrollment_id" field's value of the InvoiceLine entity.
// If the InvoiceLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineMutation) OldEnrollmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnrollmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnrollmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnrollmentID: %w", err)
	}
	return oldValue.EnrollmentID, nil
}

// ResetEnrollmentID resets all changes to the "enrollment_id" field.
func (m *InvoiceLineMutation) ResetEnrollmentID() {
	m.enrollment = nil
}

// SetDescription sets the "description" field.
func (m *InvoiceLineMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *InvoiceLineMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the InvoiceLine entity.
// If the InvoiceLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *InvoiceLineMutation) ResetDescription() {
	m.description = nil
}

// SetQty sets the "qty" field.
func (m *InvoiceLineMutation) SetQty(i int) {
	m.qty = &i
	m.addqty = nil
}

// Qty returns the value of the "qty" field in the mutation.
func (m *InvoiceLineMutation) Qty() (r int, exists bool) {
	v := m.qty
	if v == nil {
		return
	}
	return *v, true
}

// OldQty returns the old "qty" field's value of the InvoiceLine entity.
// If the InvoiceLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineMutation) OldQty(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQty: %w", err)
	}
	return oldValue.Qty, nil
}

// AddQty adds i to the "qty" field.
func (m *InvoiceLineMutation) AddQty(i int) {
	if m.addqty != nil {
		*m.addqty += i
	} else {
		m.addqty = &i
	}
}

// AddedQty returns the value that was added to the "qty" field in this mutation.
func (m *InvoiceLineMutation) AddedQty() (r int, exists bool) {
	v := m.addqty
	if v == nil {
		return
	}
	return *v, true
}

// ResetQty resets all changes to the "qty" field.
func (m *InvoiceLineMutation) ResetQty() {
	m.qty = nil
	m.addqty = nil
}

// SetUnitPrice sets the "unit_price" field.
func (m *InvoiceLineMutation) SetUnitPrice(f float64) {
	m.unit_price = &f
	m.addunit_price = nil
}

// UnitPrice returns the value of the "unit_price" field in the mutation.
func (m *InvoiceLineMutation) UnitPrice() (r float64, exists bool) {
	v := m.unit_price
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitPrice returns the old "unit_price" field's value of the InvoiceLine entity.
// If the InvoiceLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineMutation) OldUnitPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnitPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnitPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitPrice: %w", err)
	}
	return oldValue.UnitPrice, nil
}

// AddUnitPrice adds f to the "unit_price" field.
func (m *InvoiceLineMutation) AddUnitPrice(f float64) {
	if m.addunit_price != nil {
		*m.addunit_price += f
	} else {
		m.addunit_price = &f
	}
}

// AddedUnitPrice returns the value that was added to the "unit_price" field in this mutation.
func (m *InvoiceLineMutation) AddedUnitPrice() (r float64, exists bool) {
	v := m.addunit_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnitPrice resets all changes to the "unit_price" field.
func (m *InvoiceLineMutation) ResetUnitPrice() {
	m.unit_price = nil
	m.addunit_price = nil
}

// SetAmount sets the "amount" field.
func (m *InvoiceLineMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *InvoiceLineMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the InvoiceLine entity.
// If the InvoiceLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvoiceLineMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *InvoiceLineMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *InvoiceLineMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *InvoiceLineMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// ClearInvoice clears the "invoice" edge to the Invoice entity.
func (m *InvoiceLineMutation) ClearInvoice() {
	m.clearedinvoice = true
	m.clearedFields[invoiceline.FieldInvoiceID] = struct{}{}
}

// InvoiceCleared reports if the "invoice" edge to the Invoice entity was cleared.
func (m *InvoiceLineMutation) InvoiceCleared() bool {
	return m.clearedinvoice
}

// InvoiceIDs returns the "invoice" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InvoiceID instead. It exists only for internal usage by the builders.
func (m *InvoiceLineMutation) InvoiceIDs() (ids []int) {
	if id := m.invoice; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInvoice resets all changes to the "invoice" edge.
func (m *InvoiceLineMutation) ResetInvoice() {
	m.invoice = nil
	m.clearedinvoice = false
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (m *InvoiceLineMutation) ClearEnrollment() {
	m.clearedenrollment = true
	m.clearedFields[invoiceline.FieldEnrollmentID] = struct{}{}
}

// EnrollmentCleared reports if the "enrollment" edge to the Enrollment entity was cleared.
func (m *InvoiceLineMutation) EnrollmentCleared() bool {
	return m.clearedenrollment
}

// EnrollmentIDs returns the "enrollment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnrollmentID instead. It exists only for internal usage by the builders.
func (m *InvoiceLineMutation) EnrollmentIDs() (ids []int) {
	if id := m.enrollment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnrollment resets all changes to the "enrollment" edge.
func (m *InvoiceLineMutation) ResetEnrollment() {
	m.enrollment = nil
	m.clearedenrollment = false
}

// Where appends a list predicates to the InvoiceLineMutation builder.
func (m *InvoiceLineMutation) Where(ps ...predicate.InvoiceLine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceLineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceLineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InvoiceLine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceLineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceLineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InvoiceLine).
func (m *InvoiceLineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceLineMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.invoice != nil {
		fields = append(fields, invoiceline.FieldInvoiceID)
	}
	if m.enrollment != nil {
		fields = append(fields, invoiceline.FieldEnrollmentID)
	}
	if m.description != nil {
		fields = append(fields, invoiceline.FieldDescription)
	}
	if m.qty != nil {
		fields = append(fields, invoiceline.FieldQty)
	}
	if m.unit_price != nil {
		fields = append(fields, invoiceline.FieldUnitPrice)
	}
	if m.amount != nil {
		fields = append(fields, invoiceline.FieldAmount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceLineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invoiceline.FieldInvoiceID:
		return m.InvoiceID()
	case invoiceline.FieldEnrollmentID:
		return m.EnrollmentID()
	case invoiceline.FieldDescription:
		return m.Description()
	case invoiceline.FieldQty:
		return m.Qty()
	case invoiceline.FieldUnitPrice:
		return m.UnitPrice()
	case invoiceline.FieldAmount:
		return m.Amount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceLineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invoiceline.FieldInvoiceID:
		return m.OldInvoiceID(ctx)
	case invoiceline.FieldEnrollmentID:
		return m.OldEnrollmentID(ctx)
	case invoiceline.FieldDescription:
		return m.OldDescription(ctx)
	case invoiceline.FieldQty:
		return m.OldQty(ctx)
	case invoiceline.FieldUnitPrice:
		return m.OldUnitPrice(ctx)
	case invoiceline.FieldAmount:
		return m.OldAmount(ctx)
	}
	return nil, fmt.Errorf("unknown InvoiceLine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceLineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invoiceline.FieldInvoiceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceID(v)
		return nil
	case invoiceline.FieldEnrollmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnrollmentID(v)
		return nil
	case invoiceline.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case invoiceline.FieldQty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQty(v)
		return nil
	case invoiceline.FieldUnitPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitPrice(v)
		return nil
	case invoiceline.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	}
	return fmt.Errorf("unknown InvoiceLine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceLineMutation) AddedFields() []string {
	var fields []string
	if m.addqty != nil {
		fields = append(fields, invoiceline.FieldQty)
	}
	if m.addunit_price != nil {
		fields = append(fields, invoiceline.FieldUnitPrice)
	}
	if m.addamount != nil {
		fields = append(fields, invoiceline.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceLineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invoiceline.FieldQty:
		return m.AddedQty()
	case invoiceline.FieldUnitPrice:
		return m.AddedUnitPrice()
	case invoiceline.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceLineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invoiceline.FieldQty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQty(v)
		return nil
	case invoiceline.FieldUnitPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitPrice(v)
		return nil
	case invoiceline.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown InvoiceLine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceLineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceLineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceLineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InvoiceLine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceLineMutation) ResetField(name string) error {
	switch name {
	case invoiceline.FieldInvoiceID:
		m.ResetInvoiceID()
		return nil
	case invoiceline.FieldEnrollmentID:
		m.ResetEnrollmentID()
		return nil
	case invoiceline.FieldDescription:
		m.ResetDescription()
		return nil
	case invoiceline.FieldQty:
		m.ResetQty()
		return nil
	case invoiceline.FieldUnitPrice:
		m.ResetUnitPrice()
		return nil
	case invoiceline.FieldAmount:
		m.ResetAmount()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceLineMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.invoice != nil {
		edges = append(edges, invoiceline.EdgeInvoice)
	}
	if m.enrollment != nil {
		edges = append(edges, invoiceline.EdgeEnrollment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceLineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invoiceline.EdgeInvoice:
		if id := m.invoice; id != nil {
			return []ent.Value{*id}
		}
	case invoiceline.EdgeEnrollment:
		if id := m.enrollment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceLineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceLineMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceLineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinvoice {
		edges = append(edges, invoiceline.EdgeInvoice)
	}
	if m.clearedenrollment {
		edges = append(edges, invoiceline.EdgeEnrollment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceLineMutation) EdgeCleared(name string) bool {
	switch name {
	case invoiceline.EdgeInvoice:
		return m.clearedinvoice
	case invoiceline.EdgeEnrollment:
		return m.clearedenrollment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceLineMutation) ClearEdge(name string) error {
	switch name {
	case invoiceline.EdgeInvoice:
		m.ClearInvoice()
		return nil
	case invoiceline.EdgeEnrollment:
		m.ClearEnrollment()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceLineMutation) ResetEdge(name string) error {
	switch name {
	case invoiceline.EdgeInvoice:
		m.ResetInvoice()
		return nil
	case invoiceline.EdgeEnrollment:
		m.ResetEnrollment()
		return nil
	}
	return fmt.Errorf("unknown InvoiceLine edge %s", name)
}

// PriceOverrideMutation represents an operation that mutates the PriceOverride nodes in the graph.
type PriceOverrideMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	valid_from            *time.Time
	valid_to              *time.Time
	lesson_price          *float64
	addlesson_price       *float64
	subscription_price    *float64
	addsubscription_price *float64
	clearedFields         map[string]struct{}
	enrollment            *int
	clearedenrollment     bool
	done                  bool
	oldValue              func(context.Context) (*PriceOverride, error)
	predicates            []predicate.PriceOverride
}

var _ ent.Mutation = (*PriceOverrideMutation)(nil)

// priceoverrideOption allows management of the mutation configuration using functional options.
type priceoverrideOption func(*PriceOverrideMutation)

// newPriceOverrideMutation creates new mutation for the PriceOverride entity.
func newPriceOverrideMutation(c config, op Op, opts ...priceoverrideOption) *PriceOverrideMutation {
	m := &PriceOverrideMutation{
		config:        c,
		op:            op,
		typ:           TypePriceOverride,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceOverrideID sets the ID field of the mutation.
func withPriceOverrideID(id int) priceoverrideOption {
	return func(m *PriceOverrideMutation) {
		var (
			err   error
			once  sync.Once
			value *PriceOverride
		)
		m.oldValue = func(ctx context.Context) (*PriceOverride, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PriceOverride.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPriceOverride sets the old PriceOverride of the mutation.
func withPriceOverride(node *PriceOverride) priceoverrideOption {
	return func(m *PriceOverrideMutation) {
		m.oldValue = func(context.Context) (*PriceOverride, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceOverrideMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceOverrideMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PriceOverrideMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PriceOverrideMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PriceOverride.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEnrollmentID sets the "enrollment_id" field.
func (m *PriceOverrideMutation) SetEnrollmentID(i int) {
	m.enrollment = &i
}

// EnrollmentID returns the value of the "enrollment_id" field in the mutation.
func (m *PriceOverrideMutation) EnrollmentID() (r int, exists bool) {
	v := m.enrollment
	if v == nil {
		return
	}
	return *v, true
}

// OldEnrollmentID returns the old "enrollment_id" field's value of the PriceOverride entity.
// If the PriceOverride object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceOverrideMutation) OldEnrollmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnrollmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnrollmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnrollmentID: %w", err)
	}
	return oldValue.EnrollmentID, nil
}

// ResetEnrollmentID resets all changes to the "enrollment_id" field.
func (m *PriceOverrideMutation) ResetEnrollmentID() {
	m.enrollment = nil
}

// SetValidFrom sets the "valid_from" field.
func (m *PriceOverrideMutation) SetValidFrom(t time.Time) {
	m.valid_from = &t
}

// ValidFrom returns the value of the "valid_from" field in the mutation.
func (m *PriceOverrideMutation) ValidFrom() (r time.Time, exists bool) {
	v := m.valid_from
	if v == nil {
		return
	}
	return *v, true
}

// OldValidFrom returns the old "valid_from" field's value of the PriceOverride entity.
// If the PriceOverride object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceOverrideMutation) OldValidFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidFrom: %w", err)
	}
	return oldValue.ValidFrom, nil
}

// ResetValidFrom resets all changes to the "valid_from" field.
func (m *PriceOverrideMutation) ResetValidFrom() {
	m.valid_from = nil
}

// SetValidTo sets the "valid_to" field.
func (m *PriceOverrideMutation) SetValidTo(t time.Time) {
	m.valid_to = &t
}

// ValidTo returns the value of the "valid_to" field in the mutation.
func (m *PriceOverrideMutation) ValidTo() (r time.Time, exists bool) {
	v := m.valid_to
	if v == nil {
		return
	}
	return *v, true
}

// OldValidTo returns the old "valid_to" field's value of the PriceOverride entity.
// If the PriceOverride object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceOverrideMutation) OldValidTo(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidTo: %w", err)
	}
	return oldValue.ValidTo, nil
}

// ClearValidTo clears the value of the "valid_to" field.
func (m *PriceOverrideMutation) ClearValidTo() {
	m.valid_to = nil
	m.clearedFields[priceoverride.FieldValidTo] = struct{}{}
}

// ValidToCleared returns if the "valid_to" field was cleared in this mutation.
func (m *PriceOverrideMutation) ValidToCleared() bool {
	_, ok := m.clearedFields[priceoverride.FieldValidTo]
	return ok
}

// ResetValidTo resets all changes to the "valid_to" field.
func (m *PriceOverrideMutation) ResetValidTo() {
	m.valid_to = nil
	delete(m.clearedFields, priceoverride.FieldValidTo)
}

// SetLessonPrice sets the "lesson_price" field.
func (m *PriceOverrideMutation) SetLessonPrice(f float64) {
	m.lesson_price = &f
	m.addlesson_price = nil
}

// LessonPrice returns the value of the "lesson_price" field in the mutation.
func (m *PriceOverrideMutation) LessonPrice() (r float64, exists bool) {
	v := m.lesson_price
	if v == nil {
		return
	}
	return *v, true
}

// OldLessonPrice returns the old "lesson_price" field's value of the PriceOverride entity.
// If the PriceOverride object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceOverrideMutation) OldLessonPrice(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLessonPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLessonPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLessonPrice: %w", err)
	}
	return oldValue.LessonPrice, nil
}

// AddLessonPrice adds f to the "lesson_price" field.
func (m *PriceOverrideMutation) AddLessonPrice(f float64) {
	if m.addlesson_price != nil {
		*m.addlesson_price += f
	} else {
		m.addlesson_price = &f
	}
}

// AddedLessonPrice returns the value that was added to the "lesson_price" field in this mutation.
func (m *PriceOverrideMutation) AddedLessonPrice() (r float64, exists bool) {
	v := m.addlesson_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearLessonPrice clears the value of the "lesson_price" field.
func (m *PriceOverrideMutation) ClearLessonPrice() {
	m.lesson_price = nil
	m.addlesson_price = nil
	m.clearedFields[priceoverride.FieldLessonPrice] = struct{}{}
}

// LessonPriceCleared returns if the "lesson_price" field was cleared in this mutation.
func (m *PriceOverrideMutation) LessonPriceCleared() bool {
	_, ok := m.clearedFields[priceoverride.FieldLessonPrice]
	return ok
}

// ResetLessonPrice resets all changes to the "lesson_price" field.
func (m *PriceOverrideMutation) ResetLessonPrice() {
	m.lesson_price = nil
	m.addlesson_price = nil
	delete(m.clearedFields, priceoverride.FieldLessonPrice)
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (m *PriceOverrideMutation) SetSubscriptionPrice(f float64) {
	m.subscription_price = &f
	m.addsubscription_price = nil
}

// SubscriptionPrice returns the value of the "subscription_price" field in the mutation.
func (m *PriceOverrideMutation) SubscriptionPrice() (r float64, exists bool) {
	v := m.subscription_price
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionPrice returns the old "subscription_price" field's value of the PriceOverride entity.
// If the PriceOverride object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceOverrideMutation) OldSubscriptionPrice(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionPrice: %w", err)
	}
	return oldValue.SubscriptionPrice, nil
}

// AddSubscriptionPrice adds f to the "subscription_price" field.
func (m *PriceOverrideMutation) AddSubscriptionPrice(f float64) {
	if m.addsubscription_price != nil {
		*m.addsubscription_price += f
	} else {
		m.addsubscription_price = &f
	}
}

// AddedSubscriptionPrice returns the value that was added to the "subscription_price" field in this mutation.
func (m *PriceOverrideMutation) AddedSubscriptionPrice() (r float64, exists bool) {
	v := m.addsubscription_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearSubscriptionPrice clears the value of the "subscription_price" field.
func (m *PriceOverrideMutation) ClearSubscriptionPrice() {
	m.subscription_price = nil
	m.addsubscription_price = nil
	m.clearedFields[priceoverride.FieldSubscriptionPrice] = struct{}{}
}

// SubscriptionPriceCleared returns if the "subscription_price" field was cleared in this mutation.
func (m *PriceOverrideMutation) SubscriptionPriceCleared() bool {
	_, ok := m.clearedFields[priceoverride.FieldSubscriptionPrice]
	return ok
}

// ResetSubscriptionPrice resets all changes to the "subscription_price" field.
func (m *PriceOverrideMutation) ResetSubscriptionPrice() {
	m.subscription_price = nil
	m.addsubscription_price = nil
	delete(m.clearedFields, priceoverride.FieldSubscriptionPrice)
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (m *PriceOverrideMutation) ClearEnrollment() {
	m.clearedenrollment = true
	m.clearedFields[priceoverride.FieldEnrollmentID] = struct{}{}
}

// EnrollmentCleared reports if the "enrollment" edge to the Enrollment entity was cleared.
func (m *PriceOverrideMutation) EnrollmentCleared() bool {
	return m.clearedenrollment
}

// EnrollmentIDs returns the "enrollment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnrollmentID instead. It exists only for internal usage by the builders.
func (m *PriceOverrideMutation) EnrollmentIDs() (ids []int) {
	if id := m.enrollment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnrollment resets all changes to the "enrollment" edge.
func (m *PriceOverrideMutation) ResetEnrollment() {
	m.enrollment = nil
	m.clearedenrollment = false
}

// Where appends a list predicates to the PriceOverrideMutation builder.
func (m *PriceOverrideMutation) Where(ps ...predicate.PriceOverride) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PriceOverrideMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PriceOverrideMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PriceOverride, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PriceOverrideMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PriceOverrideMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PriceOverride).
func (m *PriceOverrideMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PriceOverrideMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.enrollment != nil {
		fields = append(fields, priceoverride.FieldEnrollmentID)
	}
	if m.valid_from != nil {
		fields = append(fields, priceoverride.FieldValidFrom)
	}
	if m.valid_to != nil {
		fields = append(fields, priceoverride.FieldValidTo)
	}
	if m.lesson_price != nil {
		fields = append(fields, priceoverride.FieldLessonPrice)
	}
	if m.subscription_price != nil {
		fields = append(fields, priceoverride.FieldSubscriptionPrice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PriceOverrideMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case priceoverride.FieldEnrollmentID:
		return m.EnrollmentID()
	case priceoverride.FieldValidFrom:
		return m.ValidFrom()
	case priceoverride.FieldValidTo:
		return m.ValidTo()
	case priceoverride.FieldLessonPrice:
		return m.LessonPrice()
	case priceoverride.FieldSubscriptionPrice:
		return m.SubscriptionPrice()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PriceOverrideMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case priceoverride.FieldEnrollmentID:
		return m.OldEnrollmentID(ctx)
	case priceoverride.FieldValidFrom:
		return m.OldValidFrom(ctx)
	case priceoverride.FieldValidTo:
		return m.OldValidTo(ctx)
	case priceoverride.FieldLessonPrice:
		return m.OldLessonPrice(ctx)
	case priceoverride.FieldSubscriptionPrice:
		return m.OldSubscriptionPrice(ctx)
	}
	return nil, fmt.Errorf("unknown PriceOverride field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceOverrideMutation) SetField(name string, value ent.Value) error {
	switch name {
	case priceoverride.FieldEnrollmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnrollmentID(v)
		return nil
	case priceoverride.FieldValidFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidFrom(v)
		return nil
	case priceoverride.FieldValidTo:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidTo(v)
		return nil
	case priceoverride.FieldLessonPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLessonPrice(v)
		return nil
	case priceoverride.FieldSubscriptionPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionPrice(v)
		return nil
	}
	return fmt.Errorf("unknown PriceOverride field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PriceOverrideMutation) AddedFields() []string {
	var fields []string
	if m.addlesson_price != nil {
		fields = append(fields, priceoverride.FieldLessonPrice)
	}
	if m.addsubscription_price != nil {
		fields = append(fields, priceoverride.FieldSubscriptionPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PriceOverrideMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case priceoverride.FieldLessonPrice:
		return m.AddedLessonPrice()
	case priceoverride.FieldSubscriptionPrice:
		return m.AddedSubscriptionPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceOverrideMutation) AddField(name string, value ent.Value) error {
	switch name {
	case priceoverride.FieldLessonPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLessonPrice(v)
		return nil
	case priceoverride.FieldSubscriptionPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubscriptionPrice(v)
		return nil
	}
	return fmt.Errorf("unknown PriceOverride numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PriceOverrideMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(priceoverride.FieldValidTo) {
		fields = append(fields, priceoverride.FieldValidTo)
	}
	if m.FieldCleared(priceoverride.FieldLessonPrice) {
		fields = append(fields, priceoverride.FieldLessonPrice)
	}
	if m.FieldCleared(priceoverride.FieldSubscriptionPrice) {
		fields = append(fields, priceoverride.FieldSubscriptionPrice)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PriceOverrideMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceOverrideMutation) ClearField(name string) error {
	switch name {
	case priceoverride.FieldValidTo:
		m.ClearValidTo()
		return nil
	case priceoverride.FieldLessonPrice:
		m.ClearLessonPrice()
		return nil
	case priceoverride.FieldSubscriptionPrice:
		m.ClearSubscriptionPrice()
		return nil
	}
	return fmt.Errorf("unknown PriceOverride nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PriceOverrideMutation) ResetField(name string) error {
	switch name {
	case priceoverride.FieldEnrollmentID:
		m.ResetEnrollmentID()
		return nil
	case priceoverride.FieldValidFrom:
		m.ResetValidFrom()
		return nil
	case priceoverride.FieldValidTo:
		m.ResetValidTo()
		return nil
	case priceoverride.FieldLessonPrice:
		m.ResetLessonPrice()
		return nil
	case priceoverride.FieldSubscriptionPrice:
		m.ResetSubscriptionPrice()
		return nil
	}
	return fmt.Errorf("unknown PriceOverride field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PriceOverrideMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.enrollment != nil {
		edges = append(edges, priceoverride.EdgeEnrollment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PriceOverrideMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case priceoverride.EdgeEnrollment:
		if id := m.enrollment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PriceOverrideMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PriceOverrideMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PriceOverrideMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedenrollment {
		edges = append(edges, priceoverride.EdgeEnrollment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PriceOverrideMutation) EdgeCleared(name string) bool {
	switch name {
	case priceoverride.EdgeEnrollment:
		return m.clearedenrollment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PriceOverrideMutation) ClearEdge(name string) error {
	switch name {
	case priceoverride.EdgeEnrollment:
		m.ClearEnrollment()
		return nil
	}
	return fmt.Errorf("unknown PriceOverride unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PriceOverrideMutation) ResetEdge(name string) error {
	switch name {
	case priceoverride.EdgeEnrollment:
		m.ResetEnrollment()
		return nil
	}
	return fmt.Errorf("unknown PriceOverride edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	singleton_id            *int
	addsingleton_id         *int
	org_name                *string
	address                 *string
	invoice_prefix          *string
	next_seq                *int
	addnext_seq             *int
	invoice_day_of_month    *int
	addinvoice_day_of_month *int
	auto_issue              *bool
	currency                *string
	locale                  *string
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Settings, error)
	predicates              []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSingletonID sets the "singleton_id" field.
func (m *SettingsMutation) SetSingletonID(i int) {
	m.singleton_id = &i
	m.addsingleton_id = nil
}

// SingletonID returns the value of the "singleton_id" field in the mutation.
func (m *SettingsMutation) SingletonID() (r int, exists bool) {
	v := m.singleton_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSingletonID returns the old "singleton_id" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldSingletonID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSingletonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSingletonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSingletonID: %w", err)
	}
	return oldValue.SingletonID, nil
}

// AddSingletonID adds i to the "singleton_id" field.
func (m *SettingsMutation) AddSingletonID(i int) {
	if m.addsingleton_id != nil {
		*m.addsingleton_id += i
	} else {
		m.addsingleton_id = &i
	}
}

// AddedSingletonID returns the value that was added to the "singleton_id" field in this mutation.
func (m *SettingsMutation) AddedSingletonID() (r int, exists bool) {
	v := m.addsingleton_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSingletonID resets all changes to the "singleton_id" field.
func (m *SettingsMutation) ResetSingletonID() {
	m.singleton_id = nil
	m.addsingleton_id = nil
}

// SetOrgName sets the "org_name" field.
func (m *SettingsMutation) SetOrgName(s string) {
	m.org_name = &s
}

// OrgName returns the value of the "org_name" field in the mutation.
func (m *SettingsMutation) OrgName() (r string, exists bool) {
	v := m.org_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgName returns the old "org_name" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldOrgName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgName: %w", err)
	}
	return oldValue.OrgName, nil
}

// ResetOrgName resets all changes to the "org_name" field.
func (m *SettingsMutation) ResetOrgName() {
	m.org_name = nil
}

// SetAddress sets the "address" field.
func (m *SettingsMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SettingsMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *SettingsMutation) ResetAddress() {
	m.address = nil
}

// SetInvoicePrefix sets the "invoice_prefix" field.
func (m *SettingsMutation) SetInvoicePrefix(s string) {
	m.invoice_prefix = &s
}

// InvoicePrefix returns the value of the "invoice_prefix" field in the mutation.
func (m *SettingsMutation) InvoicePrefix() (r string, exists bool) {
	v := m.invoice_prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoicePrefix returns the old "invoice_prefix" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldInvoicePrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoicePrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoicePrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoicePrefix: %w", err)
	}
	return oldValue.InvoicePrefix, nil
}

// ResetInvoicePrefix resets all changes to the "invoice_prefix" field.
func (m *SettingsMutation) ResetInvoicePrefix() {
	m.invoice_prefix = nil
}

// SetNextSeq sets the "next_seq" field.
func (m *SettingsMutation) SetNextSeq(i int) {
	m.next_seq = &i
	m.addnext_seq = nil
}

// NextSeq returns the value of the "next_seq" field in the mutation.
func (m *SettingsMutation) NextSeq() (r int, exists bool) {
	v := m.next_seq
	if v == nil {
		return
	}
	return *v, true
}

// OldNextSeq returns the old "next_seq" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldNextSeq(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextSeq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextSeq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNextSeq: %w", err)
	}
	return oldValue.NextSeq, nil
}

// AddNextSeq adds i to the "next_seq" field.
func (m *SettingsMutation) AddNextSeq(i int) {
	if m.addnext_seq != nil {
		*m.addnext_seq += i
	} else {
		m.addnext_seq = &i
	}
}

// AddedNextSeq returns the value that was added to the "next_seq" field in this mutation.
func (m *SettingsMutation) AddedNextSeq() (r int, exists bool) {
	v := m.addnext_seq
	if v == nil {
		return
	}
	return *v, true
}

// ResetNextSeq resets all changes to the "next_seq" field.
func (m *SettingsMutation) ResetNextSeq() {
	m.next_seq = nil
	m.addnext_seq = nil
}

// SetInvoiceDayOfMonth sets the "invoice_day_of_month" field.
func (m *SettingsMutation) SetInvoiceDayOfMonth(i int) {
	m.invoice_day_of_month = &i
	m.addinvoice_day_of_month = nil
}

// InvoiceDayOfMonth returns the value of the "invoice_day_of_month" field in the mutation.
func (m *SettingsMutation) InvoiceDayOfMonth() (r int, exists bool) {
	v := m.invoice_day_of_month
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceDayOfMonth returns the old "invoice_day_of_month" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldInvoiceDayOfMonth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceDayOfMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceDayOfMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceDayOfMonth: %w", err)
	}
	return oldValue.InvoiceDayOfMonth, nil
}

// AddInvoiceDayOfMonth adds i to the "invoice_day_of_month" field.
func (m *SettingsMutation) AddInvoiceDayOfMonth(i int) {
	if m.addinvoice_day_of_month != nil {
		*m.addinvoice_day_of_month += i
	} else {
		m.addinvoice_day_of_month = &i
	}
}

// AddedInvoiceDayOfMonth returns the value that was added to the "invoice_day_of_month" field in this mutation.
func (m *SettingsMutation) AddedInvoiceDayOfMonth() (r int, exists bool) {
	v := m.addinvoice_day_of_month
	if v == nil {
		return
	}
	return *v, true
}

// ResetInvoiceDayOfMonth resets all changes to the "invoice_day_of_month" field.
func (m *SettingsMutation) ResetInvoiceDayOfMonth() {
	m.invoice_day_of_month = nil
	m.addinvoice_day_of_month = nil
}

// SetAutoIssue sets the "auto_issue" field.
func (m *SettingsMutation) SetAutoIssue(b bool) {
	m.auto_issue = &b
}

// AutoIssue returns the value of the "auto_issue" field in the mutation.
func (m *SettingsMutation) AutoIssue() (r bool, exists bool) {
	v := m.auto_issue
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoIssue returns the old "auto_issue" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldAutoIssue(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoIssue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoIssue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoIssue: %w", err)
	}
	return oldValue.AutoIssue, nil
}

// ResetAutoIssue resets all changes to the "auto_issue" field.
func (m *SettingsMutation) ResetAutoIssue() {
	m.auto_issue = nil
}

// SetCurrency sets the "currency" field.
func (m *SettingsMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *SettingsMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *SettingsMutation) ResetCurrency() {
	m.currency = nil
}

// SetLocale sets the "locale" field.
func (m *SettingsMutation) SetLocale(s string) {
	m.locale = &s
}

// Locale returns the value of the "locale" field in the mutation.
func (m *SettingsMutation) Locale() (r string, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ResetLocale resets all changes to the "locale" field.
func (m *SettingsMutation) ResetLocale() {
	m.locale = nil
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Settings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.singleton_id != nil {
		fields = append(fields, settings.FieldSingletonID)
	}
	if m.org_name != nil {
		fields = append(fields, settings.FieldOrgName)
	}
	if m.address != nil {
		fields = append(fields, settings.FieldAddress)
	}
	if m.invoice_prefix != nil {
		fields = append(fields, settings.FieldInvoicePrefix)
	}
	if m.next_seq != nil {
		fields = append(fields, settings.FieldNextSeq)
	}
	if m.invoice_day_of_month != nil {
		fields = append(fields, settings.FieldInvoiceDayOfMonth)
	}
	if m.auto_issue != nil {
		fields = append(fields, settings.FieldAutoIssue)
	}
	if m.currency != nil {
		fields = append(fields, settings.FieldCurrency)
	}
	if m.locale != nil {
		fields = append(fields, settings.FieldLocale)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldSingletonID:
		return m.SingletonID()
	case settings.FieldOrgName:
		return m.OrgName()
	case settings.FieldAddress:
		return m.Address()
	case settings.FieldInvoicePrefix:
		return m.InvoicePrefix()
	case settings.FieldNextSeq:
		return m.NextSeq()
	case settings.FieldInvoiceDayOfMonth:
		return m.InvoiceDayOfMonth()
	case settings.FieldAutoIssue:
		return m.AutoIssue()
	case settings.FieldCurrency:
		return m.Currency()
	case settings.FieldLocale:
		return m.Locale()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldSingletonID:
		return m.OldSingletonID(ctx)
	case settings.FieldOrgName:
		return m.OldOrgName(ctx)
	case settings.FieldAddress:
		return m.OldAddress(ctx)
	case settings.FieldInvoicePrefix:
		return m.OldInvoicePrefix(ctx)
	case settings.FieldNextSeq:
		return m.OldNextSeq(ctx)
	case settings.FieldInvoiceDayOfMonth:
		return m.OldInvoiceDayOfMonth(ctx)
	case settings.FieldAutoIssue:
		return m.OldAutoIssue(ctx)
	case settings.FieldCurrency:
		return m.OldCurrency(ctx)
	case settings.FieldLocale:
		return m.OldLocale(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldSingletonID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSingletonID(v)
		return nil
	case settings.FieldOrgName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgName(v)
		return nil
	case settings.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case settings.FieldInvoicePrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoicePrefix(v)
		return nil
	case settings.FieldNextSeq:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNextSeq(v)
		return nil
	case settings.FieldInvoiceDayOfMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceDayOfMonth(v)
		return nil
	case settings.FieldAutoIssue:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoIssue(v)
		return nil
	case settings.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case settings.FieldLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	var fields []string
	if m.addsingleton_id != nil {
		fields = append(fields, settings.FieldSingletonID)
	}
	if m.addnext_seq != nil {
		fields = append(fields, settings.FieldNextSeq)
	}
	if m.addinvoice_day_of_month != nil {
		fields = append(fields, settings.FieldInvoiceDayOfMonth)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldSingletonID:
		return m.AddedSingletonID()
	case settings.FieldNextSeq:
		return m.AddedNextSeq()
	case settings.FieldInvoiceDayOfMonth:
		return m.AddedInvoiceDayOfMonth()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case settings.FieldSingletonID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSingletonID(v)
		return nil
	case settings.FieldNextSeq:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNextSeq(v)
		return nil
	case settings.FieldInvoiceDayOfMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInvoiceDayOfMonth(v)
		return nil
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldSingletonID:
		m.ResetSingletonID()
		return nil
	case settings.FieldOrgName:
		m.ResetOrgName()
		return nil
	case settings.FieldAddress:
		m.ResetAddress()
		return nil
	case settings.FieldInvoicePrefix:
		m.ResetInvoicePrefix()
		return nil
	case settings.FieldNextSeq:
		m.ResetNextSeq()
		return nil
	case settings.FieldInvoiceDayOfMonth:
		m.ResetInvoiceDayOfMonth()
		return nil
	case settings.FieldAutoIssue:
		m.ResetAutoIssue()
		return nil
	case settings.FieldCurrency:
		m.ResetCurrency()
		return nil
	case settings.FieldLocale:
		m.ResetLocale()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Settings edge %s", name)
}

// StudentMutation represents an operation that mutates the Student nodes in the graph.
type StudentMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	full_name          *string
	phone              *string
	email              *string
	note               *string
	is_active          *bool
	clearedFields      map[string]struct{}
	enrollments        map[int]struct{}
	removedenrollments map[int]struct{}
	clearedenrollments bool
	invoices           map[int]struct{}
	removedinvoices    map[int]struct{}
	clearedinvoices    bool
	done               bool
	oldValue           func(context.Context) (*Student, error)
	predicates         []predicate.Student
}

var _ ent.Mutation = (*StudentMutation)(nil)

// studentOption allows management of the mutation configuration using functional options.
type studentOption func(*StudentMutation)

// newStudentMutation creates new mutation for the Student entity.
func newStudentMutation(c config, op Op, opts ...studentOption) *StudentMutation {
	m := &StudentMutation{
		config:        c,
		op:            op,
		typ:           TypeStudent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentID sets the ID field of the mutation.
func withStudentID(id int) studentOption {
	return func(m *StudentMutation) {
		var (
			err   error
			once  sync.Once
			value *Student
		)
		m.oldValue = func(ctx context.Context) (*Student, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Student.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudent sets the old Student of the mutation.
func withStudent(node *Student) studentOption {
	return func(m *StudentMutation) {
		m.oldValue = func(context.Context) (*Student, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Student.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFullName sets the "full_name" field.
func (m *StudentMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *StudentMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *StudentMutation) ResetFullName() {
	m.full_name = nil
}

// SetPhone sets the "phone" field.
func (m *StudentMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *StudentMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *StudentMutation) ResetPhone() {
	m.phone = nil
}

// SetEmail sets the "email" field.
func (m *StudentMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *StudentMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *StudentMutation) ResetEmail() {
	m.email = nil
}

// SetNote sets the "note" field.
func (m *StudentMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *StudentMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *StudentMutation) ResetNote() {
	m.note = nil
}

// SetIsActive sets the "is_active" field.
func (m *StudentMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *StudentMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *StudentMutation) ResetIsActive() {
	m.is_active = nil
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by ids.
func (m *StudentMutation) AddEnrollmentIDs(ids ...int) {
	if m.enrollments == nil {
		m.enrollments = make(map[int]struct{})
	}
	for i := range ids {
		m.enrollments[ids[i]] = struct{}{}
	}
}

// ClearEnrollments clears the "enrollments" edge to the Enrollment entity.
func (m *StudentMutation) ClearEnrollments() {
	m.clearedenrollments = true
}

// EnrollmentsCleared reports if the "enrollments" edge to the Enrollment entity was cleared.
func (m *StudentMutation) EnrollmentsCleared() bool {
	return m.clearedenrollments
}

// RemoveEnrollmentIDs removes the "enrollments" edge to the Enrollment entity by IDs.
func (m *StudentMutation) RemoveEnrollmentIDs(ids ...int) {
	if m.removedenrollments == nil {
		m.removedenrollments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.enrollments, ids[i])
		m.removedenrollments[ids[i]] = struct{}{}
	}
}

// RemovedEnrollments returns the removed IDs of the "enrollments" edge to the Enrollment entity.
func (m *StudentMutation) RemovedEnrollmentsIDs() (ids []int) {
	for id := range m.removedenrollments {
		ids = append(ids, id)
	}
	return
}

// EnrollmentsIDs returns the "enrollments" edge IDs in the mutation.
func (m *StudentMutation) EnrollmentsIDs() (ids []int) {
	for id := range m.enrollments {
		ids = append(ids, id)
	}
	return
}

// ResetEnrollments resets all changes to the "enrollments" edge.
func (m *StudentMutation) ResetEnrollments() {
	m.enrollments = nil
	m.clearedenrollments = false
	m.removedenrollments = nil
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by ids.
func (m *StudentMutation) AddInvoiceIDs(ids ...int) {
	if m.invoices == nil {
		m.invoices = make(map[int]struct{})
	}
	for i := range ids {
		m.invoices[ids[i]] = struct{}{}
	}
}

// ClearInvoices clears the "invoices" edge to the Invoice entity.
func (m *StudentMutation) ClearInvoices() {
	m.clearedinvoices = true
}

// InvoicesCleared reports if the "invoices" edge to the Invoice entity was cleared.
func (m *StudentMutation) InvoicesCleared() bool {
	return m.clearedinvoices
}

// RemoveInvoiceIDs removes the "invoices" edge to the Invoice entity by IDs.
func (m *StudentMutation) RemoveInvoiceIDs(ids ...int) {
	if m.removedinvoices == nil {
		m.removedinvoices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.invoices, ids[i])
		m.removedinvoices[ids[i]] = struct{}{}
	}
}

// RemovedInvoices returns the removed IDs of the "invoices" edge to the Invoice entity.
func (m *StudentMutation) RemovedInvoicesIDs() (ids []int) {
	for id := range m.removedinvoices {
		ids = append(ids, id)
	}
	return
}

// InvoicesIDs returns the "invoices" edge IDs in the mutation.
func (m *StudentMutation) InvoicesIDs() (ids []int) {
	for id := range m.invoices {
		ids = append(ids, id)
	}
	return
}

// ResetInvoices resets all changes to the "invoices" edge.
func (m *StudentMutation) ResetInvoices() {
	m.invoices = nil
	m.clearedinvoices = false
	m.removedinvoices = nil
}

// Where appends a list predicates to the StudentMutation builder.
func (m *StudentMutation) Where(ps ...predicate.Student) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Student, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Student).
func (m *StudentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.full_name != nil {
		fields = append(fields, student.FieldFullName)
	}
	if m.phone != nil {
		fields = append(fields, student.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, student.FieldEmail)
	}
	if m.note != nil {
		fields = append(fields, student.FieldNote)
	}
	if m.is_active != nil {
		fields = append(fields, student.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case student.FieldFullName:
		return m.FullName()
	case student.FieldPhone:
		return m.Phone()
	case student.FieldEmail:
		return m.Email()
	case student.FieldNote:
		return m.Note()
	case student.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case student.FieldFullName:
		return m.OldFullName(ctx)
	case student.FieldPhone:
		return m.OldPhone(ctx)
	case student.FieldEmail:
		return m.OldEmail(ctx)
	case student.FieldNote:
		return m.OldNote(ctx)
	case student.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown Student field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case student.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case student.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case student.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case student.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case student.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Student numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Student nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentMutation) ResetField(name string) error {
	switch name {
	case student.FieldFullName:
		m.ResetFullName()
		return nil
	case student.FieldPhone:
		m.ResetPhone()
		return nil
	case student.FieldEmail:
		m.ResetEmail()
		return nil
	case student.FieldNote:
		m.ResetNote()
		return nil
	case student.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.enrollments != nil {
		edges = append(edges, student.EdgeEnrollments)
	}
	if m.invoices != nil {
		edges = append(edges, student.EdgeInvoices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.enrollments))
		for id := range m.enrollments {
			ids = append(ids, id)
		}
		return ids
	case student.EdgeInvoices:
		ids := make([]ent.Value, 0, len(m.invoices))
		for id := range m.invoices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedenrollments != nil {
		edges = append(edges, student.EdgeEnrollments)
	}
	if m.removedinvoices != nil {
		edges = append(edges, student.EdgeInvoices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.removedenrollments))
		for id := range m.removedenrollments {
			ids = append(ids, id)
		}
		return ids
	case student.EdgeInvoices:
		ids := make([]ent.Value, 0, len(m.removedinvoices))
		for id := range m.removedinvoices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedenrollments {
		edges = append(edges, student.EdgeEnrollments)
	}
	if m.clearedinvoices {
		edges = append(edges, student.EdgeInvoices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentMutation) EdgeCleared(name string) bool {
	switch name {
	case student.EdgeEnrollments:
		return m.clearedenrollments
	case student.EdgeInvoices:
		return m.clearedinvoices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Student unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentMutation) ResetEdge(name string) error {
	switch name {
	case student.EdgeEnrollments:
		m.ResetEnrollments()
		return nil
	case student.EdgeInvoices:
		m.ResetInvoices()
		return nil
	}
	return fmt.Errorf("unknown Student edge %s", name)
}

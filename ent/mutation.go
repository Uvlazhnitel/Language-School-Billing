// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/course"
	"langschool/ent/enrollment"
	"langschool/ent/predicate"
	"langschool/ent/settings"
	"langschool/ent/student"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCourse     = "Course"
	TypeEnrollment = "Enrollment"
	TypeSettings   = "Settings"
	TypeStudent    = "Student"
)

// CourseMutation represents an operation that mutates the Course nodes in the graph.
type CourseMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	_type                 *course.Type
	lesson_price          *float64
	addlesson_price       *float64
	subscription_price    *float64
	addsubscription_price *float64
	schedule_json         *string
	is_active             *bool
	clearedFields         map[string]struct{}
	enrollments           map[int]struct{}
	removedenrollments    map[int]struct{}
	clearedenrollments    bool
	done                  bool
	oldValue              func(context.Context) (*Course, error)
	predicates            []predicate.Course
}

var _ ent.Mutation = (*CourseMutation)(nil)

// courseOption allows management of the mutation configuration using functional options.
type courseOption func(*CourseMutation)

// newCourseMutation creates new mutation for the Course entity.
func newCourseMutation(c config, op Op, opts ...courseOption) *CourseMutation {
	m := &CourseMutation{
		config:        c,
		op:            op,
		typ:           TypeCourse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseID sets the ID field of the mutation.
func withCourseID(id int) courseOption {
	return func(m *CourseMutation) {
		var (
			err   error
			once  sync.Once
			value *Course
		)
		m.oldValue = func(ctx context.Context) (*Course, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Course.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourse sets the old Course of the mutation.
func withCourse(node *Course) courseOption {
	return func(m *CourseMutation) {
		m.oldValue = func(context.Context) (*Course, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Course.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CourseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CourseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CourseMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *CourseMutation) SetType(c course.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *CourseMutation) GetType() (r course.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldType(ctx context.Context) (v course.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CourseMutation) ResetType() {
	m._type = nil
}

// SetLessonPrice sets the "lesson_price" field.
func (m *CourseMutation) SetLessonPrice(f float64) {
	m.lesson_price = &f
	m.addlesson_price = nil
}

// LessonPrice returns the value of the "lesson_price" field in the mutation.
func (m *CourseMutation) LessonPrice() (r float64, exists bool) {
	v := m.lesson_price
	if v == nil {
		return
	}
	return *v, true
}

// OldLessonPrice returns the old "lesson_price" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldLessonPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLessonPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLessonPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLessonPrice: %w", err)
	}
	return oldValue.LessonPrice, nil
}

// AddLessonPrice adds f to the "lesson_price" field.
func (m *CourseMutation) AddLessonPrice(f float64) {
	if m.addlesson_price != nil {
		*m.addlesson_price += f
	} else {
		m.addlesson_price = &f
	}
}

// AddedLessonPrice returns the value that was added to the "lesson_price" field in this mutation.
func (m *CourseMutation) AddedLessonPrice() (r float64, exists bool) {
	v := m.addlesson_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetLessonPrice resets all changes to the "lesson_price" field.
func (m *CourseMutation) ResetLessonPrice() {
	m.lesson_price = nil
	m.addlesson_price = nil
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (m *CourseMutation) SetSubscriptionPrice(f float64) {
	m.subscription_price = &f
	m.addsubscription_price = nil
}

// SubscriptionPrice returns the value of the "subscription_price" field in the mutation.
func (m *CourseMutation) SubscriptionPrice() (r float64, exists bool) {
	v := m.subscription_price
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionPrice returns the old "subscription_price" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldSubscriptionPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionPrice: %w", err)
	}
	return oldValue.SubscriptionPrice, nil
}

// AddSubscriptionPrice adds f to the "subscription_price" field.
func (m *CourseMutation) AddSubscriptionPrice(f float64) {
	if m.addsubscription_price != nil {
		*m.addsubscription_price += f
	} else {
		m.addsubscription_price = &f
	}
}

// AddedSubscriptionPrice returns the value that was added to the "subscription_price" field in this mutation.
func (m *CourseMutation) AddedSubscriptionPrice() (r float64, exists bool) {
	v := m.addsubscription_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubscriptionPrice resets all changes to the "subscription_price" field.
func (m *CourseMutation) ResetSubscriptionPrice() {
	m.subscription_price = nil
	m.addsubscription_price = nil
}

// SetScheduleJSON sets the "schedule_json" field.
func (m *CourseMutation) SetScheduleJSON(s string) {
	m.schedule_json = &s
}

// ScheduleJSON returns the value of the "schedule_json" field in the mutation.
func (m *CourseMutation) ScheduleJSON() (r string, exists bool) {
	v := m.schedule_json
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduleJSON returns the old "schedule_json" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldScheduleJSON(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduleJSON is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduleJSON requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduleJSON: %w", err)
	}
	return oldValue.ScheduleJSON, nil
}

// ResetScheduleJSON resets all changes to the "schedule_json" field.
func (m *CourseMutation) ResetScheduleJSON() {
	m.schedule_json = nil
}

// SetIsActive sets the "is_active" field.
func (m *CourseMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *CourseMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *CourseMutation) ResetIsActive() {
	m.is_active = nil
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by ids.
func (m *CourseMutation) AddEnrollmentIDs(ids ...int) {
	if m.enrollments == nil {
		m.enrollments = make(map[int]struct{})
	}
	for i := range ids {
		m.enrollments[ids[i]] = struct{}{}
	}
}

// ClearEnrollments clears the "enrollments" edge to the Enrollment entity.
func (m *CourseMutation) ClearEnrollments() {
	m.clearedenrollments = true
}

// EnrollmentsCleared reports if the "enrollments" edge to the Enrollment entity was cleared.
func (m *CourseMutation) EnrollmentsCleared() bool {
	return m.clearedenrollments
}

// RemoveEnrollmentIDs removes the "enrollments" edge to the Enrollment entity by IDs.
func (m *CourseMutation) RemoveEnrollmentIDs(ids ...int) {
	if m.removedenrollments == nil {
		m.removedenrollments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.enrollments, ids[i])
		m.removedenrollments[ids[i]] = struct{}{}
	}
}

// RemovedEnrollments returns the removed IDs of the "enrollments" edge to the Enrollment entity.
func (m *CourseMutation) RemovedEnrollmentsIDs() (ids []int) {
	for id := range m.removedenrollments {
		ids = append(ids, id)
	}
	return
}

// EnrollmentsIDs returns the "enrollments" edge IDs in the mutation.
func (m *CourseMutation) EnrollmentsIDs() (ids []int) {
	for id := range m.enrollments {
		ids = append(ids, id)
	}
	return
}

// ResetEnrollments resets all changes to the "enrollments" edge.
func (m *CourseMutation) ResetEnrollments() {
	m.enrollments = nil
	m.clearedenrollments = false
	m.removedenrollments = nil
}

// Where appends a list predicates to the CourseMutation builder.
func (m *CourseMutation) Where(ps ...predicate.Course) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Course, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Course).
func (m *CourseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, course.FieldName)
	}
	if m._type != nil {
		fields = append(fields, course.FieldType)
	}
	if m.lesson_price != nil {
		fields = append(fields, course.FieldLessonPrice)
	}
	if m.subscription_price != nil {
		fields = append(fields, course.FieldSubscriptionPrice)
	}
	if m.schedule_json != nil {
		fields = append(fields, course.FieldScheduleJSON)
	}
	if m.is_active != nil {
		fields = append(fields, course.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case course.FieldName:
		return m.Name()
	case course.FieldType:
		return m.GetType()
	case course.FieldLessonPrice:
		return m.LessonPrice()
	case course.FieldSubscriptionPrice:
		return m.SubscriptionPrice()
	case course.FieldScheduleJSON:
		return m.ScheduleJSON()
	case course.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case course.FieldName:
		return m.OldName(ctx)
	case course.FieldType:
		return m.OldType(ctx)
	case course.FieldLessonPrice:
		return m.OldLessonPrice(ctx)
	case course.FieldSubscriptionPrice:
		return m.OldSubscriptionPrice(ctx)
	case course.FieldScheduleJSON:
		return m.OldScheduleJSON(ctx)
	case course.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown Course field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case course.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case course.FieldType:
		v, ok := value.(course.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case course.FieldLessonPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLessonPrice(v)
		return nil
	case course.FieldSubscriptionPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionPrice(v)
		return nil
	case course.FieldScheduleJSON:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduleJSON(v)
		return nil
	case course.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseMutation) AddedFields() []string {
	var fields []string
	if m.addlesson_price != nil {
		fields = append(fields, course.FieldLessonPrice)
	}
	if m.addsubscription_price != nil {
		fields = append(fields, course.FieldSubscriptionPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case course.FieldLessonPrice:
		return m.AddedLessonPrice()
	case course.FieldSubscriptionPrice:
		return m.AddedSubscriptionPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case course.FieldLessonPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLessonPrice(v)
		return nil
	case course.FieldSubscriptionPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubscriptionPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Course numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Course nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseMutation) ResetField(name string) error {
	switch name {
	case course.FieldName:
		m.ResetName()
		return nil
	case course.FieldType:
		m.ResetType()
		return nil
	case course.FieldLessonPrice:
		m.ResetLessonPrice()
		return nil
	case course.FieldSubscriptionPrice:
		m.ResetSubscriptionPrice()
		return nil
	case course.FieldScheduleJSON:
		m.ResetScheduleJSON()
		return nil
	case course.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.enrollments != nil {
		edges = append(edges, course.EdgeEnrollments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.enrollments))
		for id := range m.enrollments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedenrollments != nil {
		edges = append(edges, course.EdgeEnrollments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.removedenrollments))
		for id := range m.removedenrollments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedenrollments {
		edges = append(edges, course.EdgeEnrollments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseMutation) EdgeCleared(name string) bool {
	switch name {
	case course.EdgeEnrollments:
		return m.clearedenrollments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Course unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseMutation) ResetEdge(name string) error {
	switch name {
	case course.EdgeEnrollments:
		m.ResetEnrollments()
		return nil
	}
	return fmt.Errorf("unknown Course edge %s", name)
}

// EnrollmentMutation represents an operation that mutates the Enrollment nodes in the graph.
type EnrollmentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	billing_mode    *enrollment.BillingMode
	start_date      *time.Time
	end_date        *time.Time
	discount_pct    *float64
	adddiscount_pct *float64
	note            *string
	clearedFields   map[string]struct{}
	student         *int
	clearedstudent  bool
	course          *int
	clearedcourse   bool
	done            bool
	oldValue        func(context.Context) (*Enrollment, error)
	predicates      []predicate.Enrollment
}

var _ ent.Mutation = (*EnrollmentMutation)(nil)

// enrollmentOption allows management of the mutation configuration using functional options.
type enrollmentOption func(*EnrollmentMutation)

// newEnrollmentMutation creates new mutation for the Enrollment entity.
func newEnrollmentMutation(c config, op Op, opts ...enrollmentOption) *EnrollmentMutation {
	m := &EnrollmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEnrollment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnrollmentID sets the ID field of the mutation.
func withEnrollmentID(id int) enrollmentOption {
	return func(m *EnrollmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Enrollment
		)
		m.oldValue = func(ctx context.Context) (*Enrollment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Enrollment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnrollment sets the old Enrollment of the mutation.
func withEnrollment(node *Enrollment) enrollmentOption {
	return func(m *EnrollmentMutation) {
		m.oldValue = func(context.Context) (*Enrollment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnrollmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnrollmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnrollmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnrollmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Enrollment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStudentID sets the "student_id" field.
func (m *EnrollmentMutation) SetStudentID(i int) {
	m.student = &i
}

// StudentID returns the value of the "student_id" field in the mutation.
func (m *EnrollmentMutation) StudentID() (r int, exists bool) {
	v := m.student
	if v == nil {
		return
	}
	return *v, true
}

// OldStudentID returns the old "student_id" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldStudentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStudentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStudentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudentID: %w", err)
	}
	return oldValue.StudentID, nil
}

// ResetStudentID resets all changes to the "student_id" field.
func (m *EnrollmentMutation) ResetStudentID() {
	m.student = nil
}

// SetCourseID sets the "course_id" field.
func (m *EnrollmentMutation) SetCourseID(i int) {
	m.course = &i
}

// CourseID returns the value of the "course_id" field in the mutation.
func (m *EnrollmentMutation) CourseID() (r int, exists bool) {
	v := m.course
	if v == nil {
		return
	}
	return *v, true
}

// OldCourseID returns the old "course_id" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldCourseID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCourseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCourseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCourseID: %w", err)
	}
	return oldValue.CourseID, nil
}

// ResetCourseID resets all changes to the "course_id" field.
func (m *EnrollmentMutation) ResetCourseID() {
	m.course = nil
}

// SetBillingMode sets the "billing_mode" field.
func (m *EnrollmentMutation) SetBillingMode(em enrollment.BillingMode) {
	m.billing_mode = &em
}

// BillingMode returns the value of the "billing_mode" field in the mutation.
func (m *EnrollmentMutation) BillingMode() (r enrollment.BillingMode, exists bool) {
	v := m.billing_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingMode returns the old "billing_mode" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldBillingMode(ctx context.Context) (v enrollment.BillingMode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingMode: %w", err)
	}
	return oldValue.BillingMode, nil
}

// ResetBillingMode resets all changes to the "billing_mode" field.
func (m *EnrollmentMutation) ResetBillingMode() {
	m.billing_mode = nil
}

// SetStartDate sets the "start_date" field.
func (m *EnrollmentMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *EnrollmentMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *EnrollmentMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *EnrollmentMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *EnrollmentMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *EnrollmentMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[enrollment.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *EnrollmentMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[enrollment.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *EnrollmentMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, enrollment.FieldEndDate)
}

// SetDiscountPct sets the "discount_pct" field.
func (m *EnrollmentMutation) SetDiscountPct(f float64) {
	m.discount_pct = &f
	m.adddiscount_pct = nil
}

// DiscountPct returns the value of the "discount_pct" field in the mutation.
func (m *EnrollmentMutation) DiscountPct() (r float64, exists bool) {
	v := m.discount_pct
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountPct returns the old "discount_pct" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldDiscountPct(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountPct is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountPct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountPct: %w", err)
	}
	return oldValue.DiscountPct, nil
}

// AddDiscountPct adds f to the "discount_pct" field.
func (m *EnrollmentMutation) AddDiscountPct(f float64) {
	if m.adddiscount_pct != nil {
		*m.adddiscount_pct += f
	} else {
		m.adddiscount_pct = &f
	}
}

// AddedDiscountPct returns the value that was added to the "discount_pct" field in this mutation.
func (m *EnrollmentMutation) AddedDiscountPct() (r float64, exists bool) {
	v := m.adddiscount_pct
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscountPct resets all changes to the "discount_pct" field.
func (m *EnrollmentMutation) ResetDiscountPct() {
	m.discount_pct = nil
	m.adddiscount_pct = nil
}

// SetNote sets the "note" field.
func (m *EnrollmentMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *EnrollmentMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Enrollment entity.
// If the Enrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrollmentMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *EnrollmentMutation) ResetNote() {
	m.note = nil
}

// ClearStudent clears the "student" edge to the Student entity.
func (m *EnrollmentMutation) ClearStudent() {
	m.clearedstudent = true
	m.clearedFields[enrollment.FieldStudentID] = struct{}{}
}

// StudentCleared reports if the "student" edge to the Student entity was cleared.
func (m *EnrollmentMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *EnrollmentMutation) StudentIDs() (ids []int) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *EnrollmentMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *EnrollmentMutation) ClearCourse() {
	m.clearedcourse = true
	m.clearedFields[enrollment.FieldCourseID] = struct{}{}
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *EnrollmentMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *EnrollmentMutation) CourseIDs() (ids []int) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *EnrollmentMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// Where appends a list predicates to the EnrollmentMutation builder.
func (m *EnrollmentMutation) Where(ps ...predicate.Enrollment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnrollmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnrollmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Enrollment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnrollmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnrollmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Enrollment).
func (m *EnrollmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnrollmentMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.student != nil {
		fields = append(fields, enrollment.FieldStudentID)
	}
	if m.course != nil {
		fields = append(fields, enrollment.FieldCourseID)
	}
	if m.billing_mode != nil {
		fields = append(fields, enrollment.FieldBillingMode)
	}
	if m.start_date != nil {
		fields = append(fields, enrollment.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, enrollment.FieldEndDate)
	}
	if m.discount_pct != nil {
		fields = append(fields, enrollment.FieldDiscountPct)
	}
	if m.note != nil {
		fields = append(fields, enrollment.FieldNote)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnrollmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enrollment.FieldStudentID:
		return m.StudentID()
	case enrollment.FieldCourseID:
		return m.CourseID()
	case enrollment.FieldBillingMode:
		return m.BillingMode()
	case enrollment.FieldStartDate:
		return m.StartDate()
	case enrollment.FieldEndDate:
		return m.EndDate()
	case enrollment.FieldDiscountPct:
		return m.DiscountPct()
	case enrollment.FieldNote:
		return m.Note()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnrollmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enrollment.FieldStudentID:
		return m.OldStudentID(ctx)
	case enrollment.FieldCourseID:
		return m.OldCourseID(ctx)
	case enrollment.FieldBillingMode:
		return m.OldBillingMode(ctx)
	case enrollment.FieldStartDate:
		return m.OldStartDate(ctx)
	case enrollment.FieldEndDate:
		return m.OldEndDate(ctx)
	case enrollment.FieldDiscountPct:
		return m.OldDiscountPct(ctx)
	case enrollment.FieldNote:
		return m.OldNote(ctx)
	}
	return nil, fmt.Errorf("unknown Enrollment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnrollmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enrollment.FieldStudentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudentID(v)
		return nil
	case enrollment.FieldCourseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCourseID(v)
		return nil
	case enrollment.FieldBillingMode:
		v, ok := value.(enrollment.BillingMode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingMode(v)
		return nil
	case enrollment.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case enrollment.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case enrollment.FieldDiscountPct:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountPct(v)
		return nil
	case enrollment.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	}
	return fmt.Errorf("unknown Enrollment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnrollmentMutation) AddedFields() []string {
	var fields []string
	if m.adddiscount_pct != nil {
		fields = append(fields, enrollment.FieldDiscountPct)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnrollmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enrollment.FieldDiscountPct:
		return m.AddedDiscountPct()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnrollmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enrollment.FieldDiscountPct:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscountPct(v)
		return nil
	}
	return fmt.Errorf("unknown Enrollment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnrollmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enrollment.FieldEndDate) {
		fields = append(fields, enrollment.FieldEndDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnrollmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnrollmentMutation) ClearField(name string) error {
	switch name {
	case enrollment.FieldEndDate:
		m.ClearEndDate()
		return nil
	}
	return fmt.Errorf("unknown Enrollment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnrollmentMutation) ResetField(name string) error {
	switch name {
	case enrollment.FieldStudentID:
		m.ResetStudentID()
		return nil
	case enrollment.FieldCourseID:
		m.ResetCourseID()
		return nil
	case enrollment.FieldBillingMode:
		m.ResetBillingMode()
		return nil
	case enrollment.FieldStartDate:
		m.ResetStartDate()
		return nil
	case enrollment.FieldEndDate:
		m.ResetEndDate()
		return nil
	case enrollment.FieldDiscountPct:
		m.ResetDiscountPct()
		return nil
	case enrollment.FieldNote:
		m.ResetNote()
		return nil
	}
	return fmt.Errorf("unknown Enrollment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnrollmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.student != nil {
		edges = append(edges, enrollment.EdgeStudent)
	}
	if m.course != nil {
		edges = append(edges, enrollment.EdgeCourse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnrollmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enrollment.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	case enrollment.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnrollmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnrollmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnrollmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudent {
		edges = append(edges, enrollment.EdgeStudent)
	}
	if m.clearedcourse {
		edges = append(edges, enrollment.EdgeCourse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnrollmentMutation) EdgeCleared(name string) bool {
	switch name {
	case enrollment.EdgeStudent:
		return m.clearedstudent
	case enrollment.EdgeCourse:
		return m.clearedcourse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnrollmentMutation) ClearEdge(name string) error {
	switch name {
	case enrollment.EdgeStudent:
		m.ClearStudent()
		return nil
	case enrollment.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown Enrollment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnrollmentMutation) ResetEdge(name string) error {
	switch name {
	case enrollment.EdgeStudent:
		m.ResetStudent()
		return nil
	case enrollment.EdgeCourse:
		m.ResetCourse()
		return nil
	}
	return fmt.Errorf("unknown Enrollment edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	singleton_id            *int
	addsingleton_id         *int
	org_name                *string
	address                 *string
	invoice_prefix          *string
	next_seq                *int
	addnext_seq             *int
	invoice_day_of_month    *int
	addinvoice_day_of_month *int
	auto_issue              *bool
	currency                *string
	locale                  *string
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Settings, error)
	predicates              []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSingletonID sets the "singleton_id" field.
func (m *SettingsMutation) SetSingletonID(i int) {
	m.singleton_id = &i
	m.addsingleton_id = nil
}

// SingletonID returns the value of the "singleton_id" field in the mutation.
func (m *SettingsMutation) SingletonID() (r int, exists bool) {
	v := m.singleton_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSingletonID returns the old "singleton_id" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldSingletonID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSingletonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSingletonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSingletonID: %w", err)
	}
	return oldValue.SingletonID, nil
}

// AddSingletonID adds i to the "singleton_id" field.
func (m *SettingsMutation) AddSingletonID(i int) {
	if m.addsingleton_id != nil {
		*m.addsingleton_id += i
	} else {
		m.addsingleton_id = &i
	}
}

// AddedSingletonID returns the value that was added to the "singleton_id" field in this mutation.
func (m *SettingsMutation) AddedSingletonID() (r int, exists bool) {
	v := m.addsingleton_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSingletonID resets all changes to the "singleton_id" field.
func (m *SettingsMutation) ResetSingletonID() {
	m.singleton_id = nil
	m.addsingleton_id = nil
}

// SetOrgName sets the "org_name" field.
func (m *SettingsMutation) SetOrgName(s string) {
	m.org_name = &s
}

// OrgName returns the value of the "org_name" field in the mutation.
func (m *SettingsMutation) OrgName() (r string, exists bool) {
	v := m.org_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgName returns the old "org_name" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldOrgName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgName: %w", err)
	}
	return oldValue.OrgName, nil
}

// ResetOrgName resets all changes to the "org_name" field.
func (m *SettingsMutation) ResetOrgName() {
	m.org_name = nil
}

// SetAddress sets the "address" field.
func (m *SettingsMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SettingsMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *SettingsMutation) ResetAddress() {
	m.address = nil
}

// SetInvoicePrefix sets the "invoice_prefix" field.
func (m *SettingsMutation) SetInvoicePrefix(s string) {
	m.invoice_prefix = &s
}

// InvoicePrefix returns the value of the "invoice_prefix" field in the mutation.
func (m *SettingsMutation) InvoicePrefix() (r string, exists bool) {
	v := m.invoice_prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoicePrefix returns the old "invoice_prefix" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldInvoicePrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoicePrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoicePrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoicePrefix: %w", err)
	}
	return oldValue.InvoicePrefix, nil
}

// ResetInvoicePrefix resets all changes to the "invoice_prefix" field.
func (m *SettingsMutation) ResetInvoicePrefix() {
	m.invoice_prefix = nil
}

// SetNextSeq sets the "next_seq" field.
func (m *SettingsMutation) SetNextSeq(i int) {
	m.next_seq = &i
	m.addnext_seq = nil
}

// NextSeq returns the value of the "next_seq" field in the mutation.
func (m *SettingsMutation) NextSeq() (r int, exists bool) {
	v := m.next_seq
	if v == nil {
		return
	}
	return *v, true
}

// OldNextSeq returns the old "next_seq" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldNextSeq(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextSeq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextSeq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNextSeq: %w", err)
	}
	return oldValue.NextSeq, nil
}

// AddNextSeq adds i to the "next_seq" field.
func (m *SettingsMutation) AddNextSeq(i int) {
	if m.addnext_seq != nil {
		*m.addnext_seq += i
	} else {
		m.addnext_seq = &i
	}
}

// AddedNextSeq returns the value that was added to the "next_seq" field in this mutation.
func (m *SettingsMutation) AddedNextSeq() (r int, exists bool) {
	v := m.addnext_seq
	if v == nil {
		return
	}
	return *v, true
}

// ResetNextSeq resets all changes to the "next_seq" field.
func (m *SettingsMutation) ResetNextSeq() {
	m.next_seq = nil
	m.addnext_seq = nil
}

// SetInvoiceDayOfMonth sets the "invoice_day_of_month" field.
func (m *SettingsMutation) SetInvoiceDayOfMonth(i int) {
	m.invoice_day_of_month = &i
	m.addinvoice_day_of_month = nil
}

// InvoiceDayOfMonth returns the value of the "invoice_day_of_month" field in the mutation.
func (m *SettingsMutation) InvoiceDayOfMonth() (r int, exists bool) {
	v := m.invoice_day_of_month
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceDayOfMonth returns the old "invoice_day_of_month" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldInvoiceDayOfMonth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceDayOfMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceDayOfMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceDayOfMonth: %w", err)
	}
	return oldValue.InvoiceDayOfMonth, nil
}

// AddInvoiceDayOfMonth adds i to the "invoice_day_of_month" field.
func (m *SettingsMutation) AddInvoiceDayOfMonth(i int) {
	if m.addinvoice_day_of_month != nil {
		*m.addinvoice_day_of_month += i
	} else {
		m.addinvoice_day_of_month = &i
	}
}

// AddedInvoiceDayOfMonth returns the value that was added to the "invoice_day_of_month" field in this mutation.
func (m *SettingsMutation) AddedInvoiceDayOfMonth() (r int, exists bool) {
	v := m.addinvoice_day_of_month
	if v == nil {
		return
	}
	return *v, true
}

// ResetInvoiceDayOfMonth resets all changes to the "invoice_day_of_month" field.
func (m *SettingsMutation) ResetInvoiceDayOfMonth() {
	m.invoice_day_of_month = nil
	m.addinvoice_day_of_month = nil
}

// SetAutoIssue sets the "auto_issue" field.
func (m *SettingsMutation) SetAutoIssue(b bool) {
	m.auto_issue = &b
}

// AutoIssue returns the value of the "auto_issue" field in the mutation.
func (m *SettingsMutation) AutoIssue() (r bool, exists bool) {
	v := m.auto_issue
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoIssue returns the old "auto_issue" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldAutoIssue(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoIssue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoIssue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoIssue: %w", err)
	}
	return oldValue.AutoIssue, nil
}

// ResetAutoIssue resets all changes to the "auto_issue" field.
func (m *SettingsMutation) ResetAutoIssue() {
	m.auto_issue = nil
}

// SetCurrency sets the "currency" field.
func (m *SettingsMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *SettingsMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *SettingsMutation) ResetCurrency() {
	m.currency = nil
}

// SetLocale sets the "locale" field.
func (m *SettingsMutation) SetLocale(s string) {
	m.locale = &s
}

// Locale returns the value of the "locale" field in the mutation.
func (m *SettingsMutation) Locale() (r string, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ResetLocale resets all changes to the "locale" field.
func (m *SettingsMutation) ResetLocale() {
	m.locale = nil
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Settings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.singleton_id != nil {
		fields = append(fields, settings.FieldSingletonID)
	}
	if m.org_name != nil {
		fields = append(fields, settings.FieldOrgName)
	}
	if m.address != nil {
		fields = append(fields, settings.FieldAddress)
	}
	if m.invoice_prefix != nil {
		fields = append(fields, settings.FieldInvoicePrefix)
	}
	if m.next_seq != nil {
		fields = append(fields, settings.FieldNextSeq)
	}
	if m.invoice_day_of_month != nil {
		fields = append(fields, settings.FieldInvoiceDayOfMonth)
	}
	if m.auto_issue != nil {
		fields = append(fields, settings.FieldAutoIssue)
	}
	if m.currency != nil {
		fields = append(fields, settings.FieldCurrency)
	}
	if m.locale != nil {
		fields = append(fields, settings.FieldLocale)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldSingletonID:
		return m.SingletonID()
	case settings.FieldOrgName:
		return m.OrgName()
	case settings.FieldAddress:
		return m.Address()
	case settings.FieldInvoicePrefix:
		return m.InvoicePrefix()
	case settings.FieldNextSeq:
		return m.NextSeq()
	case settings.FieldInvoiceDayOfMonth:
		return m.InvoiceDayOfMonth()
	case settings.FieldAutoIssue:
		return m.AutoIssue()
	case settings.FieldCurrency:
		return m.Currency()
	case settings.FieldLocale:
		return m.Locale()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldSingletonID:
		return m.OldSingletonID(ctx)
	case settings.FieldOrgName:
		return m.OldOrgName(ctx)
	case settings.FieldAddress:
		return m.OldAddress(ctx)
	case settings.FieldInvoicePrefix:
		return m.OldInvoicePrefix(ctx)
	case settings.FieldNextSeq:
		return m.OldNextSeq(ctx)
	case settings.FieldInvoiceDayOfMonth:
		return m.OldInvoiceDayOfMonth(ctx)
	case settings.FieldAutoIssue:
		return m.OldAutoIssue(ctx)
	case settings.FieldCurrency:
		return m.OldCurrency(ctx)
	case settings.FieldLocale:
		return m.OldLocale(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldSingletonID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSingletonID(v)
		return nil
	case settings.FieldOrgName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgName(v)
		return nil
	case settings.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case settings.FieldInvoicePrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoicePrefix(v)
		return nil
	case settings.FieldNextSeq:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNextSeq(v)
		return nil
	case settings.FieldInvoiceDayOfMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceDayOfMonth(v)
		return nil
	case settings.FieldAutoIssue:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoIssue(v)
		return nil
	case settings.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case settings.FieldLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	var fields []string
	if m.addsingleton_id != nil {
		fields = append(fields, settings.FieldSingletonID)
	}
	if m.addnext_seq != nil {
		fields = append(fields, settings.FieldNextSeq)
	}
	if m.addinvoice_day_of_month != nil {
		fields = append(fields, settings.FieldInvoiceDayOfMonth)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldSingletonID:
		return m.AddedSingletonID()
	case settings.FieldNextSeq:
		return m.AddedNextSeq()
	case settings.FieldInvoiceDayOfMonth:
		return m.AddedInvoiceDayOfMonth()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case settings.FieldSingletonID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSingletonID(v)
		return nil
	case settings.FieldNextSeq:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNextSeq(v)
		return nil
	case settings.FieldInvoiceDayOfMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInvoiceDayOfMonth(v)
		return nil
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldSingletonID:
		m.ResetSingletonID()
		return nil
	case settings.FieldOrgName:
		m.ResetOrgName()
		return nil
	case settings.FieldAddress:
		m.ResetAddress()
		return nil
	case settings.FieldInvoicePrefix:
		m.ResetInvoicePrefix()
		return nil
	case settings.FieldNextSeq:
		m.ResetNextSeq()
		return nil
	case settings.FieldInvoiceDayOfMonth:
		m.ResetInvoiceDayOfMonth()
		return nil
	case settings.FieldAutoIssue:
		m.ResetAutoIssue()
		return nil
	case settings.FieldCurrency:
		m.ResetCurrency()
		return nil
	case settings.FieldLocale:
		m.ResetLocale()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Settings edge %s", name)
}

// StudentMutation represents an operation that mutates the Student nodes in the graph.
type StudentMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	full_name          *string
	phone              *string
	email              *string
	note               *string
	is_active          *bool
	clearedFields      map[string]struct{}
	enrollments        map[int]struct{}
	removedenrollments map[int]struct{}
	clearedenrollments bool
	done               bool
	oldValue           func(context.Context) (*Student, error)
	predicates         []predicate.Student
}

var _ ent.Mutation = (*StudentMutation)(nil)

// studentOption allows management of the mutation configuration using functional options.
type studentOption func(*StudentMutation)

// newStudentMutation creates new mutation for the Student entity.
func newStudentMutation(c config, op Op, opts ...studentOption) *StudentMutation {
	m := &StudentMutation{
		config:        c,
		op:            op,
		typ:           TypeStudent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentID sets the ID field of the mutation.
func withStudentID(id int) studentOption {
	return func(m *StudentMutation) {
		var (
			err   error
			once  sync.Once
			value *Student
		)
		m.oldValue = func(ctx context.Context) (*Student, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Student.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudent sets the old Student of the mutation.
func withStudent(node *Student) studentOption {
	return func(m *StudentMutation) {
		m.oldValue = func(context.Context) (*Student, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Student.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFullName sets the "full_name" field.
func (m *StudentMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *StudentMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *StudentMutation) ResetFullName() {
	m.full_name = nil
}

// SetPhone sets the "phone" field.
func (m *StudentMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *StudentMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *StudentMutation) ResetPhone() {
	m.phone = nil
}

// SetEmail sets the "email" field.
func (m *StudentMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *StudentMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *StudentMutation) ResetEmail() {
	m.email = nil
}

// SetNote sets the "note" field.
func (m *StudentMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *StudentMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *StudentMutation) ResetNote() {
	m.note = nil
}

// SetIsActive sets the "is_active" field.
func (m *StudentMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *StudentMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Student entity.
// If the Student object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudentMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *StudentMutation) ResetIsActive() {
	m.is_active = nil
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by ids.
func (m *StudentMutation) AddEnrollmentIDs(ids ...int) {
	if m.enrollments == nil {
		m.enrollments = make(map[int]struct{})
	}
	for i := range ids {
		m.enrollments[ids[i]] = struct{}{}
	}
}

// ClearEnrollments clears the "enrollments" edge to the Enrollment entity.
func (m *StudentMutation) ClearEnrollments() {
	m.clearedenrollments = true
}

// EnrollmentsCleared reports if the "enrollments" edge to the Enrollment entity was cleared.
func (m *StudentMutation) EnrollmentsCleared() bool {
	return m.clearedenrollments
}

// RemoveEnrollmentIDs removes the "enrollments" edge to the Enrollment entity by IDs.
func (m *StudentMutation) RemoveEnrollmentIDs(ids ...int) {
	if m.removedenrollments == nil {
		m.removedenrollments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.enrollments, ids[i])
		m.removedenrollments[ids[i]] = struct{}{}
	}
}

// RemovedEnrollments returns the removed IDs of the "enrollments" edge to the Enrollment entity.
func (m *StudentMutation) RemovedEnrollmentsIDs() (ids []int) {
	for id := range m.removedenrollments {
		ids = append(ids, id)
	}
	return
}

// EnrollmentsIDs returns the "enrollments" edge IDs in the mutation.
func (m *StudentMutation) EnrollmentsIDs() (ids []int) {
	for id := range m.enrollments {
		ids = append(ids, id)
	}
	return
}

// ResetEnrollments resets all changes to the "enrollments" edge.
func (m *StudentMutation) ResetEnrollments() {
	m.enrollments = nil
	m.clearedenrollments = false
	m.removedenrollments = nil
}

// Where appends a list predicates to the StudentMutation builder.
func (m *StudentMutation) Where(ps ...predicate.Student) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Student, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Student).
func (m *StudentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.full_name != nil {
		fields = append(fields, student.FieldFullName)
	}
	if m.phone != nil {
		fields = append(fields, student.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, student.FieldEmail)
	}
	if m.note != nil {
		fields = append(fields, student.FieldNote)
	}
	if m.is_active != nil {
		fields = append(fields, student.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case student.FieldFullName:
		return m.FullName()
	case student.FieldPhone:
		return m.Phone()
	case student.FieldEmail:
		return m.Email()
	case student.FieldNote:
		return m.Note()
	case student.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case student.FieldFullName:
		return m.OldFullName(ctx)
	case student.FieldPhone:
		return m.OldPhone(ctx)
	case student.FieldEmail:
		return m.OldEmail(ctx)
	case student.FieldNote:
		return m.OldNote(ctx)
	case student.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown Student field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case student.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case student.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case student.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case student.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case student.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Student numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Student nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudentMutation) ResetField(name string) error {
	switch name {
	case student.FieldFullName:
		m.ResetFullName()
		return nil
	case student.FieldPhone:
		m.ResetPhone()
		return nil
	case student.FieldEmail:
		m.ResetEmail()
		return nil
	case student.FieldNote:
		m.ResetNote()
		return nil
	case student.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.enrollments != nil {
		edges = append(edges, student.EdgeEnrollments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.enrollments))
		for id := range m.enrollments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedenrollments != nil {
		edges = append(edges, student.EdgeEnrollments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeEnrollments:
		ids := make([]ent.Value, 0, len(m.removedenrollments))
		for id := range m.removedenrollments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedenrollments {
		edges = append(edges, student.EdgeEnrollments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudentMutation) EdgeCleared(name string) bool {
	switch name {
	case student.EdgeEnrollments:
		return m.clearedenrollments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Student unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudentMutation) ResetEdge(name string) error {
	switch name {
	case student.EdgeEnrollments:
		m.ResetEnrollments()
		return nil
	}
	return fmt.Errorf("unknown Student edge %s", name)
}

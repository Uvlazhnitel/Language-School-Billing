// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"langschool/ent/attendancemonth"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AttendanceMonth is the model entity for the AttendanceMonth schema.
type AttendanceMonth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID int `json:"student_id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID int `json:"course_id,omitempty"`
	// Year holds the value of the "year" field.
	Year int `json:"year,omitempty"`
	// Month holds the value of the "month" field.
	Month int `json:"month,omitempty"`
	// LessonsCount holds the value of the "lessons_count" field.
	LessonsCount int `json:"lessons_count,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked,omitempty"`
	// Source holds the value of the "source" field.
	Source       attendancemonth.Source `json:"source,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttendanceMonth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendancemonth.FieldLocked:
			values[i] = new(sql.NullBool)
		case attendancemonth.FieldID, attendancemonth.FieldStudentID, attendancemonth.FieldCourseID, attendancemonth.FieldYear, attendancemonth.FieldMonth, attendancemonth.FieldLessonsCount:
			values[i] = new(sql.NullInt64)
		case attendancemonth.FieldSource:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttendanceMonth fields.
func (_m *AttendanceMonth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendancemonth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case attendancemonth.FieldStudentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				_m.StudentID = int(value.Int64)
			}
		case attendancemonth.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				_m.CourseID = int(value.Int64)
			}
		case attendancemonth.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				_m.Year = int(value.Int64)
			}
		case attendancemonth.FieldMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field month", values[i])
			} else if value.Valid {
				_m.Month = int(value.Int64)
			}
		case attendancemonth.FieldLessonsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lessons_count", values[i])
			} else if value.Valid {
				_m.LessonsCount = int(value.Int64)
			}
		case attendancemonth.FieldLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value.Valid {
				_m.Locked = value.Bool
			}
		case attendancemonth.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				_m.Source = attendancemonth.Source(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttendanceMonth.
// This includes values selected through modifiers, order, etc.
func (_m *AttendanceMonth) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this AttendanceMonth.
// Note that you need to call AttendanceMonth.Unwrap() before calling this method if this AttendanceMonth
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AttendanceMonth) Update() *AttendanceMonthUpdateOne {
	return NewAttendanceMonthClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AttendanceMonth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AttendanceMonth) Unwrap() *AttendanceMonth {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttendanceMonth is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AttendanceMonth) String() string {
	var builder strings.Builder
	builder.WriteString("AttendanceMonth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("student_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StudentID))
	builder.WriteString(", ")
	builder.WriteString("course_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CourseID))
	builder.WriteString(", ")
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", _m.Year))
	builder.WriteString(", ")
	builder.WriteString("month=")
	builder.WriteString(fmt.Sprintf("%v", _m.Month))
	builder.WriteString(", ")
	builder.WriteString("lessons_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LessonsCount))
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", _m.Locked))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", _m.Source))
	builder.WriteByte(')')
	return builder.String()
}

// AttendanceMonths is a parsable slice of AttendanceMonth.
type AttendanceMonths []*AttendanceMonth

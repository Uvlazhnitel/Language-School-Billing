// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/invoice"
	"langschool/ent/invoiceline"
	"langschool/ent/predicate"
	"langschool/ent/student"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (_u *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStudentID sets the "student_id" field.
func (_u *InvoiceUpdate) SetStudentID(v int) *InvoiceUpdate {
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableStudentID(v *int) *InvoiceUpdate {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// SetPeriodYear sets the "period_year" field.
func (_u *InvoiceUpdate) SetPeriodYear(v int) *InvoiceUpdate {
	_u.mutation.ResetPeriodYear()
	_u.mutation.SetPeriodYear(v)
	return _u
}

// SetNillablePeriodYear sets the "period_year" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillablePeriodYear(v *int) *InvoiceUpdate {
	if v != nil {
		_u.SetPeriodYear(*v)
	}
	return _u
}

// AddPeriodYear adds value to the "period_year" field.
func (_u *InvoiceUpdate) AddPeriodYear(v int) *InvoiceUpdate {
	_u.mutation.AddPeriodYear(v)
	return _u
}

// SetPeriodMonth sets the "period_month" field.
func (_u *InvoiceUpdate) SetPeriodMonth(v int) *InvoiceUpdate {
	_u.mutation.ResetPeriodMonth()
	_u.mutation.SetPeriodMonth(v)
	return _u
}

// SetNillablePeriodMonth sets the "period_month" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillablePeriodMonth(v *int) *InvoiceUpdate {
	if v != nil {
		_u.SetPeriodMonth(*v)
	}
	return _u
}

// AddPeriodMonth adds value to the "period_month" field.
func (_u *InvoiceUpdate) AddPeriodMonth(v int) *InvoiceUpdate {
	_u.mutation.AddPeriodMonth(v)
	return _u
}

// SetTotalAmount sets the "total_amount" field.
func (_u *InvoiceUpdate) SetTotalAmount(v float64) *InvoiceUpdate {
	_u.mutation.ResetTotalAmount()
	_u.mutation.SetTotalAmount(v)
	return _u
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableTotalAmount(v *float64) *InvoiceUpdate {
	if v != nil {
		_u.SetTotalAmount(*v)
	}
	return _u
}

// AddTotalAmount adds value to the "total_amount" field.
func (_u *InvoiceUpdate) AddTotalAmount(v float64) *InvoiceUpdate {
	_u.mutation.AddTotalAmount(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *InvoiceUpdate) SetStatus(v invoice.Status) *InvoiceUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableStatus(v *invoice.Status) *InvoiceUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNumber sets the "number" field.
func (_u *InvoiceUpdate) SetNumber(v string) *InvoiceUpdate {
	_u.mutation.SetNumber(v)
	return _u
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableNumber(v *string) *InvoiceUpdate {
	if v != nil {
		_u.SetNumber(*v)
	}
	return _u
}

// ClearNumber clears the value of the "number" field.
func (_u *InvoiceUpdate) ClearNumber() *InvoiceUpdate {
	_u.mutation.ClearNumber()
	return _u
}

// SetStudent sets the "student" edge to the Student entity.
func (_u *InvoiceUpdate) SetStudent(v *Student) *InvoiceUpdate {
	return _u.SetStudentID(v.ID)
}

// AddLineIDs adds the "lines" edge to the InvoiceLine entity by IDs.
func (_u *InvoiceUpdate) AddLineIDs(ids ...int) *InvoiceUpdate {
	_u.mutation.AddLineIDs(ids...)
	return _u
}

// AddLines adds the "lines" edges to the InvoiceLine entity.
func (_u *InvoiceUpdate) AddLines(v ...*InvoiceLine) *InvoiceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLineIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (_u *InvoiceUpdate) Mutation() *InvoiceMutation {
	return _u.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (_u *InvoiceUpdate) ClearStudent() *InvoiceUpdate {
	_u.mutation.ClearStudent()
	return _u
}

// ClearLines clears all "lines" edges to the InvoiceLine entity.
func (_u *InvoiceUpdate) ClearLines() *InvoiceUpdate {
	_u.mutation.ClearLines()
	return _u
}

// RemoveLineIDs removes the "lines" edge to InvoiceLine entities by IDs.
func (_u *InvoiceUpdate) RemoveLineIDs(ids ...int) *InvoiceUpdate {
	_u.mutation.RemoveLineIDs(ids...)
	return _u
}

// RemoveLines removes "lines" edges to InvoiceLine entities.
func (_u *InvoiceUpdate) RemoveLines(v ...*InvoiceLine) *InvoiceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvoiceUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if _u.mutation.StudentCleared() && len(_u.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.student"`)
	}
	return nil
}

func (_u *InvoiceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PeriodYear(); ok {
		_spec.SetField(invoice.FieldPeriodYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPeriodYear(); ok {
		_spec.AddField(invoice.FieldPeriodYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PeriodMonth(); ok {
		_spec.SetField(invoice.FieldPeriodMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPeriodMonth(); ok {
		_spec.AddField(invoice.FieldPeriodMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotalAmount(); ok {
		_spec.AddField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Number(); ok {
		_spec.SetField(invoice.FieldNumber, field.TypeString, value)
	}
	if _u.mutation.NumberCleared() {
		_spec.ClearField(invoice.FieldNumber, field.TypeString)
	}
	if _u.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.StudentTable,
			Columns: []string{invoice.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.StudentTable,
			Columns: []string{invoice.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLinesIDs(); len(nodes) > 0 && !_u.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetStudentID sets the "student_id" field.
func (_u *InvoiceUpdateOne) SetStudentID(v int) *InvoiceUpdateOne {
	_u.mutation.SetStudentID(v)
	return _u
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableStudentID(v *int) *InvoiceUpdateOne {
	if v != nil {
		_u.SetStudentID(*v)
	}
	return _u
}

// SetPeriodYear sets the "period_year" field.
func (_u *InvoiceUpdateOne) SetPeriodYear(v int) *InvoiceUpdateOne {
	_u.mutation.ResetPeriodYear()
	_u.mutation.SetPeriodYear(v)
	return _u
}

// SetNillablePeriodYear sets the "period_year" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillablePeriodYear(v *int) *InvoiceUpdateOne {
	if v != nil {
		_u.SetPeriodYear(*v)
	}
	return _u
}

// AddPeriodYear adds value to the "period_year" field.
func (_u *InvoiceUpdateOne) AddPeriodYear(v int) *InvoiceUpdateOne {
	_u.mutation.AddPeriodYear(v)
	return _u
}

// SetPeriodMonth sets the "period_month" field.
func (_u *InvoiceUpdateOne) SetPeriodMonth(v int) *InvoiceUpdateOne {
	_u.mutation.ResetPeriodMonth()
	_u.mutation.SetPeriodMonth(v)
	return _u
}

// SetNillablePeriodMonth sets the "period_month" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillablePeriodMonth(v *int) *InvoiceUpdateOne {
	if v != nil {
		_u.SetPeriodMonth(*v)
	}
	return _u
}

// AddPeriodMonth adds value to the "period_month" field.
func (_u *InvoiceUpdateOne) AddPeriodMonth(v int) *InvoiceUpdateOne {
	_u.mutation.AddPeriodMonth(v)
	return _u
}

// SetTotalAmount sets the "total_amount" field.
func (_u *InvoiceUpdateOne) SetTotalAmount(v float64) *InvoiceUpdateOne {
	_u.mutation.ResetTotalAmount()
	_u.mutation.SetTotalAmount(v)
	return _u
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableTotalAmount(v *float64) *InvoiceUpdateOne {
	if v != nil {
		_u.SetTotalAmount(*v)
	}
	return _u
}

// AddTotalAmount adds value to the "total_amount" field.
func (_u *InvoiceUpdateOne) AddTotalAmount(v float64) *InvoiceUpdateOne {
	_u.mutation.AddTotalAmount(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *InvoiceUpdateOne) SetStatus(v invoice.Status) *InvoiceUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableStatus(v *invoice.Status) *InvoiceUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNumber sets the "number" field.
func (_u *InvoiceUpdateOne) SetNumber(v string) *InvoiceUpdateOne {
	_u.mutation.SetNumber(v)
	return _u
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableNumber(v *string) *InvoiceUpdateOne {
	if v != nil {
		_u.SetNumber(*v)
	}
	return _u
}

// ClearNumber clears the value of the "number" field.
func (_u *InvoiceUpdateOne) ClearNumber() *InvoiceUpdateOne {
	_u.mutation.ClearNumber()
	return _u
}

// SetStudent sets the "student" edge to the Student entity.
func (_u *InvoiceUpdateOne) SetStudent(v *Student) *InvoiceUpdateOne {
	return _u.SetStudentID(v.ID)
}

// AddLineIDs adds the "lines" edge to the InvoiceLine entity by IDs.
func (_u *InvoiceUpdateOne) AddLineIDs(ids ...int) *InvoiceUpdateOne {
	_u.mutation.AddLineIDs(ids...)
	return _u
}

// AddLines adds the "lines" edges to the InvoiceLine entity.
func (_u *InvoiceUpdateOne) AddLines(v ...*InvoiceLine) *InvoiceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLineIDs(ids...)
}

// Mutation returns the InvoiceMutation object of the builder.
func (_u *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return _u.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (_u *InvoiceUpdateOne) ClearStudent() *InvoiceUpdateOne {
	_u.mutation.ClearStudent()
	return _u
}

// ClearLines clears all "lines" edges to the InvoiceLine entity.
func (_u *InvoiceUpdateOne) ClearLines() *InvoiceUpdateOne {
	_u.mutation.ClearLines()
	return _u
}

// RemoveLineIDs removes the "lines" edge to InvoiceLine entities by IDs.
func (_u *InvoiceUpdateOne) RemoveLineIDs(ids ...int) *InvoiceUpdateOne {
	_u.mutation.RemoveLineIDs(ids...)
	return _u
}

// RemoveLines removes "lines" edges to InvoiceLine entities.
func (_u *InvoiceUpdateOne) RemoveLines(v ...*InvoiceLine) *InvoiceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLineIDs(ids...)
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (_u *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Invoice entity.
func (_u *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvoiceUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if _u.mutation.StudentCleared() && len(_u.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.student"`)
	}
	return nil
}

func (_u *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PeriodYear(); ok {
		_spec.SetField(invoice.FieldPeriodYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPeriodYear(); ok {
		_spec.AddField(invoice.FieldPeriodYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PeriodMonth(); ok {
		_spec.SetField(invoice.FieldPeriodMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPeriodMonth(); ok {
		_spec.AddField(invoice.FieldPeriodMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTotalAmount(); ok {
		_spec.AddField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Number(); ok {
		_spec.SetField(invoice.FieldNumber, field.TypeString, value)
	}
	if _u.mutation.NumberCleared() {
		_spec.ClearField(invoice.FieldNumber, field.TypeString)
	}
	if _u.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.StudentTable,
			Columns: []string{invoice.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.StudentTable,
			Columns: []string{invoice.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLinesIDs(); len(nodes) > 0 && !_u.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.LinesTable,
			Columns: []string{invoice.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

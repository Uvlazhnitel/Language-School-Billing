// Code generated by ent, DO NOT EDIT.

package attendancemonth

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the attendancemonth type in the database.
	Label = "attendance_month"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentID holds the string denoting the student_id field in the database.
	FieldStudentID = "student_id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldMonth holds the string denoting the month field in the database.
	FieldMonth = "month"
	// FieldLessonsCount holds the string denoting the lessons_count field in the database.
	FieldLessonsCount = "lessons_count"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// Table holds the table name of the attendancemonth in the database.
	Table = "attendance_months"
)

// Columns holds all SQL columns for attendancemonth fields.
var Columns = []string{
	FieldID,
	FieldStudentID,
	FieldCourseID,
	FieldYear,
	FieldMonth,
	FieldLessonsCount,
	FieldLocked,
	FieldSource,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLessonsCount holds the default value on creation for the "lessons_count" field.
	DefaultLessonsCount int
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked bool
)

// Source defines the type for the "source" enum field.
type Source string

// SourceMonthly is the default value of the Source enum.
const DefaultSource = SourceMonthly

// Source values.
const (
	SourceMonthly  Source = "monthly"
	SourceDailyAgg Source = "daily_agg"
)

func (s Source) String() string {
	return string(s)
}

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s Source) error {
	switch s {
	case SourceMonthly, SourceDailyAgg:
		return nil
	default:
		return fmt.Errorf("attendancemonth: invalid enum value for source field: %q", s)
	}
}

// OrderOption defines the ordering options for the AttendanceMonth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentID orders the results by the student_id field.
func ByStudentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByMonth orders the results by the month field.
func ByMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonth, opts...).ToFunc()
}

// ByLessonsCount orders the results by the lessons_count field.
func ByLessonsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonsCount, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

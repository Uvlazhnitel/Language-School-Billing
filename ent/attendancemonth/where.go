// Code generated by ent, DO NOT EDIT.

package attendancemonth

import (
	"langschool/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLTE(FieldID, id))
}

// StudentID applies equality check predicate on the "student_id" field. It's identical to StudentIDEQ.
func StudentID(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldStudentID, v))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldCourseID, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldYear, v))
}

// Month applies equality check predicate on the "month" field. It's identical to MonthEQ.
func Month(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldMonth, v))
}

// LessonsCount applies equality check predicate on the "lessons_count" field. It's identical to LessonsCountEQ.
func LessonsCount(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldLessonsCount, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldLocked, v))
}

// StudentIDEQ applies the EQ predicate on the "student_id" field.
func StudentIDEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldStudentID, v))
}

// StudentIDNEQ applies the NEQ predicate on the "student_id" field.
func StudentIDNEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldStudentID, v))
}

// StudentIDIn applies the In predicate on the "student_id" field.
func StudentIDIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldStudentID, vs...))
}

// StudentIDNotIn applies the NotIn predicate on the "student_id" field.
func StudentIDNotIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldStudentID, vs...))
}

// StudentIDGT applies the GT predicate on the "student_id" field.
func StudentIDGT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGT(FieldStudentID, v))
}

// StudentIDGTE applies the GTE predicate on the "student_id" field.
func StudentIDGTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGTE(FieldStudentID, v))
}

// StudentIDLT applies the LT predicate on the "student_id" field.
func StudentIDLT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLT(FieldStudentID, v))
}

// StudentIDLTE applies the LTE predicate on the "student_id" field.
func StudentIDLTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLTE(FieldStudentID, v))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldCourseID, vs...))
}

// CourseIDGT applies the GT predicate on the "course_id" field.
func CourseIDGT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGT(FieldCourseID, v))
}

// CourseIDGTE applies the GTE predicate on the "course_id" field.
func CourseIDGTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGTE(FieldCourseID, v))
}

// CourseIDLT applies the LT predicate on the "course_id" field.
func CourseIDLT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLT(FieldCourseID, v))
}

// CourseIDLTE applies the LTE predicate on the "course_id" field.
func CourseIDLTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLTE(FieldCourseID, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLTE(FieldYear, v))
}

// MonthEQ applies the EQ predicate on the "month" field.
func MonthEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldMonth, v))
}

// MonthNEQ applies the NEQ predicate on the "month" field.
func MonthNEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldMonth, v))
}

// MonthIn applies the In predicate on the "month" field.
func MonthIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldMonth, vs...))
}

// MonthNotIn applies the NotIn predicate on the "month" field.
func MonthNotIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldMonth, vs...))
}

// MonthGT applies the GT predicate on the "month" field.
func MonthGT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGT(FieldMonth, v))
}

// MonthGTE applies the GTE predicate on the "month" field.
func MonthGTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGTE(FieldMonth, v))
}

// MonthLT applies the LT predicate on the "month" field.
func MonthLT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLT(FieldMonth, v))
}

// MonthLTE applies the LTE predicate on the "month" field.
func MonthLTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLTE(FieldMonth, v))
}

// LessonsCountEQ applies the EQ predicate on the "lessons_count" field.
func LessonsCountEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldLessonsCount, v))
}

// LessonsCountNEQ applies the NEQ predicate on the "lessons_count" field.
func LessonsCountNEQ(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldLessonsCount, v))
}

// LessonsCountIn applies the In predicate on the "lessons_count" field.
func LessonsCountIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldLessonsCount, vs...))
}

// LessonsCountNotIn applies the NotIn predicate on the "lessons_count" field.
func LessonsCountNotIn(vs ...int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldLessonsCount, vs...))
}

// LessonsCountGT applies the GT predicate on the "lessons_count" field.
func LessonsCountGT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGT(FieldLessonsCount, v))
}

// LessonsCountGTE applies the GTE predicate on the "lessons_count" field.
func LessonsCountGTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldGTE(FieldLessonsCount, v))
}

// LessonsCountLT applies the LT predicate on the "lessons_count" field.
func LessonsCountLT(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLT(FieldLessonsCount, v))
}

// LessonsCountLTE applies the LTE predicate on the "lessons_count" field.
func LessonsCountLTE(v int) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldLTE(FieldLessonsCount, v))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldLocked, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.FieldNotIn(FieldSource, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttendanceMonth) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttendanceMonth) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttendanceMonth) predicate.AttendanceMonth {
	return predicate.AttendanceMonth(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"langschool/ent/enrollment"
	"langschool/ent/predicate"
	"langschool/ent/priceoverride"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PriceOverrideUpdate is the builder for updating PriceOverride entities.
type PriceOverrideUpdate struct {
	config
	hooks    []Hook
	mutation *PriceOverrideMutation
}

// Where appends a list predicates to the PriceOverrideUpdate builder.
func (_u *PriceOverrideUpdate) Where(ps ...predicate.PriceOverride) *PriceOverrideUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEnrollmentID sets the "enrollment_id" field.
func (_u *PriceOverrideUpdate) SetEnrollmentID(v int) *PriceOverrideUpdate {
	_u.mutation.SetEnrollmentID(v)
	return _u
}

// SetNillableEnrollmentID sets the "enrollment_id" field if the given value is not nil.
func (_u *PriceOverrideUpdate) SetNillableEnrollmentID(v *int) *PriceOverrideUpdate {
	if v != nil {
		_u.SetEnrollmentID(*v)
	}
	return _u
}

// SetValidFrom sets the "valid_from" field.
func (_u *PriceOverrideUpdate) SetValidFrom(v time.Time) *PriceOverrideUpdate {
	_u.mutation.SetValidFrom(v)
	return _u
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (_u *PriceOverrideUpdate) SetNillableValidFrom(v *time.Time) *PriceOverrideUpdate {
	if v != nil {
		_u.SetValidFrom(*v)
	}
	return _u
}

// SetValidTo sets the "valid_to" field.
func (_u *PriceOverrideUpdate) SetValidTo(v time.Time) *PriceOverrideUpdate {
	_u.mutation.SetValidTo(v)
	return _u
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (_u *PriceOverrideUpdate) SetNillableValidTo(v *time.Time) *PriceOverrideUpdate {
	if v != nil {
		_u.SetValidTo(*v)
	}
	return _u
}

// ClearValidTo clears the value of the "valid_to" field.
func (_u *PriceOverrideUpdate) ClearValidTo() *PriceOverrideUpdate {
	_u.mutation.ClearValidTo()
	return _u
}

// SetLessonPrice sets the "lesson_price" field.
func (_u *PriceOverrideUpdate) SetLessonPrice(v float64) *PriceOverrideUpdate {
	_u.mutation.ResetLessonPrice()
	_u.mutation.SetLessonPrice(v)
	return _u
}

// SetNillableLessonPrice sets the "lesson_price" field if the given value is not nil.
func (_u *PriceOverrideUpdate) SetNillableLessonPrice(v *float64) *PriceOverrideUpdate {
	if v != nil {
		_u.SetLessonPrice(*v)
	}
	return _u
}

// AddLessonPrice adds value to the "lesson_price" field.
func (_u *PriceOverrideUpdate) AddLessonPrice(v float64) *PriceOverrideUpdate {
	_u.mutation.AddLessonPrice(v)
	return _u
}

// ClearLessonPrice clears the value of the "lesson_price" field.
func (_u *PriceOverrideUpdate) ClearLessonPrice() *PriceOverrideUpdate {
	_u.mutation.ClearLessonPrice()
	return _u
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (_u *PriceOverrideUpdate) SetSubscriptionPrice(v float64) *PriceOverrideUpdate {
	_u.mutation.ResetSubscriptionPrice()
	_u.mutation.SetSubscriptionPrice(v)
	return _u
}

// SetNillableSubscriptionPrice sets the "subscription_price" field if the given value is not nil.
func (_u *PriceOverrideUpdate) SetNillableSubscriptionPrice(v *float64) *PriceOverrideUpdate {
	if v != nil {
		_u.SetSubscriptionPrice(*v)
	}
	return _u
}

// AddSubscriptionPrice adds value to the "subscription_price" field.
func (_u *PriceOverrideUpdate) AddSubscriptionPrice(v float64) *PriceOverrideUpdate {
	_u.mutation.AddSubscriptionPrice(v)
	return _u
}

// ClearSubscriptionPrice clears the value of the "subscription_price" field.
func (_u *PriceOverrideUpdate) ClearSubscriptionPrice() *PriceOverrideUpdate {
	_u.mutation.ClearSubscriptionPrice()
	return _u
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (_u *PriceOverrideUpdate) SetEnrollment(v *Enrollment) *PriceOverrideUpdate {
	return _u.SetEnrollmentID(v.ID)
}

// Mutation returns the PriceOverrideMutation object of the builder.
func (_u *PriceOverrideUpdate) Mutation() *PriceOverrideMutation {
	return _u.mutation
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (_u *PriceOverrideUpdate) ClearEnrollment() *PriceOverrideUpdate {
	_u.mutation.ClearEnrollment()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PriceOverrideUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PriceOverrideUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PriceOverrideUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PriceOverrideUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PriceOverrideUpdate) check() error {
	if _u.mutation.EnrollmentCleared() && len(_u.mutation.EnrollmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PriceOverride.enrollment"`)
	}
	return nil
}

func (_u *PriceOverrideUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(priceoverride.Table, priceoverride.Columns, sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ValidFrom(); ok {
		_spec.SetField(priceoverride.FieldValidFrom, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ValidTo(); ok {
		_spec.SetField(priceoverride.FieldValidTo, field.TypeTime, value)
	}
	if _u.mutation.ValidToCleared() {
		_spec.ClearField(priceoverride.FieldValidTo, field.TypeTime)
	}
	if value, ok := _u.mutation.LessonPrice(); ok {
		_spec.SetField(priceoverride.FieldLessonPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLessonPrice(); ok {
		_spec.AddField(priceoverride.FieldLessonPrice, field.TypeFloat64, value)
	}
	if _u.mutation.LessonPriceCleared() {
		_spec.ClearField(priceoverride.FieldLessonPrice, field.TypeFloat64)
	}
	if value, ok := _u.mutation.SubscriptionPrice(); ok {
		_spec.SetField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSubscriptionPrice(); ok {
		_spec.AddField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if _u.mutation.SubscriptionPriceCleared() {
		_spec.ClearField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64)
	}
	if _u.mutation.EnrollmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   priceoverride.EnrollmentTable,
			Columns: []string{priceoverride.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   priceoverride.EnrollmentTable,
			Columns: []string{priceoverride.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{priceoverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PriceOverrideUpdateOne is the builder for updating a single PriceOverride entity.
type PriceOverrideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceOverrideMutation
}

// SetEnrollmentID sets the "enrollment_id" field.
func (_u *PriceOverrideUpdateOne) SetEnrollmentID(v int) *PriceOverrideUpdateOne {
	_u.mutation.SetEnrollmentID(v)
	return _u
}

// SetNillableEnrollmentID sets the "enrollment_id" field if the given value is not nil.
func (_u *PriceOverrideUpdateOne) SetNillableEnrollmentID(v *int) *PriceOverrideUpdateOne {
	if v != nil {
		_u.SetEnrollmentID(*v)
	}
	return _u
}

// SetValidFrom sets the "valid_from" field.
func (_u *PriceOverrideUpdateOne) SetValidFrom(v time.Time) *PriceOverrideUpdateOne {
	_u.mutation.SetValidFrom(v)
	return _u
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (_u *PriceOverrideUpdateOne) SetNillableValidFrom(v *time.Time) *PriceOverrideUpdateOne {
	if v != nil {
		_u.SetValidFrom(*v)
	}
	return _u
}

// SetValidTo sets the "valid_to" field.
func (_u *PriceOverrideUpdateOne) SetValidTo(v time.Time) *PriceOverrideUpdateOne {
	_u.mutation.SetValidTo(v)
	return _u
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (_u *PriceOverrideUpdateOne) SetNillableValidTo(v *time.Time) *PriceOverrideUpdateOne {
	if v != nil {
		_u.SetValidTo(*v)
	}
	return _u
}

// ClearValidTo clears the value of the "valid_to" field.
func (_u *PriceOverrideUpdateOne) ClearValidTo() *PriceOverrideUpdateOne {
	_u.mutation.ClearValidTo()
	return _u
}

// SetLessonPrice sets the "lesson_price" field.
func (_u *PriceOverrideUpdateOne) SetLessonPrice(v float64) *PriceOverrideUpdateOne {
	_u.mutation.ResetLessonPrice()
	_u.mutation.SetLessonPrice(v)
	return _u
}

// SetNillableLessonPrice sets the "lesson_price" field if the given value is not nil.
func (_u *PriceOverrideUpdateOne) SetNillableLessonPrice(v *float64) *PriceOverrideUpdateOne {
	if v != nil {
		_u.SetLessonPrice(*v)
	}
	return _u
}

// AddLessonPrice adds value to the "lesson_price" field.
func (_u *PriceOverrideUpdateOne) AddLessonPrice(v float64) *PriceOverrideUpdateOne {
	_u.mutation.AddLessonPrice(v)
	return _u
}

// ClearLessonPrice clears the value of the "lesson_price" field.
func (_u *PriceOverrideUpdateOne) ClearLessonPrice() *PriceOverrideUpdateOne {
	_u.mutation.ClearLessonPrice()
	return _u
}

// SetSubscriptionPrice sets the "subscription_price" field.
func (_u *PriceOverrideUpdateOne) SetSubscriptionPrice(v float64) *PriceOverrideUpdateOne {
	_u.mutation.ResetSubscriptionPrice()
	_u.mutation.SetSubscriptionPrice(v)
	return _u
}

// SetNillableSubscriptionPrice sets the "subscription_price" field if the given value is not nil.
func (_u *PriceOverrideUpdateOne) SetNillableSubscriptionPrice(v *float64) *PriceOverrideUpdateOne {
	if v != nil {
		_u.SetSubscriptionPrice(*v)
	}
	return _u
}

// AddSubscriptionPrice adds value to the "subscription_price" field.
func (_u *PriceOverrideUpdateOne) AddSubscriptionPrice(v float64) *PriceOverrideUpdateOne {
	_u.mutation.AddSubscriptionPrice(v)
	return _u
}

// ClearSubscriptionPrice clears the value of the "subscription_price" field.
func (_u *PriceOverrideUpdateOne) ClearSubscriptionPrice() *PriceOverrideUpdateOne {
	_u.mutation.ClearSubscriptionPrice()
	return _u
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (_u *PriceOverrideUpdateOne) SetEnrollment(v *Enrollment) *PriceOverrideUpdateOne {
	return _u.SetEnrollmentID(v.ID)
}

// Mutation returns the PriceOverrideMutation object of the builder.
func (_u *PriceOverrideUpdateOne) Mutation() *PriceOverrideMutation {
	return _u.mutation
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (_u *PriceOverrideUpdateOne) ClearEnrollment() *PriceOverrideUpdateOne {
	_u.mutation.ClearEnrollment()
	return _u
}

// Where appends a list predicates to the PriceOverrideUpdate builder.
func (_u *PriceOverrideUpdateOne) Where(ps ...predicate.PriceOverride) *PriceOverrideUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PriceOverrideUpdateOne) Select(field string, fields ...string) *PriceOverrideUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PriceOverride entity.
func (_u *PriceOverrideUpdateOne) Save(ctx context.Context) (*PriceOverride, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PriceOverrideUpdateOne) SaveX(ctx context.Context) *PriceOverride {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PriceOverrideUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PriceOverrideUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PriceOverrideUpdateOne) check() error {
	if _u.mutation.EnrollmentCleared() && len(_u.mutation.EnrollmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PriceOverride.enrollment"`)
	}
	return nil
}

func (_u *PriceOverrideUpdateOne) sqlSave(ctx context.Context) (_node *PriceOverride, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(priceoverride.Table, priceoverride.Columns, sqlgraph.NewFieldSpec(priceoverride.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PriceOverride.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, priceoverride.FieldID)
		for _, f := range fields {
			if !priceoverride.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != priceoverride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ValidFrom(); ok {
		_spec.SetField(priceoverride.FieldValidFrom, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ValidTo(); ok {
		_spec.SetField(priceoverride.FieldValidTo, field.TypeTime, value)
	}
	if _u.mutation.ValidToCleared() {
		_spec.ClearField(priceoverride.FieldValidTo, field.TypeTime)
	}
	if value, ok := _u.mutation.LessonPrice(); ok {
		_spec.SetField(priceoverride.FieldLessonPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLessonPrice(); ok {
		_spec.AddField(priceoverride.FieldLessonPrice, field.TypeFloat64, value)
	}
	if _u.mutation.LessonPriceCleared() {
		_spec.ClearField(priceoverride.FieldLessonPrice, field.TypeFloat64)
	}
	if value, ok := _u.mutation.SubscriptionPrice(); ok {
		_spec.SetField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSubscriptionPrice(); ok {
		_spec.AddField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64, value)
	}
	if _u.mutation.SubscriptionPriceCleared() {
		_spec.ClearField(priceoverride.FieldSubscriptionPrice, field.TypeFloat64)
	}
	if _u.mutation.EnrollmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   priceoverride.EnrollmentTable,
			Columns: []string{priceoverride.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   priceoverride.EnrollmentTable,
			Columns: []string{priceoverride.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PriceOverride{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{priceoverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
